<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Footloose.Xmpp</name>
    </assembly>
    <members>
        <member name="T:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration">
            <summary>
            Configuration class for the <see cref="T:Footloose.TransportChannels.Xmpp.XmppTransportChannel" />.
            </summary>
        </member>
        <member name="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Footloose.Configuration.Fluent.RemotingTransportChannelConfiguration" /> class
            with default settings.
            </summary>
        </member>
        <member name="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.Credentials(System.Net.NetworkCredential)">
            <summary>
            Specify the <see cref="T:System.Net.NetworkCredential" /> for authentication with the XMPP server.
            <see cref="P:System.Net.NetworkCredential.UserName" /> is the user part, <see cref="P:System.Net.NetworkCredential.Domain" />
            is the server part of the XMPP Jid.
            </summary>
            <param name="credentials">
                <see cref="T:System.Net.NetworkCredential" /> with user name, passwort and XMPP server domain.</param>
            <returns>
                <see cref="T:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration" />
            </returns>
        </member>
        <member name="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.ConnectionType(Footloose.Configuration.XmppConnectionType)">
            <summary>
            Specify the XMPP connection type to the remote XMPP server. Default is TCP.
            </summary>
            <param name="connectionType">Type of the XMPP connection.</param>
            <returns>
                <see cref="T:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration" />
            </returns>
        </member>
        <member name="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.ServerAddress(System.String)">
            <summary>
            Specify the XMPP server to connect. Use this setting for XMPP servers
            without SRV records or HTTP Polling and BOSH connections.
            </summary>
            <param name="serverAddress">Address of the XMPP server to connect.</param>
            <returns>
                <see cref="T:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration" />
            </returns>
        </member>
        <member name="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.Port(System.Int32)">
            <summary>
            Specify the XMPP server port to connect. Default is 5222.
            </summary>
            <param name="port">A value between 1 and 65535.</param>
            <returns>
                <see cref="T:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration" />
            </returns>
        </member>
        <member name="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.AutoResolveServerAddress">
            <summary>
            Enables auto resolve of the XMPP server address via SRV DNS Records. Default is on.
            </summary>
            <returns>
                <see cref="T:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration" />
            </returns>
        </member>
        <member name="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.UseCompression">
            <summary>
            Enables the use of XMPP stream compression to save bandwidth. Default is off.
            </summary>
            <returns>
                <see cref="T:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration" />
            </returns>
        </member>
        <member name="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.UseTls">
            <summary>
            Enables the use of Start-TLS for TLS XMPP stream encryption and compression. Default is on.
            </summary>
            <remarks>
            See RFC 2246 for further details: http://www.ietf.org/rfc/rfc2246.txt
            </remarks>
            <returns>
                <see cref="T:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration" />
            </returns>
        </member>
        <member name="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.RemoteCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)">
            <summary>
            Specify the callback that verifies the remote Secure Sockets Layer (SSL) certificate used for authentication.
            </summary>
            <param name="callback">A <see cref="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.RemoteCertificateValidationCallback(System.Net.Security.RemoteCertificateValidationCallback)" />.</param>
            <returns>
                <see cref="T:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration" />
            </returns>
        </member>
        <member name="M:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.Apply(Footloose.Configuration.TransportChannelConfigurationSection)">
            <summary>
            Applies the transport channel configuration data to the <see cref="T:Footloose.Configuration.TransportChannelConfigurationSection" />.
            </summary>
            <param name="configuration">The <see cref="T:Footloose.Configuration.ServiceContractConfigurationSection" /> configuration.</param>
        </member>
        <member name="P:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration.Standard">
            <summary>
            Initializes a new instance of the <see cref="T:Footloose.Configuration.Fluent.XmppTransportChannelConfiguration" /> class
            with default settings.
            </summary>
        </member>
        <member name="T:Footloose.Configuration.XmppConnectionType">
            <summary>
            Specify the type of connection to a remote XMPP server.
            </summary>
        </member>
        <member name="F:Footloose.Configuration.XmppConnectionType.Tcp">
            <summary>
            TCP/IP socket connection
            </summary>
        </member>
        <member name="F:Footloose.Configuration.XmppConnectionType.HttpPolling">
            <summary>
            HTTP polling connection
            </summary>
            <remarks>
            See XEP-0025 for further details: http://www.xmpp.org/extensions/xep-0025.html
            </remarks>
        </member>
        <member name="F:Footloose.Configuration.XmppConnectionType.Bosh">
            <summary>
            Bidirectional-streams Over Synchronous HTTP (BOSH)
            </summary>
            <remarks>
            See XEP-0124 for further details: http://www.xmpp.org/extensions/xep-0124.html
            </remarks>
        </member>
        <member name="T:Footloose.Configuration.XmppTransportChannelConfigurationElement">
            <summary>
             Represents a configuration element for the XMPP transport channel within a configuration file.
            </summary>
        </member>
        <member name="M:Footloose.Configuration.XmppTransportChannelConfigurationElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Footloose.Configuration.XmppTransportChannelConfigurationElement" /> class.
            </summary>
        </member>
        <member name="M:Footloose.Configuration.XmppTransportChannelConfigurationElement.#ctor(Footloose.Configuration.TransportChannelConfigurationElementBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Footloose.Configuration.XmppTransportChannelConfigurationElement" /> class
            using values from the provided <see cref="T:Footloose.Configuration.TransportChannelConfigurationElementBase" />.
            </summary>
            <param name="configuration">The <see cref="T:Footloose.Configuration.TransportChannelConfigurationElementBase" /> to get values from.</param>
        </member>
        <member name="P:Footloose.Configuration.XmppTransportChannelConfigurationElement.Credentials">
            <summary>
            Gets or sets the key of the credentios to use.
            </summary>
        </member>
        <member name="P:Footloose.Configuration.XmppTransportChannelConfigurationElement.ConnectionType">
            <summary>
            The XMPP connection type to the remote XMPP server. Default is TCP.
            </summary>
        </member>
        <member name="P:Footloose.Configuration.XmppTransportChannelConfigurationElement.ServerAddress">
            <summary>
            Gets or sets the XMPP server to connect. Use this setting for XMPP servers
            without SRV records or HTTP Polling and BOSH connections.
            </summary>
        </member>
        <member name="P:Footloose.Configuration.XmppTransportChannelConfigurationElement.Port">
            <summary>
             Gets or sets the XMPP server port to connect. Default is 5222.
            </summary>
        </member>
        <member name="P:Footloose.Configuration.XmppTransportChannelConfigurationElement.AutoResolveServerAddress">
            <summary>
             Enable auto resolve of the XMPP server address via SRV DNS Records. Default is on.
            </summary>
        </member>
        <member name="P:Footloose.Configuration.XmppTransportChannelConfigurationElement.UseCompression">
            <summary>
             Enables the use of XMPP stream compression to save bandwidth. Default is off.
            </summary>
        </member>
        <member name="P:Footloose.Configuration.XmppTransportChannelConfigurationElement.UseTls">
            <summary>
             Enables the use of Start-TLS for TLS XMPP stream encryption and compression. Default is on.
            </summary>
            <remarks>
             See RFC 2246 for further details: http://www.ietf.org/rfc/rfc2246.txt
             </remarks>
        </member>
        <member name="P:Footloose.Configuration.XmppTransportChannelConfigurationElement.RemoteCertificateValidationCallback">
            <summary>
            Gets or sets the callback that verifies the remote Secure Sockets Layer (SSL) certificate used for authentication.
            </summary>
        </member>
        <member name="T:Footloose.Extensions.CommunicationEndpointStatusTypeExtensions">
            <summary>
            Provide extensions for the <see cref="T:Footloose.DataModel.CommunicationEndpointStatusType" /> type.
            </summary>
        </member>
        <member name="M:Footloose.Extensions.CommunicationEndpointStatusTypeExtensions.ToShowType(Footloose.DataModel.CommunicationEndpointStatusType)">
            <summary>
            Converts a <see cref="T:Footloose.DataModel.CommunicationEndpointStatusType" /> into a <see cref="T:agsXMPP.protocol.client.ShowType" />.
            </summary>
            <param name="value" />
            <returns />
        </member>
        <member name="T:Footloose.Extensions.JidExtensions">
            <summary>
            Provide extensions for the <see cref="T:agsXMPP.Jid" /> type.
            </summary>
        </member>
        <member name="M:Footloose.Extensions.JidExtensions.ToUri(agsXMPP.Jid)">
            <summary>
            Converts a <see cref="T:agsXMPP.Jid" /> into a <see cref="T:System.Uri" />.
            See http://xmpp.org/rfcs/rfc5122.html
            </summary>
            <param name="value" />
            <returns>A Jid in Uri notation.</returns>
        </member>
        <member name="T:Footloose.Extensions.IqTypeExtensions">
            <summary>
            Provide extensions for the <see cref="T:agsXMPP.protocol.client.IqType" /> type.
            </summary>
        </member>
        <member name="M:Footloose.Extensions.IqTypeExtensions.ToMessageType(agsXMPP.protocol.client.IqType)">
            <summary>
            Converts a <see cref="T:agsXMPP.protocol.client.IqType" /> into a <see cref="T:Footloose.Messaging.MessageType" />.
            </summary>
            <param name="value" />
            <returns />
        </member>
        <member name="T:Footloose.Extensions.MessageTypeExtensions">
            <summary>
            Provide extensions for the <see cref="T:Footloose.Messaging.MessageType" /> type.
            </summary>
        </member>
        <member name="M:Footloose.Extensions.MessageTypeExtensions.ToIqType(Footloose.Messaging.MessageType)">
            <summary>
            Converts a <see cref="T:Footloose.Messaging.MessageType" /> into a <see cref="T:agsXMPP.protocol.client.IqType" />.
            </summary>
            <param name="value" />
            <returns />
        </member>
        <member name="T:Footloose.Extensions.ShowTypeExtensions">
            <summary>
            Provide extensions for the <see cref="T:agsXMPP.protocol.client.ShowType" /> type.
            </summary>
        </member>
        <member name="M:Footloose.Extensions.ShowTypeExtensions.ToCommunicationEndpointStatusType(agsXMPP.protocol.client.ShowType)">
            <summary>
            Converts a <see cref="T:agsXMPP.protocol.client.ShowType" /> into a <see cref="T:Footloose.DataModel.CommunicationEndpointStatusType" />.
            </summary>
            <param name="value" />
            <returns />
        </member>
        <member name="T:Footloose.Extensions.UriExtensions">
            <summary>
            Provide extensions for the <see cref="T:System.Uri" /> type.
            </summary>
        </member>
        <member name="M:Footloose.Extensions.UriExtensions.ToJid(System.Uri)">
            <summary>
            Converts a <see cref="T:System.Uri" /> into a <see cref="T:agsXMPP.Jid" />.
            See http://xmpp.org/rfcs/rfc5122.html
            </summary>
            <param name="value" />
            <returns>A <see cref="T:agsXMPP.Jid" /> from a <see cref="T:System.Uri" />.</returns>
        </member>
        <member name="T:Footloose.Extensions.XmppConnectionTypeExtensions">
            <summary>
            Provide extensions for the <see cref="T:Footloose.Configuration.XmppConnectionType" /> type.
            </summary>
        </member>
        <member name="M:Footloose.Extensions.XmppConnectionTypeExtensions.ToSocketConnectionType(Footloose.Configuration.XmppConnectionType)">
            <summary>
            Converts a <see cref="T:Footloose.Configuration.XmppConnectionType" /> into a <see cref="T:agsXMPP.Net.SocketConnectionType" />.
            </summary>
            <param name="value" />
            <returns />
        </member>
        <member name="T:Footloose.TransportChannels.Xmpp.XmppConnectionManager">
            <summary>
            This class manages automatic reconnects.
            </summary>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppConnectionManager.Finalize">
            <summary>
            This destructor will run only if the Dispose method
            does not get called.
            </summary>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppConnectionManager.Connect">
            <summary>
            Connect to XMPP server.
            </summary>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppConnectionManager.Disconnect">
            <summary>
            Disconnects from the XMPP server.
            </summary>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppConnectionManager.GetFailureDelay(System.Int32)">
            <summary>
            Get the delay time escalation in milliseconds.
            </summary>
            <param name="failtureCount">Escalation level.</param>
            <returns>Delay in milliseconds.</returns>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppConnectionManager.XmppConnection_OnAuthError(System.Object,agsXMPP.Xml.Dom.Element)">
            <summary>
            Event that occurs on authentication errors e.g. wrong password, user doesnt exist etc.
            </summary>
            <param name="sender" />
            <param name="e" />
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppConnectionManager.XmppConnection_OnClose(System.Object)">
            <summary>
            Event that occurs when the connection was closed.
            </summary>
            <param name="sender" />
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppConnectionManager.XmppClientConnection_OnBinded(System.Object)">
            <summary>
            Event that occurs after the resource was binded .
            Which means we're successfully connected.
            </summary>
            <param name="sender" />
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppConnectionManager.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing,
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppConnectionManager.Dispose(System.Boolean)">
            <summary>
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the 
            runtime from inside the finalizer and you should not reference 
            other objects. Only unmanaged resources can be disposed.
            </summary>
            <param name="disposing">Indicator that the method as been called by user's code.</param>
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppConnectionManager.IsConnected">
            <summary>
            Gets the current state of the connection.
            true if the connection is established; otherwise, false.
            </summary>
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppConnectionManager.IsDisposed">
            <summary>
            Gets or sets a value indicating whether the class has been disposed of.
            true if the class has been disposed of; otherwise, false. 
            </summary>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppEndpointIdentityManager.RequestDiscoInfo(System.Uri,System.String)">
            <summary>
            Request asynchronously service discovery information from the given service with the specified capabilities.
            </summary>
            <param name="to">The service to request the disco information from.</param>
            <param name="capabilities">The provided capabilities of the service.</param>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppEndpointIdentityManager.OnDiscoverInformationResult(System.Object,agsXMPP.protocol.client.IQ,System.Object)">
            <summary>
            Callback method for the asynchronous RequestDiscoInfo method.
            </summary>
            <param name="sender" />
            <param name="iq" />
            <param name="data" />
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppTransportChannel.RegisterXmppElements">
            <summary>
            Method to register custom Xmpp elements to the
            agsXMPP element factory.
            </summary>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppTransportChannel.Connect">
            <summary>
            Brings the transport channel online.
            </summary>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppTransportChannel.Disconnect">
            <summary>
            Disconnects the transport channel.
            </summary>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppTransportChannel.SetDiscoInfo(Footloose.DataModel.DiscoInfo)">
            <summary>
            Sets the service discovery information the transport channel should
            send on discovery requests.
            </summary>
            <param name="discoInfo">Service discovery information for this service node.</param>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppTransportChannel.SendMessage(Footloose.Messaging.Message)">
            <summary>
            Sends the specified message through this transport channel.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppTransportChannel.XmppConnection_OnAuthError(System.Object,agsXMPP.Xml.Dom.Element)">
            <summary>
            Event that occurs on authentication errors e.g. wrong password, user doesnt exist etc.
            </summary>
            <param name="sender" />
            <param name="e" />
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppTransportChannel.XmppConnection_OnError(System.Object,System.Exception)">
            <summary />
            <param name="sender" />
            <param name="ex" />
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppTransportChannel.XmppConnection_OnIq(System.Object,agsXMPP.protocol.client.IQ)">
            <summary>
            Event that occurs when a info query (iq) is received.
            </summary>
            <param name="sender" />
            <param name="iq" />
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppTransportChannel.XmppConnection_OnWriteXml(System.Object,System.String)">
            <summary>
            Event that occurs when a XML packet or text is written to the Socket.
            </summary>
            <param name="sender" />
            <param name="xml" />
        </member>
        <member name="M:Footloose.TransportChannels.Xmpp.XmppTransportChannel.XmppConnection_OnReadXml(System.Object,System.String)">
            <summary>
            Event that occurs when a XML packet or text is received the XMP parser.
            </summary>
            <param name="sender" />
            <param name="xml" />
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppTransportChannel.ConnectionType">
            <summary>
            Gets r sets the XMPP connection type to the remote XMPP server.
            </summary>
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppTransportChannel.ServerAddress">
            <summary>
            Gets or sets the XMPP server to connect. Use this setting for XMPP servers.
            without SRV records or HTTP Polling and BOSH connections.
            </summary>
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppTransportChannel.Port">
            <summary>
            Gets or sets the port of the remote XMPP server.
            </summary>
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppTransportChannel.AutoResolveServerAddress">
            <summary>
            Gets or sets a value indicating if the XMPP server address
            should be auto resolved via SRV DNS Records.
            </summary>
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppTransportChannel.UseCompression">
            <summary>
            Gets or sets a value indicating if XMPP stream compression
            should be used to save bandwidth.
            </summary>
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppTransportChannel.UseTls">
            <summary>
            Gets or sets a value indicating if Start-TLS
            for TLS XMPP stream encryption and compression
            should be used.
            </summary>
            <remarks>
            See RFC 2246 for further details: http://www.ietf.org/rfc/rfc2246.txt
            </remarks>
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppTransportChannel.RemoteCertificateValidationCallback">
            <summary>
            Gets or sets the callback that verifies the remote
            Secure Sockets Layer (SSL) certificate used for authentication.
            </summary>
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppTransportChannel.IsConnected">
            <summary>
            Gets the current state of the connection.
            true if the connection is established; otherwise, false.
            </summary>
        </member>
        <member name="P:Footloose.TransportChannels.Xmpp.XmppTransportChannel.ServiceUri">
            <summary>
            Gets the Uri of this service node.
            </summary>
        </member>
        <member name="T:agsXMPP.Sasl.DigestMD5.DigestMD5Mechanism">
            <summary>
            Handels the SASL Digest MD5 authentication
            </summary>
        </member>
        <member name="T:agsXMPP.Sasl.Mechanism">
            <summary>
            Summary description for Mechanism.
            </summary>
        </member>
        <member name="M:agsXMPP.Sasl.Mechanism.Init(agsXMPP.XmppClientConnection)">
            <summary />
            <param name="con" />
        </member>
        <member name="M:agsXMPP.Sasl.Mechanism.Parse(agsXMPP.Xml.Dom.Node)">
            <summary />
            <param name="e" />
        </member>
        <member name="P:agsXMPP.Sasl.Mechanism.Username">
            <summary />
        </member>
        <member name="P:agsXMPP.Sasl.Mechanism.Password">
            <summary />
        </member>
        <member name="P:agsXMPP.Sasl.Mechanism.Server">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.x.muc.StatusCode">
            <summary>
            StatusCode
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.Unknown">
            <summary>
            Unkown status code.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.FullJidVisible">
            <summary>
            Inform user that any occupant is allowed to see the user's full JID.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.AffiliationChanged">
            <summary>
            Inform user that his or her affiliation changed while not in the room.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.ShowUnavailableMembers">
            <summary>
            Inform occupants that room now shows unavailable members.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.HideUnavailableMembers">
            <summary>
            Inform occupants that room now does not show unavailable members .
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.ConfigurationChanged">
            <summary>
            Inform occupants that a non-privacy-related room configuration change has occurred.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.SelfPresence">
            <summary>
            Inform user that presence refers to one of its own room occupants .
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.LoggingEnabled">
            <summary>
            Inform occupants that room logging is now enabled.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.LoggingDisabled">
            <summary>
            Inform occupants that room logging is now disabled. 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.RoomNonAnonymous">
            <summary>
            Inform occupants that the room is now non-anonymous.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.RoomSemiAnonymous">
            <summary>
            Inform occupants that the room is now semi-anonymous.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.RoomAnonymous">
            <summary>
            Inform occupants that the room is now fully-anonymous. 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.RoomCreated">
            <summary>
            Inform user that a new room has been created. 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.ModifiedNick">
            <summary>
             Inform user that service has assigned or modified occupant's roomnick.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.Banned">
            <summary>
            Inform user that he or she has been banned from the room. 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.NewNickname">
            <summary>
            Inform all occupants of new room nickname. 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.Kicked">
            <summary>
            Inform user that he or she has been kicked from the room. 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.AffiliationChange">
            <summary>
            Inform user that he or she is being removed from the room because of an affiliation change.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.MembersOnly">
            <summary>
            Inform user that he or she is being removed from the room because the room 
            has been changed to members-only and the user is not a member.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.StatusCode.Shutdown">
            <summary>
            Inform user that he or she is being removed from the room because of a system shutdown.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Status">
            <summary>
            Summary description for MucUser.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Dom.Node">
            <summary />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Node.AddChild(agsXMPP.Xml.Dom.Node)">
            <summary>
            Appends the given Element as child element
            </summary>
            <param name="e" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Node.ToString">
            <summary>
            Returns the Xml of the current Element (Node) as string
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Node.ToString(System.Xml.Formatting)">
            <summary>
            returns the Xml, difference to the Xml property is that you can set formatting porperties
            </summary>
            <param name="format" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Node.ToString(System.Xml.Formatting,System.Int32)">
            <summary>
            returns the Xml, difference to the Xml property is that you can set formatting properties
            </summary>
            <param name="format" />
            <param name="indent" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetAttributeBool(System.String)">
            <summary>
            Reads a boolean Attribute, if the attrib is absent it returns also false.
            </summary>
            <param name="name" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetAttributeDouble(System.String,System.IFormatProvider)">
            <summary />
            <param name="name" />
            <param name="ifp" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetAttributeDouble(System.String)">
            <summary>
            Get a Attribute of type double (Decimal seperator = ".")
            </summary>
            <param name="name" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetTag(System.String)">
            <summary>
            Return the Text of the first Tag with a specified Name.
            It doesnt traverse the while tree and checks only the unerlying childnodes
            </summary>
            <param name="TagName">Name of Tag to find as string</param>
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetTagBase64(System.String,System.String)">
            <summary>
            Adds a Tag and encodes the Data to BASE64
            </summary>
            <param name="argTagname" />
            <param name="argText" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetTagBase64(System.String,System.Byte[])">
            <summary>
            Adds a Tag end decodes the byte buffer to BASE64
            </summary>
            <param name="argTagname" />
            <param name="buffer" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetTagBool(System.String)">
            <summary>
            Return the Text of the first Tag with a specified Name in all childnodes as boolean
            </summary>
            <param name="TagName">name of Tag to findas string</param>
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetTagDouble(System.String)">
            <summary>
            Get a Tag of type double (Decimal seperator = ".")
            </summary>
            <param name="TagName" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetTagDouble(System.String,System.IFormatProvider)">
            <summary>
            Get a Tag of type double with the given iFormatProvider
            </summary>
            <param name="TagName" />
            <param name="nfi" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.HasTagEnum(System.Type)">
            <summary />
            <param name="enumType" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.RemoveTag(System.String)">
            <summary>
            Remove a Tag when it exists
            </summary>
            <param name="TagName">Tagname to remove</param>
            <returns>true when existing and removed, false when not existing</returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.RemoveTag(System.Type)">
            <summary>
            Remove a Tag when it exists
            </summary>
            <param name="type">Type of the tag that should be removed</param>
            <returns>true when existing and removed, false when not existing</returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.RemoveTags(System.Type)">
            <summary>
            Removes all Tags of the given type. Doesnt traverse the tree
            </summary>
            <param name="type">Type of the tags that should be removed</param>
            <returns>true when tags were removed, false when no tags were found and removed</returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.RemoveTags``1">
            <summary>
            Removes all Tags of the given type. Doesnt traverse the tree
            </summary>
            <typeparam name="T">Type of the tags that should be removed</typeparam>
            <returns>true when tags were removed, false when no tags were found and removed</returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.ReplaceChild(agsXMPP.Xml.Dom.Element)">
            <summary>
            Same as AddChild, but Replaces the childelement when it exists
            </summary>
            <param name="e" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.RemoveAttribute(System.String)">
            <summary>
            Removes a Attribute
            </summary>
            <param name="name">Attribute as string to remove</param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.String)">
            <summary>
            Adds a new Attribue or changes a Attriv when already exists
            </summary>
            <param name="name">name of Attribute to add/change</param>
            <param name="value">value of teh Attribute to add/change</param>
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.Int32)">
            <summary />
            <param name="name" />
            <param name="value" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.Int64)">
            <summary />
            <param name="name" />
            <param name="value" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.Boolean)">
            <summary>
            Writes a boolean attribute, the value is either 'true' or 'false'
            </summary>
            <param name="name" />
            <param name="val" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,agsXMPP.Jid)">
            <summary>
            Set a attribute of type Jid
            </summary>
            <param name="name" />
            <param name="value" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.Double)">
            <summary>
            Set a attribute from a double in english number format
            </summary>
            <param name="name" />
            <param name="value" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetAttribute(System.String,System.Double,System.IFormatProvider)">
            <summary>
            Set a attribute from a double with the given Format provider
            </summary>
            <param name="name" />
            <param name="value" />
            <param name="ifp" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.HasData">
            <summary>
            Has this Element some CDATA?
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.GetData">
            <summary>
            Get the CDATA
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SetData(System.String)">
            <summary>
            Set the CDATA
            </summary>
            <param name="cdata" />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SelectSingleElement(System.Type)">
            <summary>
            Find a Element by type
            </summary>
            <param name="type" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SelectSingleElement(System.Type,System.Boolean)">
            <summary>
            find a Element by type and loop thru all children
            </summary>
            <param name="type" />
            <param name="loopChildren" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element.SelectElements(System.String)">
            <summary>
            Returns all childNodes with the given Tagname,
            this function doesn't traverse the whole tree!!!
            </summary>
            <param name="TagName" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element._SelectElements(agsXMPP.Xml.Dom.Element,System.Type,agsXMPP.Xml.Dom.ElementList)">
            <summary>
            returns a nodelist of all found nodes of the given Type
            </summary>
            <param name="e" />
            <param name="type" />
            <param name="es" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element._SelectElement(agsXMPP.Xml.Dom.Node,System.String)">
            <summary>
            Select a single element.
            This function doesnt traverse the whole tree and checks only the underlying childnodes
            </summary>
            <param name="se" />
            <param name="tagname" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element._SelectElement(agsXMPP.Xml.Dom.Node,System.String,System.Boolean)">
            <summary>
            Select a single element
            </summary>
            <param name="se" />
            <param name="tagname" />
            <param name="traverseChildren">when set to true then the function traverses the whole tree</param>
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Element._SelectElement(agsXMPP.Xml.Dom.Node,System.String,System.String,System.Boolean)">
            <summary>
            Find Element by Namespace
            </summary>
            <param name="se" />
            <param name="tagname" />
            <param name="AttribName" />
            <param name="AttribValue" />
            <returns />
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.IsRootElement">
            <summary>
            Is this Element a Rootnode?
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.TagName">
            <summary>
            The Full Qualified Name
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.HasChildElements">
            <summary>
            returns whether the current element has child elements or not.
            cares only about element, not text nodes etc...
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.FirstChild">
            <summary>
            returns the first child element (no textNodes)
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.FirstNode">
            <summary>
            Returns the first ChildNode, doesnt matter of which type it is
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Dom.Element.LastNode">
            <summary>
            Returns the last ChildNode, doesnt matter of which type it is
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.Option">
            <summary>
            Field Option.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Option.GetValue">
            <summary>
            Value of the Option
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.data.Option.Label">
            <summary>
            Label of the option
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.bind.BindIq">
            <summary>
            Summary description for BindIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.IQ">
            <summary>
            Iq Stanza.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.Stanza">
            <summary>
            Base XMPP Element
            This must ne used to build all other new packets
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.DirectionalElement">
            <summary>
            Base XMPP Element
            This must ne used to build all other new packets
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.Base.DirectionalElement.SwitchDirection">
            <summary>
            Switches the from and to attributes when existing
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.Base.Stanza.GenerateId">
            <summary>
            Generates a automatic id for the packet.
            !!! Overwrites existing Ids
            </summary>
            <returns />
        </member>
        <member name="P:agsXMPP.protocol.Base.Stanza.Language">
            <summary>        
            XML Language attribute
            </summary>
            <remarks>
            The language 'xml:lang' attribute  SHOULD be included by the initiating entity on the header for the initial stream 
            to specify the default language of any human-readable XML character data it sends over that stream. 
            If the attribute is included, the receiving entity SHOULD remember that value as the default for both the 
            initial stream and the response stream; if the attribute is not included, the receiving entity SHOULD use 
            a configurable default value for both streams, which it MUST communicate in the header for the response stream. 
            For all stanzas sent over the initial stream, if the initiating entity does not include an 'xml:lang' attribute, 
            the receiving entity SHOULD apply the default value; if the initiating entity does include an 'xml:lang' attribute, 
            the receiving entity MUST NOT modify or delete it (see also xml:langxml:lang). 
            The value of the 'xml:lang' attribute MUST conform to the format defined in RFC 3066 (Tags for the Identification of Languages, January 2001.[LANGTAGS]).
            </remarks>
        </member>
        <member name="P:agsXMPP.protocol.client.IQ.Query">
            <summary>
            The query Element. Value can also be null which removes the Query tag when existing
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.IQ.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.IQ.Vcard">
            <summary>
            Get or Set the VCard if it is a Vcard IQ
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.IQ.Bind">
            <summary>
            Get or Set the Bind ELement if it is a BingIq
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.IQ.Session">
            <summary>
            Get or Set the Session Element if it is a SessionIq
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Auth">
            <summary>
            Summary description for Auth.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Address">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.iq.oob.OobIq">
            <summary>
            Summary description for OobIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.featureneg.FeatureNeg">
            <summary>
            JEP-0020: Feature Negotiation
            This JEP defines a A protocol that enables two Jabber entities to mutually negotiate feature options.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.featureneg.FeatureNeg.Data">
            <summary>
            data form of type "form" which defines the available options for one or more features.
            Each feature is represented as an x-data "field", which MUST be of type "list-single".
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.Default">
            <summary>
            The default list
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.List.GetItems">
            <summary>
            Gets all Rules (Items) when available
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.List.AddItem(agsXMPP.protocol.iq.privacy.Item)">
            <summary>
            Adds a rule (item) to the list
            </summary>
            <param name="itm" />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.List.RemoveAllItems">
            <summary>
            Remove all items/rules of this list
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.pubsub.SubscriptionState.none">
            <summary>
            The node MUST NOT send event notifications or payloads to the Entity.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.pubsub.SubscriptionState.pending">
            <summary>
            An entity has requested to subscribe to a node and the request has not yet been approved 
            by a node owner. The node MUST NOT send event notifications or payloads to the entity 
            while it is in this state.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.pubsub.SubscriptionState.unconfigured">
            <summary>
            An entity has subscribed but its subscription options have not yet been configured. 
            The node MAY send event notifications or payloads to the entity while it is in this state. 
            The service MAY timeout unconfigured subscriptions.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.pubsub.SubscriptionState.subscribed">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Options.Data">
            <summary>
            The X-Data Element/Form
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.event.Items.AddItem">
            <summary>
            Add a payload Item
            </summary>
            <returns>returns the added Item</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.event.Items.AddItem(agsXMPP.protocol.extensions.pubsub.event.Item)">
            <summary />
            <param name="item" />
            <returns>returns the added item</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.event.Items.GetItems">
            <summary>
            This will return all payload items. Multiple items are possible, but doe the most implementaions one item 
            should be enough
            </summary>
            <returns>returns an Array of Items</returns>
        </member>
        <member name="P:agsXMPP.protocol.extensions.commands.Actions.Execute">
            <summary>
            Optional Execute Action, only complete, next and previous is allowed
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.commands.Actions.Complete">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.extensions.commands.Actions.Action">
            <summary>
            Actions, only complete, prev and next are allowed here and can be combined
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Active">
            <summary>
            User is actively participating in the chat session.
            User accepts an initial content message, sends a content message, 
            gives focus to the chat interface, or is otherwise paying attention to the conversation.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.chatstates.Active.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.extensions.chatstates.Active" /> class.
            </summary>
        </member>
        <member name="T:agsXMPP.Net.PollClientSocket">
            <summary>
            JEP-0025 Jabber HTTP Polling Socket
            </summary>
        </member>
        <member name="T:agsXMPP.Net.BaseSocket">
            <summary>
            Base Socket class
            </summary>
        </member>
        <member name="M:agsXMPP.Net.BaseSocket.Reset">
            <summary>
            Added for Bosh because we have to tell the BoshClientSocket when to reset the stream
            </summary>
        </member>
        <member name="M:agsXMPP.Net.BaseSocket.Send(System.String)">
            <summary />
            <param name="data" />
        </member>
        <member name="M:agsXMPP.Net.BaseSocket.Send(System.Byte[])">
            <summary>
            Send data to the server.
            </summary>
        </member>
        <member name="F:agsXMPP.Net.PollClientSocket.m_Lock">
            <summary>
            Object for synchronizing threads
            </summary>
        </member>
        <member name="M:agsXMPP.Net.PollClientSocket.GenerateRandomKey">
            <summary>
            Simple algotithm for generating a random key
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.Net.PollClientSocket.GenerateKeys">
            <summary>
            Generates a bunch of keys
            </summary>
        </member>
        <member name="P:agsXMPP.Net.PollClientSocket.Connected">
            <summary>
            because the client socket is no presintant socket we return always true
            </summary>
        </member>
        <member name="P:agsXMPP.Net.PollClientSocket.Interval">
            <summary>
            Poll interval in milliseconds.	
            The maximum interval recommended for clients between requests is two minutes (120000);
            Default is 10 seconds (10000)
            </summary>
        </member>
        <member name="P:agsXMPP.Net.PollClientSocket.CountKeys">
            <summary>
            count of keys to generate each time. Keys are generated with the Sha1 algoritm.
            You can reduce the num,ber of keys to gemerate each time if your device is to slow on generating the keys
            or you want to save memory.
            256 is the default value, 32 on CF
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.si.SIIq">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.extensions.bytestreams.StreamHostUsed">
            <summary>
            The <streamhost-used /> element indicates the StreamHost connected to. 
            This element has a single attribute for the JID of the StreamHost to which the Target connected. 
            This element MUST NOT contain any content node.
            The "jid" attribute specifies the full JID of the StreamHost. 
            This attribute MUST be present, and MUST be a valid JID for use with an &lt;iq/&gt;.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.StreamHostUsed.Jid">
            <summary>
            Jid of the streamhost
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bytestreams.Mode">
            <summary>
            The Mode for the bytestream socket layer (tcp or udp)
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.Error">
            <summary>
            Summary description for Error.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.Error">
            <summary>
            Summary description for Error.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.client.Error.#ctor(agsXMPP.protocol.client.ErrorCondition)">
            <summary>
            Creates an error Element according the the condition
            The type attrib as added automatically as decribed in the XMPP specs
            This is the prefered way to create error Elements
            </summary>
            <param name="condition" />
        </member>
        <member name="P:agsXMPP.protocol.client.Error.Message">
            <summary>
            The error Description
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Error.ErrorText">
            <summary>
            The optional error text
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.component.Error.#ctor(agsXMPP.protocol.client.ErrorCondition)">
            <summary>
            Creates an error Element according the the condition
            The type attrib as added automatically as decribed in the XMPP specs
            This is the prefered way to create error Elements
            </summary>
            <param name="condition" />
        </member>
        <member name="T:agsXMPP.IO.Compression.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with a specified error message.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message string</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:agsXMPP.IO.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.PendingBuffer.buf">
            <summary>Internal work buffer
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufsize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            write a byte to buffer
            </summary>
            <param name="b">
            value to write
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="s">
            value to write
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="len">number of bytes to write</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            the output array;
            </param>
            <param name="offset">
            the offset into output array;
            </param>
            <param name="length">		
            length the maximum number of bytes to store;
            </param>
            <exception name="ArgumentOutOfRangeException">
            IndexOutOfBoundsException if offset or length are invalid.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            converted buffer contents contents
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of deflate and setInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.#ctor(agsXMPP.IO.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="lit" />
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="dist">Distance code</param>
            <param name="len">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflaterHuffman.Tree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterHuffman.Tree.freqs">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterHuffman.Tree.length">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterHuffman.Tree.minNumCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterHuffman.Tree.numCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.#ctor(agsXMPP.IO.Compression.DeflaterHuffman,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.WriteSymbol(System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that at least one frequency is non-zero
            </summary>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            No frequencies are non-zero
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="stCodes">new codes</param>
            <param name="stLength">length for new codes</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.BuildTree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.CalcBLFreq(agsXMPP.IO.Compression.DeflaterHuffman.Tree)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterHuffman.Tree.WriteTree(agsXMPP.IO.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:agsXMPP.Sasl.DigestMD5.Step2">
            <summary>
            Summary description for Step2.
            </summary>
        </member>
        <member name="T:agsXMPP.Sasl.DigestMD5.Step1">
            <summary>
            Summary description for Step1.
            </summary>
        </member>
        <member name="T:agsXMPP.Sasl.DigestMD5.Step1.ChallengeParseException">
            <summary>
            Exception occurs when we were unable to parse the challenge
            </summary>
        </member>
        <member name="M:agsXMPP.Sasl.DigestMD5.Step2.#ctor(agsXMPP.Sasl.DigestMD5.Step1,System.String,System.String,System.String)">
            <summary>
            builds a step2 message reply to the given step1 message
            </summary>
            <param name="step1" />
        </member>
        <member name="M:agsXMPP.Sasl.DigestMD5.Step2.SupportsAuth(System.String)">
            <summary>
            Does the server support Auth?
            </summary>
            <param name="qop" />
            <returns />
        </member>
        <member name="M:agsXMPP.Sasl.DigestMD5.Step2.#ctor(System.String)">
            <summary>
            parses a message and returns the step2 object
            </summary>
            <param name="message" />
        </member>
        <member name="M:agsXMPP.Sasl.DigestMD5.Step2.AddQuotes(System.String)">
            <summary>
            return the given string with quotes
            </summary>
            <param name="s" />
            <returns />
        </member>
        <member name="T:agsXMPP.protocol.iq.roster.RosterManager">
            <summary>
            Helper class that makes it easier to manage your contact list.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.#ctor(agsXMPP.XmppClientConnection)">
            <summary>
            Constructor
            </summary>
            <param name="con">The XmppClientConnection on which the RosterManager should send the packets</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.AddRosterItem(agsXMPP.Jid)">
            <summary>
            Add a contact to the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.AddRosterItem(agsXMPP.Jid,System.String)">
            <summary>
            Add a contact to the Roster
            </summary>
            <param name="jid">The BARE jid of the contact that should be added.</param>
            <param name="nickname">Nickname for the new contact.</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.AddRosterItem(agsXMPP.Jid,System.String,System.String)">
            <summary>
            Add a contact to the Roster
            </summary>
            <param name="jid">The BARE jid of the contact that should be added.</param>
            <param name="nickname">Nickname for the new contact.</param>
            <param name="group">The group to which the contact should be added.</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.AddRosterItem(agsXMPP.Jid,System.String,System.String[])">
            <summary>
            Add a contact to the Roster.
            </summary>
            <param name="jid">The BARE jid of the contact that should be added.</param>
            <param name="nickname">Nickname for the contact.</param>
            <param name="group">An Array of groups when you want to add the contact to multiple groups.</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.UpdateRosterItem(agsXMPP.Jid)">
            <summary>
            Update a contact
            </summary>
            <param name="jid" />
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.UpdateRosterItem(agsXMPP.Jid,System.String)">
            <summary>
            Update a contact
            </summary>
            <param name="jid">The BARE jid of the contact that should be updated.</param>
            <param name="nickname">Nickname for the contact to update.</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.UpdateRosterItem(agsXMPP.Jid,System.String,System.String)">
            <summary>
            Update a contact
            </summary>
            <param name="jid" />
            <param name="nickname" />
            <param name="group" />
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.UpdateRosterItem(agsXMPP.Jid,System.String,System.String[])">
            <summary>
            Update a contact.
            </summary>
            <param name="jid">The BARE jid of the contact that should be updated.</param>
            <param name="nickname">Nickname for the contact to update.</param>
            <param name="group">An Array of groups when you want to add the contact to multiple groups.</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.roster.RosterManager.RemoveRosterItem(agsXMPP.Jid)">
            <summary>
            Removes a contact from the Roster
            </summary>
            <param name="jid">The BARE jid of the rosteritem that should be removed</param>
        </member>
        <member name="T:agsXMPP.protocol.tls.Proceed">
            <summary>
            Summary description for Proceed.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.Event">
            <summary>
            JEP-0022: Message Events
            This JEP defines protocol extensions used to request and respond to events relating to the delivery, display, and composition of messages.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Event.Offline">
            <summary>
            Indicates that the message has been stored offline by the intended recipient's server.
            This event is triggered only if the intended recipient's server supports offline storage, 
            has that support enabled, and the recipient is offline when the server receives the message for delivery.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Event.Delivered">
            <summary>
            Indicates that the message has been delivered to the recipient. 
            This signifies that the message has reached the recipient's Jabber client, 
            but does not necessarily mean that the message has been displayed. 
            This event is to be raised by the Jabber client.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Event.Displayed">
            <summary>
            Once the message has been received by the recipient's Jabber client, 
            it may be displayed to the user. 
            This event indicates that the message has been displayed, and is to be raised by the Jabber client.
            Even if a message is displayed multiple times, this event should be raised only once.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Event.Composing">
            <summary>
            In threaded chat conversations, this indicates that the recipient is composing a reply to a message.
            The event is to be raised by the recipient's Jabber client. 
            A Jabber client is allowed to raise this event multiple times in response to the same request, 
            providing the original event is cancelled first.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Event.Id">
            <summary>
            'id' attribute of the original message to which this event notification pertains.
            (If no 'id' attribute was included in the original message, then the id tag must still be included with no 
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.Item">
            <summary>
            This class represents a rule which is used for blocking communication
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Item.#ctor">
            <summary>
            Default Contructor
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Item.#ctor(agsXMPP.protocol.iq.privacy.Action,System.Int32)">
            <summary />
            <param name="action" />
            <param name="order" />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Item.#ctor(agsXMPP.protocol.iq.privacy.Action,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary />
            <param name="action" />
            <param name="order" />
            <param name="block" />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Item.#ctor(agsXMPP.protocol.iq.privacy.Action,System.Int32,agsXMPP.protocol.iq.privacy.Type,System.String)">
            <summary />
            <param name="action" />
            <param name="order" />
            <param name="type" />
            <param name="value" />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Item.#ctor(agsXMPP.protocol.iq.privacy.Action,System.Int32,agsXMPP.protocol.iq.privacy.Type,System.String,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary />
            <param name="action" />
            <param name="order" />
            <param name="type" />
            <param name="value" />
            <param name="block" />
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.Order">
            <summary>
            The order of this rule
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.Val">
            <summary>
            The value to match of this rule
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.BlockIq">
            <summary>
            Block Iq stanzas
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.BlockMessage">
            <summary>
            Block messages
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.BlockIncomingPresence">
            <summary>
            Block incoming presence
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.BlockOutgoingPresence">
            <summary>
            Block outgoing presence
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Item.Stanza">
            <summary>
            which stanzas should be blocked?
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.owner.Configure.Data">
            <summary>
            The x-Data Element
            </summary>
        </member>
        <member name="T:agsXMPP.PacketGrabber">
            <summary>
            Summary description for Grabber.
            </summary>
        </member>
        <member name="M:agsXMPP.PacketGrabber.Remove(System.String)">
            <summary>
            Pending request can be removed.
            This is useful when a ressource for the callback is destroyed and
            we are not interested anymore at the result.
            </summary>
            <param name="id">ID of the Iq we are not interested anymore</param>
        </member>
        <member name="M:agsXMPP.PresenceGrabber.#ctor(agsXMPP.XmppClientConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.PresenceGrabber" /> class.
            </summary>
            <param name="conn">The conn.</param>
        </member>
        <member name="M:agsXMPP.PresenceGrabber.Add(agsXMPP.Jid,System.Collections.IComparer,agsXMPP.PresenceCB,System.Object)">
            <summary>
            Adds the specified jid.
            </summary>
            <param name="jid">The jid.</param>
            <param name="comparer">The comparer.</param>
            <param name="cb">The callback.</param>
            <param name="cbArg">The callback Arguments.</param>
        </member>
        <member name="M:agsXMPP.PresenceGrabber.Remove(agsXMPP.Jid)">
            <summary>
            Pending request can be removed.
            This is useful when a ressource for the callback is destroyed and
            we are not interested anymore at the result.
            </summary>
            <param name="id">ID of the Iq we are not interested anymore</param>
        </member>
        <member name="M:agsXMPP.PresenceGrabber.m_connection_OnPresence(System.Object,agsXMPP.protocol.client.Presence)">
            <summary>
            A presence is received. Now check if its from a Jid we are looking for and
            raise the event in this case.
            </summary>
            <param name="sender" />
            <param name="pres" />
        </member>
        <member name="T:agsXMPP.Net.Dns.Question">
            <summary>
            Represents a DNS Question, comprising of a domain to query, the type of query (QTYPE) and the class
            of query (QCLASS). This class is an encapsulation of these three things, and extensive argument checking
            in the constructor as this may well be created outside the assembly (public protection)
            </summary>
        </member>
        <member name="M:agsXMPP.Net.Dns.Question.#ctor(System.String,agsXMPP.Net.Dns.DnsType,agsXMPP.Net.Dns.DnsClass)">
            <summary>
            Construct the question from parameters, checking for safety
            </summary>
            <param name="domain">the domain name to query eg. bigdevelopments.co.uk</param>
            <param name="dnsType">the QTYPE of query eg. DnsType.MX</param>
            <param name="dnsClass">the CLASS of query, invariably DnsClass.IN</param>
        </member>
        <member name="M:agsXMPP.Net.Dns.Question.#ctor(agsXMPP.Net.Dns.Pointer)">
            <summary>
            Construct the question reading from a DNS Server response. Consult RFC1035 4.1.2
            for byte-wise details of this structure in byte array form
            </summary>
            <param name="pointer">a logical pointer to the Question in byte array form</param>
        </member>
        <member name="T:agsXMPP.Net.Dns.Pointer">
            <summary>
            Logical representation of a pointer, but in fact a byte array reference and a position in it. This
            is used to read logical units (bytes, shorts, integers, domain names etc.) from a byte array, keeping
            the pointer updated and pointing to the next record. This type of Pointer can be considered the logical
            equivalent of an (unsigned char*) in C++
            </summary>
        </member>
        <member name="M:agsXMPP.Net.Dns.Pointer.Copy">
            <summary>
            Shallow copy function
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.Net.Dns.Pointer.SetPosition(System.Int32)">
            <summary>
            Adjust the pointers position within the message
            </summary>
            <param name="position">new position in the message</param>
        </member>
        <member name="M:agsXMPP.Net.Dns.Pointer.op_Addition(agsXMPP.Net.Dns.Pointer,System.Int32)">
            <summary>
            Overloads the + operator to allow advancing the pointer by so many bytes
            </summary>
            <param name="pointer">the initial pointer</param>
            <param name="offset">the offset to add to the pointer in bytes</param>
            <returns>a reference to a new pointer moved forward by offset bytes</returns>
        </member>
        <member name="M:agsXMPP.Net.Dns.Pointer.Peek">
            <summary>
            Reads a single byte at the current pointer, does not advance pointer
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="M:agsXMPP.Net.Dns.Pointer.ReadByte">
            <summary>
            Reads a single byte at the current pointer, advancing pointer
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="M:agsXMPP.Net.Dns.Pointer.ReadShort">
            <summary>
            Reads two bytes to form a short at the current pointer, advancing pointer
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="M:agsXMPP.Net.Dns.Pointer.ReadInt">
            <summary>
            Reads four bytes to form a int at the current pointer, advancing pointer
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="M:agsXMPP.Net.Dns.Pointer.ReadChar">
            <summary>
            Reads a single byte as a char at the current pointer, advancing pointer
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="M:agsXMPP.Net.Dns.Pointer.ReadDomain">
            <summary>
            Reads a domain name from the byte array. The method by which this works is described
            in RFC1035 - 4.1.4. Essentially to minimise the size of the message, if part of a domain
            name already been seen in the message, rather than repeating it, a pointer to the existing
            definition is used. Each word in a domain name is a label, and is preceded by its length
            
            eg. bigdevelopments.co.uk
            
            is [15] (size of bigdevelopments) + "bigdevelopments"
               [2]  "co"
               [2]  "uk"
               [1]  0 (NULL)
            </summary>
            <returns>the byte at the pointer</returns>
        </member>
        <member name="T:agsXMPP.IO.Compression.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name="bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name="buf">
            the buffer which contains the data
            </param>
            <param name="off">
            the offset in the buffer where the data starts
            </param>
            <param name="len">
            the length of the data
            </param>
        </member>
        <member name="P:agsXMPP.IO.Compression.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Dom.DomLoader">
            <summary>
            internal class that loads a xml document from a string or stream
            </summary>
        </member>
        <member name="T:agsXMPP.Sasl.SaslHandler">
            <summary>
            Summary description for SaslHandler.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.roster.Delimiter">
            <summary>
            Extension JEP-0083, delimiter for nested roster groups
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.avatar.Avatar">
            <summary>
            Summary description for Avatar.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.Avatar">
            <summary>
            Summary description for Avatar.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.si.SI">
            <summary>
            JEP-0095: Stream Initiation.
            This JEP defines a protocol for initiating a stream (with meta information) between any two Jabber entities.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.si.SI.Id">
            <summary>
            The "id" attribute is an opaque identifier. 
            This attribute MUST be present on type='set', and MUST be a valid string. 
            This SHOULD NOT be sent back on type='result', since the &lt;iq/&gt; "id" attribute provides the only context needed.
            This value is generated by the Sender, and the same value MUST be used throughout a session when talking to the Receiver.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.si.SI.MimeType">
            <summary>
            The "mime-type" attribute identifies the MIME-type for the data across the stream.
            This attribute MUST be a valid MIME-type as registered with the Internet Assigned Numbers Authority (IANA) [3] 
            (specifically, as listed at "http://www.iana.org/assignments/media-types"). 
            During negotiation, this attribute SHOULD be present, and is otherwise not required. 
            If not included during negotiation, its value is assumed to be "binary/octect-stream".
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.si.SI.Profile">
            <summary>
            The "profile" attribute defines the SI profile in use. This value MUST be present during negotiation,
            and is the namespace of the profile to use.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.si.SI.FeatureNeg">
            <summary>
            the FeatureNeg Element 
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.si.SI.File">
            <summary>
            the File Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.rpc.MethodCall">
            <summary>
            The methodCall element.     
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodCall.#ctor">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodCall.#ctor(System.String,System.Collections.ArrayList)">
            <summary />
            <param name="methodName" />
            <param name="Params" />
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodCall.WriteCall(System.String,System.Collections.ArrayList)">
            <summary>
            Write the functions call with params to this Element
            </summary>
            <param name="name" />
            <param name="Params" />
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodCall.WriteValue(System.Object,agsXMPP.Xml.Dom.Element)">
            <summary>
            Writes a single value to a call
            </summary>
            <param name="param" />
            <param name="parent" />
        </member>
        <member name="P:agsXMPP.protocol.iq.rpc.MethodCall.MethodName">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.Stanza">
            <summary>
            enum for block or allow communications.
            This flags could be combined under the following conditions.
            </summary>
            <remarks>
                <list type="bullet">
                    <item>All must stand alone, its not allowed to combine thsi flag</item>
                    <item>Message, Iq, IncomingPresence and Outgoing Presence could be combined, 
                    <b>but</b> its not allowed to combine more than 3 of this flag.
                    If you need all of them you have to use the All flag</item>
                </list>
            </remarks>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Stanza.All">
            <summary>
            Block all stanzas
            !!! Don't combine this flag with others!!!
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Stanza.Message">
            <summary>
            Block messages
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Stanza.Iq">
            <summary>
            Block IQs
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Stanza.IncomingPresence">
            <summary>
            Block Incoming Presences
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Stanza.OutgoingPresence">
            <summary>
            Block Outgoing Presences
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.geoloc.GeoLocIq">
            <summary>
            a GeoLoc InfoQuery
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.RosterItem">
            <summary>
            Item is used in jabber:iq:roster, x roster
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.Item">
            <summary>
            Summary description for Item.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.Base.RosterItem.GetGroups">
            <summary>
            Groups a roster Item is assigned to
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.Base.RosterItem.AddGroup(System.String)">
            <summary>
            Add a new group to the Rosteritem
            </summary>
            <param name="groupname" />
        </member>
        <member name="T:agsXMPP.protocol.extensions.bookmarks.Conference">
            <summary>
            One of the most common uses of bookmarks will likely be to bookmark 
            conference rooms on various Jabber servers
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Conference.Name">
            <summary>
            A name/description for this bookmarked room
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Conference.AutoJoin">
            <summary>
            Should the client join this room automatically after successfuil login?
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Conference.Jid">
            <summary>
            The Jid of the bookmarked room
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Conference.Nickname">
            <summary>
            The Nickname for this room
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Conference.Password">
            <summary>
            The password for password protected rooms
            </summary>
        </member>
        <member name="T:agsXMPP.Sasl.Gssapi.GssapiMechanism">
            <summary>
            Handels the SASL Digest MD5 authentication
            </summary>
        </member>
        <member name="M:agsXMPP.Sasl.Gssapi.GssapiMechanism.GetNtDomain">
            <summary>
            returns the NT domain, tis is used for building the kerberos principal when none is provided.
            </summary>
            <returns />
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Item">
            <summary>
            Summary description for Item.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.Item.#ctor">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation)">
            <summary />
            <param name="affiliation" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.Item.#ctor(agsXMPP.protocol.x.muc.Role)">
            <summary />
            <param name="role" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role)">
            <summary />
            <param name="affiliation" />
            <param name="role" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role,System.String)">
            <summary />
            <param name="affiliation" />
            <param name="role" />
            <param name="reason" />
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Item.Role">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Item.Affiliation">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Item.Nickname">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Item.Reason">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.x.muc.iq.owner.OwnerIq">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Invite">
            <summary>
            Invite other users t a chatroom
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Invitation">
            <summary>
            A base class vor Decline and Invite
            We need From, To and SwitchDirection here. This is why we inherit from XmppPacket Base
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Invitation.Reason">
            <summary>
            A reason why you want to invite this contact
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Invite.Nickname">
            <summary>
            Nickname Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.XDataFormType">
            <summary>
            Form Types
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.XDataFormType.form">
            <summary>
            The forms-processing entity is asking the forms-submitting entity to complete a form.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.XDataFormType.submit">
            <summary>
            The forms-submitting entity is submitting data to the forms-processing entity.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.XDataFormType.cancel">
            <summary>
            The forms-submitting entity has cancelled submission of data to the forms-processing entity.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.XDataFormType.result">
            <summary>
            The forms-processing entity is returning data (e.g., search results) to the forms-submitting entity, or the data is a generic data set.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.Data">
            <summary>
            Summary for Data.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.FieldContainer">
            <summary>
            Bass class for all xdata classes that contain xData fields
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.data.FieldContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.x.data.FieldContainer" /> class.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.data.FieldContainer.AddField">
            <summary />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.x.data.FieldContainer.AddField(agsXMPP.protocol.x.data.Field)">
            <summary />
            <param name="field" />
        </member>
        <member name="M:agsXMPP.protocol.x.data.FieldContainer.GetField(System.String)">
            <summary>
            Retrieve a field with the given "var"
            </summary>
            <param name="var" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.x.data.FieldContainer.GetFields">
            <summary>
            Gets a list of all form fields
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Data.AddItem">
            <summary />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Data.AddItem(agsXMPP.protocol.x.data.Item)">
            <summary />
            <param name="item" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Data.GetItems">
            <summary>
            Gets a list of all form fields
            </summary>
            <returns />
        </member>
        <member name="P:agsXMPP.protocol.x.data.Data.Type">
            <summary>
            Type of thie XDATA Form.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Failure">
            <summary>
            Summary description for Failure.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Challenge">
            <summary>
            Summary description for Challenge.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Telephone">
            <summary>
            Zusammenfassung für Telephone.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.search.Search">
            <summary>
            http://www.jabber.org/jeps/jep-0055.html
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.search.Search.GetItems">
            <summary>
            Retrieve the result items of a search
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.search.Search.Data">
            <summary>
            The X-Data Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.roster.RosterItem">
            <summary>
            Item is used in jabber:iq:roster, jabber:iq:search
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.featureneg.FeatureNegIq">
            <summary>
            JEP-0020: Feature Negotiation
            This JEP defines a A protocol that enables two Jabber entities to mutually negotiate feature options.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.rpc.MethodResponse">
            <summary>
            The method Response element. 
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodResponse.GetResponse">
            <summary>
            Parses the XML-RPC resonse and returns an ArrayList with all Parameters.
            In there is an XML-RPC Error it returns an XmlRpcException as single parameter in the ArrayList.
            </summary>
            <returns>Arraylist with parameters, or Arraylist with an exception</returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodResponse.ParseResponse">
            <summary>
            parse the response
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodResponse.ParseValue(agsXMPP.Xml.Dom.Element)">
            <summary>
            Parse a single response value
            </summary>
            <param name="value" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodResponse.ParseArray(agsXMPP.Xml.Dom.Element)">
            <summary>
            parse a response array
            </summary>
            <param name="elArray" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.rpc.MethodResponse.ParseStruct(agsXMPP.Xml.Dom.Element)">
            <summary>
            parse a response struct
            </summary>
            <param name="el" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Privacy.AddList(agsXMPP.protocol.iq.privacy.List)">
            <summary>
            Add a provacy list
            </summary>
            <param name="list" />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.Privacy.GetList">
            <summary>
            Get all Lists
            </summary>
            <returns>Array of all privacy lists</returns>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Privacy.Active">
            <summary>
            The active list
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.privacy.Privacy.Default">
            <summary>
            The default list
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Affiliates.AddAffiliate">
            <summary />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Affiliates.AddAffiliate(agsXMPP.protocol.extensions.pubsub.owner.Affiliate)">
            <summary />
            <param name="affiliate" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Affiliates.AddAffiliates(agsXMPP.protocol.extensions.pubsub.owner.Affiliate[])">
            <summary />
            <param name="affiliates" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Affiliates.GetAffiliates">
            <summary />
            <returns />
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Chatstate">
            <summary>
            Enumeration of supported Chatstates (JEP-0085)
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.None">
            <summary>
            No Chatstate at all
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.active">
            <summary>
            Active Chatstate
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.inactive">
            <summary>
            Inactive Chatstate
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.composing">
            <summary>
            Composing Chatstate
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.gone">
            <summary>
            Gone Chatstate
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.chatstates.Chatstate.paused">
            <summary>
            Paused Chatstate
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.SRVRecord">
            <summary>
            Summary description for SRVRecord.
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.RecordBase">
            <summary>
            A simple base class for the different ResourceRecords, ANAME, MX, SOA, NS etc.
            </summary>
        </member>
        <member name="M:agsXMPP.Net.Dns.SRVRecord.#ctor(agsXMPP.Net.Dns.Pointer)">
            <summary>
            Constructs a NS record by reading bytes from a return message
            </summary>
            <param name="pointer">A logical pointer to the bytes holding the record</param>
        </member>
        <member name="M:agsXMPP.Net.Dns.SRVRecord.CompareTo(System.Object)">
            <summary>
            Implements the IComparable interface so that we can sort the SRV records by their
            lowest priority
            </summary>
            <param name="other">the other SRVRecord to compare against</param>
            <returns>1, 0, -1</returns>
        </member>
        <member name="T:agsXMPP.protocol.iq.browse.Service">
            <summary>
            Historically each category was used as the name of an element, 
            and the type was an attribute, such as &lt;service type="aim"/&gt;. 
            The proper expression for all new implementations supporting this specification is to express the type information 
            as attributes on a generic item element: &lt;item category="service" type="aim"/&gt;. 
            When processing returned browse information this new syntax should always be handled first, 
            and the old syntax only used if it is important to be able to access older implementations.
            Additional unofficial categories or types may be specified by prefixing their name with 
            an "x-", such as "service/x-virgeim" or "x-location/gps". 
            Changes to the official categories and subtypes may be defined either by revising this JEP or by activating another JEP.
            Removal of a category or subtype must be noted in this document.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.browse.Service.GetNamespaces">
            <summary>
            Gets all advertised namespaces of this service
            </summary>
            <returns>string array that contains the advertised namespaces</returns>
        </member>
        <member name="M:agsXMPP.protocol.iq.browse.Service.GetServices">
            <summary>
            Gets all "ChilsServices" od this service
            </summary>
            <returns />
        </member>
        <member name="T:agsXMPP.protocol.extensions.ibb.Base">
            <summary>
            IBB base class
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.ibb.Base.Sid">
            <summary>
            Sid
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.amp.Rule.Val">
            <summary>
            The 'value' attribute defines how the condition is matched. 
            This attribute MUST be present, and MUST NOT be an empty string (""). 
            The interpretation of this attribute's value is determined by the 'condition' attribute.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.amp.Rule.Action">
            <summary>
            The 'action' attribute defines the result for this rule. 
            This attribute MUST be present, and MUST be either a value defined in the Defined Actions section, 
            or one registered with the XMPP Registrar.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.amp.Rule.Condition">
            <summary>
            The 'condition' attribute defines the overall condition this rule applies to. 
            This attribute MUST be present, and MUST be either a value defined in the Defined Conditions section, 
            or one registered with the XMPP Registrar.
            </summary>
        </member>
        <member name="T:agsXMPP.Jid">
            <summary>
            Class for building and handling XMPP Id's (JID's)
            </summary>
        </member>
        <member name="M:agsXMPP.Jid.#ctor(System.String)">
            <summary>
            Create a new JID object from a string. The input string must be a valid jabberId and already prepared with stringprep.
            Otherwise use one of the other constructors with escapes the node and prepares the gives balues with the stringprep
            profiles
            </summary>
            <param name="jid">XMPP ID, in string form examples: user@server/Resource, user@server</param>
        </member>
        <member name="M:agsXMPP.Jid.#ctor(System.String,System.String,System.String)">
            <summary>
            builds a new Jid object
            </summary>
            <param name="user">XMPP User part</param>
            <param name="server">XMPP Domain part</param>
            <param name="resource">XMPP Resource part</param>
        </member>
        <member name="M:agsXMPP.Jid.Parse(System.String)">
            <summary>
            Parses a JabberId from a string. If we parse a jid we assume it's correct and already prepared via stringprep.
            </summary>
            <param name="fullJid">jis to parse as string</param>
            <returns>true if the jid could be parsed, false if an error occured</returns>
        </member>
        <member name="M:agsXMPP.Jid.Equals(System.Object)">
            <summary>
            This compares the full Jid by default
            </summary>
            <param name="obj" />
            <returns />
        </member>
        <member name="M:agsXMPP.Jid.EscapeNode(System.String)">
            <summary>
                <para>
            Escape a node according to XEP-0106
            </para>
                <para>
                    <a href="http://www.xmpp.org/extensions/xep-0106.html">http://www.xmpp.org/extensions/xep-0106.html</a>
                </para>
            </summary>
            <param name="node" />
            <returns />
        </member>
        <member name="M:agsXMPP.Jid.UnescapeNode(System.String)">
            <summary>
                <para>
            unescape a node according to XEP-0106
            </para>
                <para>
                    <a href="http://www.xmpp.org/extensions/xep-0106.html">http://www.xmpp.org/extensions/xep-0106.html</a>
                </para>
            </summary>
            <param name="node" />
            <returns />
        </member>
        <member name="P:agsXMPP.Jid.User">
            <summary>
            the user part of the JabberId.
            </summary>
        </member>
        <member name="P:agsXMPP.Jid.Server">
            <summary>
            Only Server
            </summary>
        </member>
        <member name="P:agsXMPP.Jid.Resource">
            <summary>
            Only the Resource field.
            null for none
            </summary>
        </member>
        <member name="P:agsXMPP.Jid.Bare">
            <summary>
            The Bare Jid only (user@server).
            </summary>
        </member>
        <member name="T:agsXMPP.Factory.ElementFactory">
            <summary>
            Factory class that implements the factory pattern for builing our Elements.
            </summary>
        </member>
        <member name="F:agsXMPP.Factory.ElementFactory.m_table">
            <summary>
            This Hashtable stores Mapping of protocol (tag/namespace) to the agsXMPP objects
            </summary>
        </member>
        <member name="M:agsXMPP.Factory.ElementFactory.AddElementType(System.String,System.String,System.Type)">
            <summary>
            Adds new Element Types to the Hashtable
            Use this function also to register your own created Elements.
            If a element is already registered it gets overwritten. This behaviour is also useful if you you want to overwrite
            classes and add your own derived classes to the factory.
            </summary>
            <param name="tag">FQN</param>
            <param name="ns" />
            <param name="t" />
        </member>
        <member name="M:agsXMPP.Factory.ElementFactory.GetElement(System.String,System.String,System.String)">
            <summary />
            <param name="prefix" />
            <param name="tag" />
            <param name="ns" />
            <returns />
        </member>
        <member name="T:agsXMPP.IO.Compression.Streams.StreamManipulator">
            <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next n bits but don't increase input pointer.  n must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to PeekBits followed by dropBits, except for correct error handling.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies length bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.Reset">
            <summary>
            resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buf">data to be input</param>
            <param name="off">offset of first byte of input</param>
            <param name="len">length of input</param>
        </member>
        <member name="P:agsXMPP.IO.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.TokenException">
            <summary>
            Base class for other exceptions
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.EmptyTokenException">
            <summary>
            An empty token was detected.  This only happens with a buffer of length 0 is passed in
            to the parser.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.EndOfPrologException">
            <summary>
            End of prolog.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.ExtensibleTokenException">
            Thrown to indicate that the byte subarray being tokenized is a legal XML
            token, but that subsequent bytes in the same entity could be part of
            the token.  For example, <code>Encoding.tokenizeProlog</code>
            would throw this if the byte subarray consists of a legal XML name.
            @version $Revision: 1.3 $ $Date: 1998/02/17 04:24:06 $
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.ExtensibleTokenException.#ctor(agsXMPP.Xml.Xpnet.TOK)">
            <summary />
            <param name="tokType" />
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.ExtensibleTokenException.TokenType">
            Returns the type of token in the byte subarrary.
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.InvalidTokenException">
            <summary>
            Several kinds of token problems.
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.InvalidTokenException.ILLEGAL_CHAR">
            <summary>
            An illegal character
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.InvalidTokenException.XML_TARGET">
            <summary>
            Doc prefix wasn't XML
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.InvalidTokenException.DUPLICATE_ATTRIBUTE">
            <summary>
            More than one attribute with the same name on the same element
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.InvalidTokenException.#ctor(System.Int32,System.Byte)">
            <summary>
            Some other type of bad token detected
            </summary>
            <param name="offset" />
            <param name="type" />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.InvalidTokenException.#ctor(System.Int32)">
            <summary>
            Illegal character detected
            </summary>
            <param name="offset" />
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.InvalidTokenException.Offset">
            <summary>
            Offset into the buffer where the problem ocurred.
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.InvalidTokenException.Type">
            <summary>
            Type of exception
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.PartialCharException">
            Thrown to indicate that the subarray being tokenized is not the
            complete encoding of one or more characters, but might be if
            more bytes were added.
            @version $Revision: 1.2 $ $Date: 1998/02/17 04:24:11 $
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.PartialTokenException">
            <summary>
            A partial token was received.  Try again, after you add more bytes to the buffer.
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.PartialCharException.#ctor(System.Int32)">
            <summary />
            <param name="leadByteIndex" />
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.PartialCharException.LeadByteIndex">
            Returns the index of the first byte that is not part of the complete
            encoding of a character.
        </member>
        <member name="T:agsXMPP.Xml.StreamParser">
            <summary>
            Stream Parser is a lighweight Streaming XML Parser.
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.StreamParser.Reset">
            <summary>
            Reset the XML Stream
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.StreamParser.Push(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put bytes into the parser.
            </summary>
            <param name="buf">The bytes to put into the parse stream</param>
            <param name="offset">Offset into buf to start at</param>
            <param name="length">Number of bytes to write</param>
        </member>
        <member name="M:agsXMPP.Xml.StreamParser.DoRaiseOnStreamElement(agsXMPP.Xml.Dom.Element)">
            <summary>
            If users didnt use the library correctly and had no local error handles
            it always crashed here and disconencted the socket.
            Catch this errors here now and foreward them.
            </summary>
            <param name="el" />
        </member>
        <member name="E:agsXMPP.Xml.StreamParser.OnStreamError">
            <summary>
            Event for XML-Stream errors
            </summary>
        </member>
        <member name="E:agsXMPP.Xml.StreamParser.OnError">
            <summary>
            Event for general errors
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.StreamParser.Depth">
            <summary>
            Reset the XML Stream
            </summary>
            <param name="sr">new Stream that is used for parsing</param>
        </member>
        <member name="P:agsXMPP.Sasl.SaslEventArgs.Auto">
            <summary>
            Set Auto to true if the library should choose the mechanism
            Set it to false for choosing the authentication method yourself
            </summary>
        </member>
        <member name="P:agsXMPP.Sasl.SaslEventArgs.Mechanism">
            <summary>
            SASL Mechanism for authentication as string
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Email">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Email.#ctor(agsXMPP.protocol.iq.vcard.EmailType,System.String,System.Boolean)">
            <summary />
            <param name="type">Type of the new Email Adress</param>
            <param name="address">Email Adress</param>
            <param name="prefered">Is this adressed prefered</param>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Email.IsPrefered">
            <summary>
            Is this the prefered contact adress?
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Email.UserId">
            <summary>
            The email Adress
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoIdentity">
            <summary>
            Summary description for DiscoIdentity.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoIdentity.Type">
            <summary>
            type name for the entity
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoIdentity.Name">
            <summary>
            natural-language name for the entity
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoIdentity.Category">
            <summary>
            category name for the entity
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.jivesoftware.phone.PhoneStatus">
            <summary>
            A user's presence is updated when on a phone call.
            The Jive Messenger/Asterisk implementation will update the user's presence automatically 
            by adding the following packet extension to the user's presence:
            &lt;phone-status xmlns="http://jivesoftware.com/xmlns/phone" status="ON_PHONE" &gt; 
            Jive Messenger can also be configured to change the user's availability
            to "Away -- on the phone" when the user is on a call (in addition to the packet extension).
            This is useful when interacting with clients that don't understand the extended presence information
            or when using transports to other IM networks where extended presence information is not available.        
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.jivesoftware.phone.ActionType">
            <summary>
            Action type, Currently supported types are DIAL and FORWARD
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.extensions.jivesoftware.phone.ActionType.DIAL">
            <summary />
        </member>
        <member name="F:agsXMPP.protocol.extensions.jivesoftware.phone.ActionType.FORWARD">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.extensions.jivesoftware.phone.PhoneAction.#ctor">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.PrivacyIq">
            <summary>
            Summary description for PrivateIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.Handshake">
            <summary>
            Handshake Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Handshake.Digest">
            <summary>
            Digest (Hash) for authentication
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.Message">
            <summary>
            This class represents a XMPP message.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.client.Message.CreateNewThread">
            <summary>
            Create a new unique Thread indendifier
            </summary>
            <returns />
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Body">
            <summary>
            The body of the message. This contains the message text.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Subject">
            <summary>
            subject of this message. Its like a subject in a email. The Subject is optional.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Thread">
            <summary>
            messages and conversations could be threaded. You can compare this with threads in newsgroups or forums.
            Threads are optional.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Type">
            <summary>
            message type (chat, groupchat, normal, headline or error).
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Html">
            <summary>
            The html part of the message if you want to support the html-im Jep. This part of the message is optional.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.XEvent">
            <summary>
            The event Element for JEP-0022 Message events
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.XDelay">
            <summary>
            The event Element for JEP-0022 Message events
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Headers">
            <summary>
            Stanza Headers and Internet Metadata
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Message.Nickname">
            <summary>
            Nickname Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.Stream">
            <summary>
            Summary description for Stream.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.Base.Stream.StreamId">
            <summary>
            The StreamID of the current JabberSession.
            Returns null when none available.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.Base.Stream.Version">
            <summary>
            See XMPP-Core 4.4.1 "Version Support"
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.html.Body">
            <summary>
            The Body Element of a XHTML message
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.html.Body.InnerHtml">
            <summary />
        </member>
        <member name="T:agsXMPP.IO.Compression.Inflater">
            <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>setInput()</code>, then inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul><li>needsInput() returns true because the input buffer is empty.
             You have to provide more input with <code>setInput()</code>.
             NOTE: needsInput() also returns true when, the stream is finished.
             </li><li>needsDictionary() returns true, you have to provide a preset
                dictionary with <code>setDictionary()</code>.</li><li>finished() returns true, the inflater has finished.</li></ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="offset">
            The offset into buffer where the dictionary starts.
            </param>
            <param name="len">
            The length of the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:agsXMPP.IO.Compression.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buf">
            the input.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="offset">
            The offset into buffer where the input starts.
            </param>
            <param name="length">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The off and/or len are wrong.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buf has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <param name="offset">
            the offset into buffer where the output should start.
            </param>
            <param name="len">
            the maximum length of the output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if len is &lt;= 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the offset and/or len are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:agsXMPP.IO.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:agsXMPP.IO.Compression.Deflater">
            <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="lvl">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="off">
            the start of the data.
            </param>
            <param name="len">
            the length of the data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended() or if previous input is still pending.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="lvl">
            the new compression level.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetStrategy(agsXMPP.IO.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            setLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If end() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset and/or length don't match the array length.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dict">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dict">
            The dictionary data
            </param>
            <param name="offset">
            An offset into the dictionary.
            </param>
            <param name="length">
            The length of the dictionary data to use
            </param>
            <exception cref="T:System.InvalidOperationException">
            If setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="P:agsXMPP.IO.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:agsXMPP.XmppConnectionState">
            <summary>
            Represents the current state of a XMPPConnection
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Disconnected">
            <summary>
            Session is Disconnected
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Connecting">
            <summary>
            The Socket is Connecting
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Connected">
            <summary>
            The Socket is Connected
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Authenticating">
            <summary>
            The XMPP Session is authenticating
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Authenticated">
            <summary>
            The XMPP session is autrhenticated
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Binding">
            <summary>
            Resource Binding gets started
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Binded">
            <summary>
            Resource Binded with sucess
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.StartCompression">
            <summary>
            Initialize Stream Compression
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Compressed">
            <summary>
            Stream is compressed now
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Securing">
            <summary>
            We are switching from a normal connection to a secure SSL connection (StartTLS)
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Registering">
            <summary>
            started the progress to register a new account
            </summary>
        </member>
        <member name="F:agsXMPP.XmppConnectionState.Registered">
            <summary>
            Account was registered successful
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.Position">
            Represents a position in an entity.
            A position can be modified by <code>Encoding.movePosition</code>.
            @see Encoding#movePosition
            @version $Revision: 1.2 $ $Date: 1998/02/17 04:24:15 $
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Position.#ctor">
            Creates a position for the start of an entity: the line number is
            1 and the column number is 0.
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Position.Clone">
            Returns a copy of this position.
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.Position.LineNumber">
            Returns the line number.
            The first line number is 1.
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.Position.ColumnNumber">
            Returns the column number.
            The first column number is 0.
            A tab character is not treated specially.
        </member>
        <member name="M:agsXMPP.protocol.x.vcard_update.VcardUpdate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.x.vcard_update.VcardUpdate" /> class.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.vcard_update.VcardUpdate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.x.vcard_update.VcardUpdate" /> class.
            </summary>
            <param name="photo">The photo.</param>
        </member>
        <member name="P:agsXMPP.protocol.x.vcard_update.VcardUpdate.Photo">
            <summary>
            SHA1 hash of the avatar image data
            <para>if no image/avatar should be advertised, or other clients should be forced
            to remove the image set it to a empty string value ("")</para><para>if this protocol is supported but you ae not ready o advertise a imaeg yet
            set teh value to null.</para><para>Otherwise teh value must the SHA1 hash of the image data.</para></summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.search.SearchIq">
            <summary>
            Summary description for SearchIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.roster.RosterIq">
            <summary>
            Build a new roster query, jabber:iq:roster
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoItem">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.extensions.shim.Headers">
            <summary>
            JEP-0131: Stanza Headers and Internet Metadata (SHIM)
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.shim.Headers.AddHeader">
            <summary>
            Adds a new Header
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.shim.Headers.AddHeader(agsXMPP.protocol.extensions.shim.Header)">
            <summary>
            Adds the given Header
            </summary>
            <param name="header" />
            <returns>returns the given Header</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.shim.Headers.AddHeader(System.String,System.String)">
            <summary>
            Adds a new Header
            </summary>
            <param name="name">header name</param>
            <param name="val">header value</param>
            <returns>returns the new added header</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.shim.Headers.GetHeader(System.String)">
            <summary />
            <param name="name" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Subscriptions.AddSubscription">
            <summary />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Subscriptions.AddSubscription(agsXMPP.protocol.extensions.pubsub.Subscription)">
            <summary />
            <param name="item" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Publish.#ctor(System.String)">
            <summary>
            Its recommended to use this constructor because a node is required
            </summary>
            <param name="node">Node to publish</param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Publish.AddItem">
            <summary>
            Add a payload Item
            </summary>
            <returns>returns the added Item</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Publish.AddItem(agsXMPP.protocol.extensions.pubsub.Item)">
            <summary />
            <param name="item" />
            <returns>returns the added item</returns>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.Publish.GetItems">
            <summary>
            This will return all payload items. Multiple items are possible, but doe the most implementaions one item 
            should be enough
            </summary>
            <returns>returns an Array of Items</returns>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Publish.Node">
            <summary>
            The node to publish to. This Property is required
            </summary>
        </member>
        <member name="T:agsXMPP.Net.ClientSocket">
            <summary>
            Use async sockets to connect, send and receive data over TCP sockets.
            </summary>
        </member>
        <member name="F:agsXMPP.Net.ClientSocket.m_Compressed">
            <summary>
            is compression used for this connection
            </summary>
        </member>
        <member name="F:agsXMPP.Net.ClientSocket.deflater">
            <summary>
            is used to compress data
            </summary>
        </member>
        <member name="F:agsXMPP.Net.ClientSocket.inflater">
            <summary>
            is used to decompress data
            </summary>
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.Connect(System.String,System.Int32)">
            <summary>
            Connect to the specified address and port number.
            </summary>
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.connectTimeoutTimerDelegate(System.Object)">
            <summary>
            Connect Timeout Timer Callback
            </summary>
            <param name="stateInfo" />
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.StartTls">
            <summary>
            Starts TLS on a "normal" connection
            </summary>
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.InitSSL">
            <summary />
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.InitSSL(System.Security.Authentication.SslProtocols)">
            <summary />
            <param name="protocol" />
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.ValidateCertificate(System.Object,System.Security.Cryptography.X509Certificates.X509Certificate,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors)">
            <summary>
            Validate the SSL certificate here
            for now we dont stop the SSL connection an return always true
            </summary>
            <param name="certificate" />
            <param name="certificateErrors" />
            <returns />
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.StartCompression">
            <summary>
            Start Compression on the socket
            </summary>
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.InitCompression">
            <summary>
            Initialize compression stuff (Inflater, Deflater)
            </summary>
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.Disconnect">
            <summary>
            Disconnect from the server.
            </summary>
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.Send(System.String)">
            <summary />
            <param name="data" />
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.Send(System.Byte[])">
            <summary>
            Send data to the server.
            </summary>
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.Receive">
            <summary>
            Read data from server.
            </summary>
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.Compress(System.Byte[])">
            <summary>
            Compress bytes
            </summary>
            <param name="bIn" />
            <returns />
        </member>
        <member name="M:agsXMPP.Net.ClientSocket.Decompress(System.Byte[],System.Int32)">
            <summary>
            Decompress bytes
            </summary>
            <param name="bIn" />
            <param name="length" />
            <returns />
        </member>
        <member name="P:agsXMPP.Net.ClientSocket.Connected">
            <summary>
            Returns true if the socket is connected to the server. The property 
            Socket.Connected does not always indicate if the socket is currently 
            connected, this polls the socket to determine the latest connection state.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.Presence">
            <summary>
            Zusammenfassung für Presence.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Status">
            <summary>
            The OPTIONAL statuc contains a natural-language description of availability status. 
            It is normally used in conjunction with the show element to provide a detailed description of an availability state 
            (e.g., "In a meeting").
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Type">
            <summary>
            The type of a presence stanza is OPTIONAL. 
            A presence stanza that does not possess a type attribute is used to signal to the server that the sender is online and available 
            for communication. If included, the type attribute specifies a lack of availability, a request to manage a subscription 
            to another entity's presence, a request for another entity's current presence, or an error related to a previously-sent 
            presence stanza.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Show">
            <summary>
            The OPTIONAL show element contains non-human-readable XML character data that specifies the particular availability
            status of an entity or specific resource.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Priority">
            <summary>
            The priority level of the resource. The value MUST be an integer between -128 and +127. 
            If no priority is provided, a server SHOULD consider the priority to be zero.         
            </summary>
            <remarks>
            For information regarding the semantics of priority values in stanza routing 
            within instant messaging and presence applications, refer to Server Rules 
            for Handling XML StanzasServer Rules for Handling XML Stanzas.
            </remarks>
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.MucUser">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.client.Presence.Nickname">
            <summary>
            Nickname Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.StreamHost.Port">
            <summary>
            a port associated with the hostname or IP address for SOCKS5 communications over TCP
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.StreamHost.Host">
            <summary>
            the hostname or IP address of the StreamHost for SOCKS5 communications over TCP
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.StreamHost.Jid">
            <summary>
            The XMPP/Jabber id of the streamhost
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.StreamHost.Zeroconf">
            <summary>
            a zeroconf [5] identifier to which an entity may connect, for which the service identifier and 
            protocol name SHOULD be "_jabber.bytestreams".
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.prev">
            <summary>
                <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.comprFunc">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.#ctor(agsXMPP.IO.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>&gt;
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
            <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code></summary>
            <param name="curMatch" />
            <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buf">The buffer containing input data.</param>
            <param name="off">The index of the first byte of data.</param>
            <param name="len">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed via <see cref="M:agsXMPP.IO.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)"> SetInput</see></summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>
        </member>
        <member name="P:agsXMPP.IO.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:agsXMPP.IO.Compression.DeflateStrategy">deflate strategy</see></summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.BufferAggregate">
            <summary>
            Aggregate byte arrays together, so we can parse across IP packet boundaries
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.BufferAggregate.#ctor">
            <summary>
            Create an empty buffer
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.BufferAggregate.Write(System.Byte[])">
            <summary>
            Write to the buffer.  Please make sure that you won't use this memory any more after you hand it in.  
            It will get mangled.
            </summary>
            <param name="buf" />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.BufferAggregate.GetBuffer">
            <summary>
            Get the current aggregate contents of the buffer.
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.BufferAggregate.Clear(System.Int32)">
            <summary>
            Clear the first "offset" bytes of the buffer, so they won't be parsed again.
            </summary>
            <param name="offset" />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.BufferAggregate.ToString">
            <summary>
            UTF8 encode the current contents of the buffer.  Just for prettiness in the debugger.
            </summary>
            <returns />
        </member>
        <member name="T:agsXMPP.Sasl.Anonymous.AnonymousMechanism">
            <summary>
            SALS ANONYMOUS Mechanism, this allows anonymous logins to a xmpp server.
            </summary>
        </member>
        <member name="M:agsXMPP.Sasl.Anonymous.AnonymousMechanism.#ctor">
            <summary />
        </member>
        <member name="M:agsXMPP.Sasl.Anonymous.AnonymousMechanism.Init(agsXMPP.XmppClientConnection)">
            <summary />
            <param name="con" />
        </member>
        <member name="M:agsXMPP.Sasl.Anonymous.AnonymousMechanism.Parse(agsXMPP.Xml.Dom.Node)">
            <summary />
            <param name="e" />
        </member>
        <member name="T:agsXMPP.protocol.storage.Avatar">
            <summary>
            Summary description for Avatar.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Mechanisms">
            <summary>
            Summary description for Mechanisms.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.sasl.Mechanisms.GetMechanism(agsXMPP.protocol.sasl.MechanismType)">
            <summary>
            Gets the given mechanism.
            </summary>
            <param name="type">The mechanism type.</param>
            <returns />
        </member>
        <member name="T:agsXMPP.protocol.sasl.Mechanism">
            <summary>
            Summary description for Mechanism.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.sasl.Mechanism.MechanismType">
            <summary>
            SASL mechanis as enum
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.sasl.Mechanism.KerberosPrincipal">
            <summary>
            Gets or sets the kerberos principal.
            </summary>
            <value>The kerberos proncipal.</value>
        </member>
        <member name="T:agsXMPP.protocol.iq.last.LastIq">
            <summary>
            Summary description for LastIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.last.Last">
            <summary>
            Zusammenfassung für Last.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.last.Last.Seconds">
            <summary>
            Seconds since the last activity.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.primary.Primary">
            <summary>
            http://www.jabber.org/jeps/inbox/primary.html
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Type.jid">
            <summary />
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Type.group">
            <summary />
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Type.subscription">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.Active">
            <summary>
            The active list
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Configure.Data">
            <summary>
            The x-Data Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.Route">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.component.Route.Type">
            <summary>
            Gets or Sets the logtype
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Route.RouteElement">
            <summary>
            sets or gets the element to route
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Base.Group">
            <summary>
            Summary description for Group.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.Base.Group.Name">
            <summary>
            gets or sets the Name of the contact group
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.Response">
            <summary>
            A Response is a logical representation of the byte data returned from a DNS query
            </summary>
        </member>
        <member name="M:agsXMPP.Net.Dns.Response.#ctor(System.Byte[])">
            <summary>
            Construct a Response object from the supplied byte array
            </summary>
            <param name="message">a byte array returned from a DNS server query</param>
        </member>
        <member name="M:agsXMPP.Net.Dns.Response.GetShort(System.Byte[],System.Int32)">
            <summary>
            Convert 2 bytes to a short. It would have been nice to use BitConverter for this,
            it however reads the bytes in the wrong order (at least on Windows)
            </summary>
            <param name="message">byte array to look in</param>
            <param name="position">position to look at</param>
            <returns>short representation of the two bytes</returns>
        </member>
        <member name="T:agsXMPP.protocol.extensions.ibb.Close">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Close.#ctor">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Close.#ctor(System.String)">
            <summary />
            <param name="sid" />
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.Activate.Jid">
            <summary>
            the full JID of the Target to activate
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:agsXMPP.IO.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name="codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.InflaterHuffmanTree.GetSymbol(agsXMPP.IO.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="P:agsXMPP.Net.WebRequestState.Started">
            <summary>
            when was this request started (timestamp)?
            </summary>
        </member>
        <member name="M:agsXMPP.Net.BoshClientSocket.GenerateKeys">
            <summary>
            Generates a bunch of keys
            </summary>
        </member>
        <member name="M:agsXMPP.Net.BoshClientSocket.ParseResponse(System.String,System.String@,System.String@)">
            <summary>
            This is ugly code, but currently all BOSH server implementaions are not namespace correct,
            which means we can't use the XML parser here and have to spit it with string functions.
            </summary>
            <param name="res" />
            <param name="body" />
            <param name="stanzas" />
        </member>
        <member name="P:agsXMPP.Net.BoshClientSocket.Wait">
            <summary>
            The longest time (in seconds) that the connection manager is allowed to wait before responding to any request during the session.
            This enables the client to prevent its TCP connection from expiring due to inactivity, as well as to limit the delay before 
            it discovers any network failure.
            </summary>
        </member>
        <member name="P:agsXMPP.Net.BoshClientSocket.Hold">
            <summary>
            This attribute specifies the maximum number of requests the connection manager is allowed to keep waiting 
            at any one time during the session. If the client is not able to use HTTP Pipelining then this SHOULD be set to "1".
            </summary>
        </member>
        <member name="P:agsXMPP.Net.BoshClientSocket.KeepAlive">
            <summary>
            Keep Alive for HTTP Webrequests, its disables by default because not many BOSH implementations support Keep Alives
            </summary>
        </member>
        <member name="P:agsXMPP.Net.BoshClientSocket.MaxPause">
            <summary>
            If the connection manager supports session pausing (see Inactivity) then it SHOULD advertise that to the client 
            by including a 'maxpause' attribute in the session creation response element. 
            The value of the attribute indicates the maximum length of a temporary session pause (in seconds) that a client MAY request.
            0 is the default value and indicated that the connection manager supports no session pausing.
            </summary>
        </member>
        <member name="T:agsXMPP.XmppComponentConnection">
            <summary>
                <para>
            use this class to write components that connect to a Jabebr/XMPP server
            </para>
                <para>
            http://www.xmpp.org/extensions/xep-0114.html
            </para>
            </summary>
        </member>
        <member name="T:agsXMPP.XmppConnection">
            <summary>
            abstract base class XmppConnection.
            </summary>
        </member>
        <member name="M:agsXMPP.XmppConnection.SocketConnect">
            <summary>
            Starts connecting of the socket
            </summary>
        </member>
        <member name="M:agsXMPP.XmppConnection.Send(System.String)">
            <summary>
            Send a xml string over the XmppConnection
            </summary>
            <param name="xml" />
        </member>
        <member name="M:agsXMPP.XmppConnection.Send(agsXMPP.Xml.Dom.Element)">
            <summary>
            Send a xml element over the XmppConnection
            </summary>
            <param name="e" />
        </member>
        <member name="M:agsXMPP.XmppConnection.Close">
            <summary>
            Send the end of stream
            </summary>
        </member>
        <member name="E:agsXMPP.XmppConnection.OnXmppConnectionStateChanged">
            <summary>
            This event just informs about the current state of the XmppConnection
            </summary>
        </member>
        <member name="E:agsXMPP.XmppConnection.OnReadXml">
            <summary>
            a XML packet or text is received. 
            This are no winsock events. The Events get generated from the XML parser
            </summary>
        </member>
        <member name="E:agsXMPP.XmppConnection.OnWriteXml">
            <summary>
            XML or Text is written to the Socket this includes also the keep alive packages (a single space)		
            </summary>
        </member>
        <member name="E:agsXMPP.XmppConnection.OnReadSocketData">
            <summary>
            Data received from the Socket
            </summary>
        </member>
        <member name="E:agsXMPP.XmppConnection.OnWriteSocketData">
            <summary>
            Data was sent to the socket for sending
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.Port">
            <summary>
            The Port of the remote server for the connection
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.Server">
            <summary>
            domain or ip-address of the remote server for the connection
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.ConnectServer">
            <summary />
        </member>
        <member name="P:agsXMPP.XmppConnection.StreamId">
            <summary>
            the id of the current xmpp xml-stream
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.StreamVersion">
            <summary>
            Set to null for old Jabber Protocol without SASL andstream features
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.ClientSocket">
            <summary>
            Read Online Property ClientSocket
            returns the SOcket object used for this connection
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.StreamParser">
            <summary>
            the underlaying XMPP StreamParser. Normally you don't need it, but we make it accessible for
            low level access to the stream
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.KeepAliveInterval">
            <summary>
                <para>
            the keep alive interval in seconds.
            Default value is 120
            </para>
                <para>
            Keep alive packets prevent disconenct on NAT and broadband connections which often
            disconnect if they are idle.
            </para>
            </summary>
        </member>
        <member name="P:agsXMPP.XmppConnection.KeepAlive">
            <summary>
            Send Keep Alives (for NAT)
            </summary>
        </member>
        <member name="M:agsXMPP.XmppComponentConnection.#ctor">
            <summary>
            Creates a new Component Connection to a given server and port
            </summary>
        </member>
        <member name="M:agsXMPP.XmppComponentConnection.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Component Connection to a given server and port
            </summary>
            <param name="server">host/ip of the listening server</param>
            <param name="port">port the server listens for the connection</param>
        </member>
        <member name="M:agsXMPP.XmppComponentConnection.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a new Component Connection to a given server, port and password (secret)
            </summary>
            <param name="server">host/ip of the listening server</param>
            <param name="port">port the server listens for the connection</param>
            <param name="password">password</param>
        </member>
        <member name="M:agsXMPP.XmppComponentConnection.Open(System.String,System.Int32)">
            <summary />
            <param name="server" />
            <param name="port" />
        </member>
        <member name="P:agsXMPP.XmppComponentConnection.Authenticated">
            <summary>
            Are we Authenticated to the server? This is readonly and set by the library
            </summary>
        </member>
        <member name="P:agsXMPP.XmppComponentConnection.ComponentJid">
            <summary>
            The Domain of the component.
            <para>
            eg: <c>jabber.ag-software.de</c></para></summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnLogin">
            <summary>
            connection is authenticated now and ready for receiving Route, Log and Xdb Packets
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnRoute">
            <summary>
            handler for incoming routet packtes from the server
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnAuthError">
            <summary>
            Event that occurs on authentication errors
            e.g. wrong password, user doesnt exist etc...
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnStreamError">
            <summary>
            Stream errors &lt;stream:error/&gt;
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnSocketError">
            <summary>
            Event occurs on Socket Errors
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnIq">
            <summary />
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnMessage">
            <summary>
            We received a message. This could be a chat message, headline, normal message or a groupchat message. 
            There are also XMPP extension which are embedded in messages. 
            e.g. X-Data forms.
            </summary>
        </member>
        <member name="E:agsXMPP.XmppComponentConnection.OnPresence">
            <summary>
            We received a presence from a contact or chatroom.
            Also subscriptions is handles in this event.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.Token">
            <summary>
            A token that was parsed.
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.Token.TokenEnd">
            <summary>
            The end of the current token, in relation to the beginning of the buffer.
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.Token.NameEnd">
            <summary>
            The end of the current token's name, in relation to the beginning of the buffer.
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.Token.RefChar1">
            <summary>
            The parsed-out character. &amp; for &amp;amp;
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.Token.RefChar2">
            <summary>
            The second of two parsed-out characters.  TODO: find example.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.NamespaceStack">
            <summary>
            Namespace stack.
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.NamespaceStack.#ctor">
            <summary>
            Create a new stack, primed with xmlns and xml as prefixes.
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.NamespaceStack.Push">
            <summary>
            Declare a new scope, typically at the start of each element
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.NamespaceStack.Pop">
            <summary>
            Pop the current scope off the stack.  Typically at the end of each element.
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.NamespaceStack.AddNamespace(System.String,System.String)">
            <summary>
            Add a namespace to the current scope.
            </summary>
            <param name="prefix" />
            <param name="uri" />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.NamespaceStack.LookupNamespace(System.String)">
            <summary>
            Lookup a prefix to find a namespace.  Searches down the stack, starting at the current scope.
            </summary>
            <param name="prefix" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.NamespaceStack.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.NamespaceStack.DefaultNamespace">
            <summary>
            The current default namespace.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.User">
            <summary>
            Summary description for MucUser.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.User.StatusCodes">
            <summary>
            Gets or sets the status codes.
            </summary>
            <value>The status codes.</value>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.User.Status">
            <summary>
            The Status Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.User.Invite">
            <summary>
            The Invite Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.User.Decline">
            <summary>
            The Decline Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.session.SessionIq">
            <summary>
            Starting the session, this is done after resource binding
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Response">
            <summary>
            Summary description for Response.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Organization">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.iq.private.Private">
            <summary>
            Private XML Storage JEP-0049
            </summary>
            <remarks>
            A Jabber client can store any arbitrary XML on the server side by sending an
            iq stanza of type "set" to the server with a query child scoped by the 'jabber:iq:private' namespace.
            The query element MAY contain any arbitrary XML fragment as long as the root element of that 
            fragment is scoped by its own namespace. The data can then be retrieved by sending an iq stanza 
            of type "get" with a query child scoped by the 'jabber:iq:private' namespace, 
            which in turn contains a child element scoped by the namespace used for storage of that fragment.
            Using this method, Jabber entities can store private data on the server and retrieve it 
            whenever necessary. The data stored might be anything, as long as it is valid XML.
            One typical usage for this namespace is the server-side storage of client-specific preferences; 
            another is Bookmark Storage.
            </remarks>
        </member>
        <member name="P:agsXMPP.protocol.iq.private.Private.Storage">
            <summary>
            The <see cref="T:agsXMPP.protocol.extensions.bookmarks.Storage">Storage</see> object 
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoInfoIq">
            <summary>
            Discovering Information About a Jabber Entity
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.rpc.Rpc">
            <summary>
            JEP-0009: Jabber-RPC, transport RPC over Jabber/XMPP
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.rpc.Rpc.MethodCall">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.iq.rpc.Rpc.MethodResponse">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.Action">
            <summary>
            privacy lis action
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Action.allow">
            <summary />
        </member>
        <member name="F:agsXMPP.protocol.iq.privacy.Action.deny">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Subscription.Node">
            <summary>
            Node (optional)
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Subscription.SubId">
            <summary>
            Subscription ID (optional)
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.geoloc.GeoLoc">
            <summary>
            XEP-0080 Geographical Location (GeoLoc)
            This JEP defines a format for capturing data about an entity's geographical location (geoloc).
            The namespace defined herein is intended to provide a semi-structured format for 
            describing a geographical location that may change fairly frequently, 
            where the geoloc information is provided as Global Positioning System (GPS) coordinates.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.geoloc.GeoLoc.#ctor">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.extensions.geoloc.GeoLoc.#ctor(System.Double,System.Double)">
            <summary />
            <param name="Latitude" />
            <param name="Longitude" />
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Description">
            <summary>
            A natural-language description of the location
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Datum">
            <summary>
            GPS datum
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Latitude">
            <summary>
            Latitude in decimal degrees North
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Longitude">
            <summary>
            Longitude in decimal degrees East
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Altitude">
            <summary>
            Altitude in meters above or below sea level
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Bearing">
            <summary>
            GPS bearing (direction in which the entity is heading to reach its next waypoint),
            measured in decimal degrees relative to true north
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Error">
            <summary>
            Horizontal GPS error in arc minutes
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.geoloc.GeoLoc.Timestamp">
            <summary>
            UTC timestamp specifying the moment when the reading was taken           
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.PrivacyManager">
            <summary>
            Helper class for managing server side privacy lists (blocking communication)
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.GetLists">
            <summary>
            Retrieving all Privacy Lists
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.GetLists(agsXMPP.IqCB,System.Object)">
            <summary>
            Retrieving all Privacy Lists
            </summary>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.GetList(System.String)">
            <summary>
            Requests a privacy list from the server by its name
            </summary>
            <param name="name">name of the privacy list to retrieve</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.GetList(System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            Requests a privacy list from the server by its name
            </summary>
            <param name="name">name of the privacy list to retrieve</param>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.RemoveList(System.String)">
            <summary>
            Remove a privacy list
            </summary>
            <param name="name">name of the privacy list to remove</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.RemoveList(System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            Remove a privacy list
            </summary>
            <param name="name">name of the privacy list to remove</param>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.DeclineActiveList">
            <summary>
            Decline the use of any active list
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.DeclineActiveList(agsXMPP.IqCB,System.Object)">
            <summary>
            Decline the use of any active list
            </summary>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.ChangeActiveList(System.String)">
            <summary>
            Change the active list
            </summary>
            <param name="name" />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.ChangeActiveList(System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            Change the active list
            </summary>
            <param name="name" />
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.ChangeDefaultList(System.String)">
            <summary>
            Change the default list
            </summary>
            <param name="name">name of the new default list</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.ChangeDefaultList(System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            Change the default list
            </summary>
            <param name="name">name of the new default list</param>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.DeclineDefaultList">
            <summary>
            Decline the use of the default list
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.DeclineDefaultList(agsXMPP.IqCB,System.Object)">
            <summary>
            Decline the use of the default list
            </summary>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.UpdateList(System.String,agsXMPP.protocol.iq.privacy.Item[])">
            <summary>
            Update the list with the given name and rules.
            </summary>
            <remarks>
            Specify the desired changes to the list by including all elements/rules in the list 
            (not the "delta")
            </remarks>
            <param name="name">name of the list</param>
            <param name="rules">rules of this list</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.UpdateList(System.String,agsXMPP.protocol.iq.privacy.Item[],agsXMPP.IqCB,System.Object)">
            <summary>
            Update the list with the given name and rules.
            </summary>
            <remarks>
            Specify the desired changes to the list by including all elements/rules in the list 
            (not the "delta")
            </remarks>
            <param name="name">name of this list</param>
            <param name="rules">rules of this list</param>
            <param name="cb">Callback for the server result</param>
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.AddList(System.String,agsXMPP.protocol.iq.privacy.Item[])">
            <summary>
            Add a new list with the given name and rules
            </summary>
            <param name="name" />
            <param name="rules" />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.AddList(System.String,agsXMPP.protocol.iq.privacy.Item[],agsXMPP.IqCB,System.Object)">
            <param name="cbArg">Callback arguments for the result when needed</param>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.PrivacyManager.SendStanza(agsXMPP.protocol.iq.privacy.PrivacyIq,agsXMPP.IqCB,System.Object)">
            <summary>
            Sends a PrivacyIq over the active connection
            </summary>
            <param name="pIq" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="T:agsXMPP.Net.PollSocketException">
            <summary>
            Summary description for PollingSocketException.
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.Request">
            <summary>
            A Request logically consists of a number of questions to ask the DNS Server. Create a request and
            add questions to it, then pass the request to Resolver.Lookup to query the DNS Server. It is important
            to note that many DNS Servers DO NOT SUPPORT MORE THAN 1 QUESTION PER REQUEST, and it is advised that
            you only add one question to a request. If not ensure you check Response.ReturnCode to see what the
            server has to say about it.
            </summary>
        </member>
        <member name="M:agsXMPP.Net.Dns.Request.#ctor">
            <summary>
            Construct this object with the default values and create an ArrayList to hold
            the questions as they are added
            </summary>
        </member>
        <member name="M:agsXMPP.Net.Dns.Request.AddQuestion(agsXMPP.Net.Dns.Question)">
            <summary>
            Adds a question to the request to be sent to the DNS server.
            </summary>
            <param name="question">The question to add to the request</param>
        </member>
        <member name="M:agsXMPP.Net.Dns.Request.GetMessage">
            <summary>
            Convert this request into a byte array ready to send direct to the DNS server
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.Net.Dns.Request.AddDomain(System.Collections.ArrayList,System.String)">
            <summary>
            Adds a domain name to the ArrayList of bytes. This implementation does not use
            the domain name compression used in the class Pointer - maybe it should.
            </summary>
            <param name="data">The ArrayList representing the byte array message</param>
            <param name="domainName">the domain name to encode and add to the array</param>
        </member>
        <member name="M:agsXMPP.MessageGrabber.#ctor(agsXMPP.XmppClientConnection)">
            <summary />
            <param name="conn" />
        </member>
        <member name="M:agsXMPP.MessageGrabber.Remove(agsXMPP.Jid)">
            <summary>
            Pending request can be removed.
            This is useful when a ressource for the callback is destroyed and
            we are not interested anymore at the result.
            </summary>
            <param name="id">ID of the Iq we are not interested anymore</param>
        </member>
        <member name="M:agsXMPP.MessageGrabber.m_connection_OnMessage(System.Object,agsXMPP.protocol.client.Message)">
            <summary>
            A Message is received. Now check if its from a Jid we are looking for and
            raise the event in this case.
            </summary>
            <param name="sender" />
            <param name="msg" />
        </member>
        <member name="T:agsXMPP.Factory.SaslFactory">
            <summary>
            SASL factory
            </summary>
        </member>
        <member name="M:agsXMPP.Factory.SaslFactory.AddMechanism(System.String,System.Type)">
            <summary>
            Adds new Element Types to the Hashtable
            Use this function to register new SASL mechanisms
            </summary>
            <param name="mechanism" />
            <param name="t" />
        </member>
        <member name="T:agsXMPP.XmppClientConnection">
            <summary>
            Summary description for XmppClient.
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.#ctor(agsXMPP.Jid,System.String)">
            <summary>
            create a new XmppClientConnection with the given JabberId and password
            </summary>
            <param name="jid">JabberId (user@example.com)</param>
            <param name="pass">password</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.#ctor(System.String)">
            <summary>
            create a new XmppClientConnection with the given server
            Username and Password gets set later
            </summary>
            <param name="server" />
        </member>
        <member name="M:agsXMPP.XmppClientConnection.#ctor(System.String,System.Int32)">
            <summary>
            create a new XmppClientConnection with the given server and port number
            Username and Password gets set later
            </summary>
            <param name="server" />
        </member>
        <member name="M:agsXMPP.XmppClientConnection.Open">
            <summary>
            This method open the connections to the xmpp server and authenticates you to ther server.
            This method is async, don't assume you are already connected when it returns. You have to wait for the OnLogin Event
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.Open(System.String,System.String)">
            <summary>
            This method open the connections to the xmpp server and authenticates you to ther server.
            This method is async, don't assume you are already connected when it returns. You have to wait for the OnLogin Event
            </summary>
            <param name="username">your username</param>
            <param name="password">your password</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.Open(System.String,System.String,System.String)">
            <summary>
            This method open the connections to the xmpp server and authenticates you to ther server.
            This method is async, don't assume you are already connected when it returns. You have to wait for the OnLogin Event
            </summary>
            <param name="username">your username</param>
            <param name="password">your passowrd</param>
            <param name="resource">resource for this connection</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.Open(System.String,System.String,System.String,System.Int32)">
            <summary>
            This method open the connections to the xmpp server and authenticates you to ther server.
            This method is async, don't assume you are already connected when it returns. You have to wait for the OnLogin Event
            </summary>
            <param name="username">your username</param>
            <param name="password">your password</param>
            <param name="resource">resource for this connection</param>
            <param name="priority">priority which will be sent with presence packets</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.Open(System.String,System.String,System.Int32)">
            <summary>
            This method open the connections to the xmpp server and authenticates you to ther server.
            This method is async, don't assume you are already connected when it returns. You have to wait for the OnLogin Event
            </summary>
            <param name="username">your username</param>
            <param name="password">your password</param>
            <param name="priority">priority which will be sent with presence packets</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.ResolveSrv">
            <summary>
            Resolves the connection host of a xmpp domain when SRV records are set
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.PickSRVRecord">
            <summary>
            Picks one of the SRV records.
            priority and weight are evaluated by the following algorithm.
            </summary>
            <returns>SRVRecord</returns>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.SendMyPresence">
            <summary>
            Sends our Presence, the packet is built of Status, Show and Priority
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.UpdateCapsVersion">
            <summary>
            Sets the caps version automatically from the DiscoInfo object.
            Call this member after each change of the DiscoInfo object
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.ChangePassword(System.String)">
            <summary>
            Changing the Password. You should use this function only when connected with SSL or TLS
            because the password is sent in plain text over the connection.		
            </summary>
            /// <remarks><para>
            		After this request was successful the new password is set automatically in the Username Property
            	</para></remarks><param name="newPass">value of the new password</param></member>
        <member name="M:agsXMPP.XmppClientConnection.OnChangePasswordResult(System.Object,agsXMPP.protocol.client.IQ,System.Object)">
            <summary />
            <param name="sender" />
            <param name="iq" />
            <param name="data">contains the new password</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.GetRegistrationFields(System.Object)">
            <summary>
            requests the registration fields
            </summary>
            <param name="obj">object which contains the features node which we need later for login again</param>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.BuildMyJid">
            <summary>
            Refreshes the myJid Member Variable
            </summary>
        </member>
        <member name="M:agsXMPP.XmppClientConnection.CleanupSession">
            <summary>
            Does the Clieanup of the Session and sends the OnClose Event
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.ClientLanguage">
            <summary>
            The prefered Client Language Attribute
            </summary>
            <seealso cref="!:agsXMPP.protocol.Base.XmppPacket.Language" />
        </member>
        <member name="P:agsXMPP.XmppClientConnection.ServerLanguage">
            <summary>
            The language which the server decided to use.
            </summary>
            <seealso cref="!:agsXMPP.protocol.Base.XmppPacket.Language" />
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Username">
            <summary>
            the username that is used to authenticate to the xmpp server
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Password">
            <summary>
            the password that is used to authenticate to the xmpp server
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Resource">
            <summary>
            the resource for this connection each connection to the server with the same jid needs a unique resource.
            You can also set <code>Resource = null</code> and the server will assign a random Resource for you.
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.MyJID">
            <summary>
            our XMPP id build from Username, Server and Resource Property (user@server/resourcee)
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Status">
            <summary>
            The status message of this connection which is sent with the presence packets.
            </summary>
            <remarks>
            you have to call the method <b>SendMyPresence</b> to send your updated presence to the server.        
            </remarks>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Priority">
            <summary>
            The priority of this connection send with the presence packets.
            The OPTIONAL priority element contains non-human-readable XML character data that specifies the priority level 
            of the resource. The value MUST be an integer between -128 and +127. If no priority is provided, a server 
            SHOULD consider the priority to be zero.        
            </summary>
            <remarks>you have to call the method <b>SendMyPresence</b> to send your updated presence to the server.</remarks>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Show">
            <summary>
            change the showtype. 
            </summary>
            <remarks>you have to call the method <b>SendMyPresence</b> to send your updated presence to the server.</remarks>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.AutoRoster">
            <summary>
            If set to true then the Roster (contact list) is requested automatically after sucessful login. 
            Set this property to false if you don't want to receive your contact list, or request it manual. 
            To save bandwidth is makes sense to cache the contact list and don't receive it on each login.
            </summary>
            <remarks>default value is <b>true</b></remarks>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.AutoPresence">
            <summary>
            Sends the presence Automatically after successful login.
            This property works only in combination with AutoRoster (AutoRoster = true).
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.AutoAgents">
            <summary>
            If set to true then the Agents are requested automatically after sucessful login. 
            Set this property to false if you don't use agents at all, or if you request them manual.
            </summary>
            <remarks>default value is <b>true</b></remarks>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.UseSso">
            <summary>
            Use Single sign on (GSSAPI/KERBEROS)
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.KerberosPrincipal">
            <summary>
            Gets the kerberos principal.
            </summary>
            <value>The kerberos principal.</value>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.UseSSL">
            <summary>
            use "old style" ssl for this connection (Port 5223).
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.UseStartTLS">
            <summary>
            use Start-TLS on this connection when the server supports it. Make sure UseSSL is false when 
            you want to use this feature.
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.UseCompression">
            <summary>
            Use Stream compression to save bandwidth?
            This should not be used in combination with StartTLS,
            because TLS has build in compression (see RFC 2246, http://www.ietf.org/rfc/rfc2246.txt)
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Authenticated">
            <summary>
            Are we Authenticated to the server? This is readonly and set by the library
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.Binded">
            <summary>
            is the resource binded? This is readonly and set by the library
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.RegisterAccount">
            <summary>
            Should the library register a new account on the server
            </summary>
        </member>
        <member name="P:agsXMPP.XmppClientConnection.DiscoInfo">
            <summary>
            The DiscoInfo object is used to respond to DiscoInfo request if AutoAnswerDiscoInfoRequests == true in DisoManager objects,
            it's also used to build the Caps version when EnableCapabilities is set to true.
            <remarks>
            When EnableCapailities == true call UpdateCapsVersion after each update of the DiscoInfo object
            </remarks></summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnLogin">
            <summary>
            We are authenticated to the server now.
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnBinded">
            <summary>
            This event occurs after the resource was binded
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRegisterInformation">
            <summary>
            This event is fired when we get register information.
            You ca use this event for custom registrations.
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRegistered">
            <summary>
            This event gets fired after a new account is registered
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnPasswordChanged">
            <summary>
            This event ets fired after a ChangePassword Request was successful
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRegisterError">
            <summary>
            Event that occurs on registration errors
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnStreamError">
            <summary>
            Event occurs on Xmpp Stream error elements
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnAuthError">
            <summary>
            Event that occurs on authentication errors
            e.g. wrong password, user doesnt exist etc...
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnSocketError">
            <summary>
            Event occurs on Socket Errors
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRosterStart">
            <summary>
            This event is raised when a response to a roster query is received. The roster query contains the contact list.
            This lost could be very large and could contain hundreds of contacts. The are all send in a single XML element from 
            the server. Normally you show the contact list in a GUI control in you application (treeview, listview). 
            When this event occurs you couls Suspend the GUI for faster drawing and show change the mousepointer to the hourglass
            </summary>
            <remarks>see also OnRosterItem and OnRosterEnd</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRosterEnd">
            <summary>
            This event is raised when a response to a roster query is received. It notifies you that all RosterItems (contacts) are
            received now.
            When this event occurs you could Resume the GUI and show the normal mousepointer again.
            </summary>
            <remarks>see also OnRosterStart and OnRosterItem</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnRosterItem">
            <summary>
            This event is raised when a response to a roster query is received. This event always contains a single RosterItem. 
            e.g. you have 150 friends on your contact list, then this event is called 150 times.
            </summary>
            <remarks>see also OnRosterItem and OnRosterEnd</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnAgentStart">
            <summary>
            This event is raised when a response to an agents query which could contain multiple agentitems.
            Normally you show the items in a GUI. This event could be used to suspend the UI for faster drawing.
            </summary>
            <remarks>see also OnAgentItem and OnAgentEnd</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnAgentEnd">
            <summary>
            This event is raised when a response to an agents query which could contain multiple agentitems.
            Normally you show the items in a GUI. This event could be used to resume the suspended userinterface.
            </summary>
            <remarks>see also OnAgentStart and OnAgentItem</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnAgentItem">
            <summary>
            This event returns always a single AgentItem from a agents query result.
            This is from the old jabber protocol. Instead of agents Disco (Service Discovery) should be used in modern
            application. But still lots of servers use Agents.
            <seealso cref="!:" /></summary>
            <remarks>see also OnAgentStart and OnAgentEnd</remarks>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnIq">
            <summary />
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnMessage">
            <summary>
            We received a message. This could be a chat message, headline, normal message or a groupchat message. 
            There are also XMPP extension which are embedded in messages. 
            e.g. X-Data forms.
            </summary>
        </member>
        <member name="E:agsXMPP.XmppClientConnection.OnPresence">
            <summary>
            We received a presence from a contact or chatroom.
            Also subscriptions is handles in this event.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.UTF8Encoding">
            <summary>
            UTF-8 specific tokenizer.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.Encoding">
            <summary>
            Base tokenizer class
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_LEAD2">
            <summary>
            Need more bytes
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_LEAD3">
            <summary>
            Need more bytes
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_LEAD4">
            <summary>
            Need more bytes
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_NONXML">
            <summary>
            Not XML
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_MALFORM">
            <summary>
            Malformed XML
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_LT">
            <summary>
            Less than
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_AMP">
            <summary>
            Ampersand
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_RSQB">
            <summary>
            right square bracket
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_CR">
            <summary>
            carriage return
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_LF">
            <summary>
            line feed
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_GT">
            <summary>
            greater than
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_QUOT">
            <summary>
            Quote
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_APOS">
            <summary>
            Apostrophe
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_EQUALS">
            <summary>
            Equal sign
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_QUEST">
            <summary>
            Question mark
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_EXCL">
            <summary>
            Exclamation point
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_SOL">
            <summary>
            Solidus (/)
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_SEMI">
            <summary>
            Semicolon
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_NUM">
            <summary>
            Hash
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_LSQB">
            <summary>
            Left square bracket
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_S">
            <summary>
            space
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_NMSTRT">
            <summary />
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_NAME">
            <summary />
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_MINUS">
            <summary>
            Minus
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_OTHER">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_PERCNT">
            <summary>
            Percent
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_LPAR">
            <summary>
            Left paren
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_RPAR">
            <summary>
            Right paren
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_AST">
            <summary />
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_PLUS">
            <summary>
            +
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_COMMA">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.BT_VERBAR">
            <summary>
            Pipe
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.asciiTypeTable">
            <summary>
            What syntax do each of the ASCII7 characters have?
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary />
            <param name="sourceBuf" />
            <param name="sourceStart" />
            <param name="sourceEnd" />
            <param name="targetBuf" />
            <param name="targetStart" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.#ctor(System.Int32)">
            <summary>
            Constructor called by subclasses to set the minimum bytes per character
            </summary>
            <param name="minBPC" />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.byteType(System.Byte[],System.Int32)">
            <summary>
            Get the byte type of the next byte.  There are guaranteed to be minBPC available bytes starting at off.
            </summary>
            <param name="buf" />
            <param name="off" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.byteToAscii(System.Byte[],System.Int32)">
            <summary>
            Really only works for ASCII7.
            </summary>
            <param name="buf" />
            <param name="off" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.charMatches(System.Byte[],System.Int32,System.Char)">
            <summary>
            This must only be called when c is an (XML significant)
            ASCII character.
            </summary>
            <param name="buf" />
            <param name="off" />
            <param name="c" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.byteType2(System.Byte[],System.Int32)">
            <summary>
            Called only when byteType(buf, off) == BT_LEAD2
            </summary>
            <param name="buf" />
            <param name="off" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.byteType3(System.Byte[],System.Int32)">
            <summary>
            Called only when byteType(buf, off) == BT_LEAD3
            </summary>
            <param name="buf" />
            <param name="off" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.byteType4(System.Byte[],System.Int32)">
            <summary>
            Called only when byteType(buf, off) == BT_LEAD4
            </summary>
            <param name="buf" />
            <param name="off" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.movePosition(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.Xpnet.Position)">
            Moves a position forward.  On entry, <code>pos</code> gives
            the position of the byte at index <code>off</code> in
            <code>buf</code>.  On exit, it <code>pos</code> will give
            the position of the byte at index <code>end</code>, which
            must be greater than or equal to <code>off</code>.  The
            bytes between <code>off</code> and <code>end</code> must
            encode one or more complete characters.  A carriage return
            followed by a line feed will be treated as a single line
            delimiter provided that they are given to
            <code>movePosition</code> together.
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.tokenizeCdataSection(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.Xpnet.Token)">
             Scans the first token of a byte subarrary that starts with the
             content of a CDATA section.
             Returns one of the following integers according to the type of token
             that the subarray starts with:
             <ul><li><code>TOK.DATA_CHARS</code></li><li><code>TOK.DATA_NEWLINE</code></li><li><code>TOK.CDATA_SECT_CLOSE</code></li></ul><p>
             Information about the token is stored in <code>token</code>.
             </p>
             After <code>TOK.CDATA_SECT_CLOSE</code> is returned, the application
             should use <code>tokenizeContent</code>.
            
             @exception EmptyTokenException if the subarray is empty
             @exception PartialTokenException if the subarray contains only part of
             a legal token
             @exception InvalidTokenException if the subarrary does not start
             with a legal token or part of one
             @exception ExtensibleTokenException if the subarray encodes just a carriage
             return ('\r')
            
             @see #TOK.DATA_CHARS
             @see #TOK.DATA_NEWLINE
             @see #TOK.CDATA_SECT_CLOSE
             @see Token
             @see EmptyTokenException
             @see PartialTokenException
             @see InvalidTokenException
             @see ExtensibleTokenException
             @see #tokenizeContent
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.tokenizeContent(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.Xpnet.ContentToken)">
             Scans the first token of a byte subarrary that contains content.
             Returns one of the following integers according to the type of token
             that the subarray starts with:
             <ul><li><code>TOK.START_TAG_NO_ATTS</code></li><li><code>TOK.START_TAG_WITH_ATTS</code></li><li><code>TOK.EMPTY_ELEMENT_NO_ATTS</code></li><li><code>TOK.EMPTY_ELEMENT_WITH_ATTS</code></li><li><code>TOK.END_TAG</code></li><li><code>TOK.DATA_CHARS</code></li><li><code>TOK.DATA_NEWLINE</code></li><li><code>TOK.CDATA_SECT_OPEN</code></li><li><code>TOK.ENTITY_REF</code></li><li><code>TOK.MAGIC_ENTITY_REF</code></li><li><code>TOK.CHAR_REF</code></li><li><code>TOK.CHAR_PAIR_REF</code></li><li><code>TOK.PI</code></li><li><code>TOK.XML_DECL</code></li><li><code>TOK.COMMENT</code></li></ul><p>
             Information about the token is stored in <code>token</code>.
             </p>
             When <code>TOK.CDATA_SECT_OPEN</code> is returned,
             <code>tokenizeCdataSection</code> should be called until
             it returns <code>TOK.CDATA_SECT</code>.
            
             @exception EmptyTokenException if the subarray is empty
             @exception PartialTokenException if the subarray contains only part of
             a legal token
             @exception InvalidTokenException if the subarrary does not start
             with a legal token or part of one
             @exception ExtensibleTokenException if the subarray encodes just a carriage
             return ('\r')
            
             @see #TOK.START_TAG_NO_ATTS
             @see #TOK.START_TAG_WITH_ATTS
             @see #TOK.EMPTY_ELEMENT_NO_ATTS
             @see #TOK.EMPTY_ELEMENT_WITH_ATTS
             @see #TOK.END_TAG
             @see #TOK.DATA_CHARS
             @see #TOK.DATA_NEWLINE
             @see #TOK.CDATA_SECT_OPEN
             @see #TOK.ENTITY_REF
             @see #TOK.MAGIC_ENTITY_REF
             @see #TOK.CHAR_REF
             @see #TOK.CHAR_PAIR_REF
             @see #TOK.PI
             @see #TOK.XML_DECL
             @see #TOK.COMMENT
             @see ContentToken
             @see EmptyTokenException
             @see PartialTokenException
             @see InvalidTokenException
             @see ExtensibleTokenException
             @see #tokenizeCdataSection
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.getInitialEncoding(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.Xpnet.Token)">
             Returns an encoding object to be used to start parsing an
             external entity.  The encoding is chosen based on the
             initial 4 bytes of the entity.
             
             @param buf the byte array containing the initial bytes of
             the entity @param off the index in <code>buf</code> of the
             first byte of the entity @param end the index in
             <code>buf</code> following the last available byte of the
             entity; <code>end - off</code> must be greater than or
             equal to 4 unless the entity has fewer that 4 bytes, in
             which case it must be equal to the length of the entity
             @param token receives information about the presence of a
             byte order mark; if the entity starts with a byte order
             mark then <code>token.getTokenEnd()</code> will return
             <code>off + 2</code>, otherwise it will return
             <code>off</code>
            
             @see TextDecl
             @see XmlDecl
             @see #TOK.XML_DECL
             @see #getEncoding
             @see #getInternalEncoding
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.getEncoding(System.String)">
            Returns an <code>Encoding</code> corresponding to the
            specified IANA character set name.  Returns this
            <code>Encoding</code> if the name is null.  Returns null if
            the specified encoding is not supported.  Note that there
            are two distinct <code>Encoding</code> objects associated
            with the name <code>UTF-16</code>, one for each possible
            byte order; if this <code>Encoding</code> is UTF-16 with
            little-endian byte ordering, then
            <code>getEncoding("UTF-16")</code> will return this,
            otherwise it will return an <code>Encoding</code> for
            UTF-16 with big-endian byte ordering.  @param name a string
            specifying the IANA name of the encoding; this is case
            insensitive
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.getSingleByteEncoding(System.String)">
            Returns an <code>Encoding</code> for entities encoded with
            a single-byte encoding (an encoding in which each byte
            represents exactly one character).  @param map a string
            specifying the character represented by each byte; the
            string must have a length of 256;
            <code>map.charAt(b)</code> specifies the character encoded
            by byte <code>b</code>; bytes that do not represent any
            character should be mapped to <code>\uFFFD</code></member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.getInternalEncoding">
            Returns an <code>Encoding</code> object for use with
            internal entities.  This is a UTF-16 big endian encoding,
            except that newlines are assumed to have been normalized
            into line feed, so carriage return is treated like a space.
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.tokenizeProlog(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.Xpnet.Token)">
            Scans the first token of a byte subarray that contains part of a
            prolog.
            Returns one of the following integers according to the type of token
            that the subarray starts with:
            <ul><li><code>TOK.PI</code></li><li><code>TOK.XML_DECL</code></li><li><code>TOK.COMMENT</code></li><li><code>TOK.PARAM_ENTITY_REF</code></li><li><code>TOK.PROLOG_S</code></li><li><code>TOK.DECL_OPEN</code></li><li><code>TOK.DECL_CLOSE</code></li><li><code>TOK.NAME</code></li><li><code>TOK.NMTOKEN</code></li><li><code>TOK.POUND_NAME</code></li><li><code>TOK.OR</code></li><li><code>TOK.PERCENT</code></li><li><code>TOK.OPEN_PAREN</code></li><li><code>TOK.CLOSE_PAREN</code></li><li><code>TOK.OPEN_BRACKET</code></li><li><code>TOK.CLOSE_BRACKET</code></li><li><code>TOK.LITERAL</code></li><li><code>TOK.NAME_QUESTION</code></li><li><code>TOK.NAME_ASTERISK</code></li><li><code>TOK.NAME_PLUS</code></li><li><code>TOK.COND_SECT_OPEN</code></li><li><code>TOK.COND_SECT_CLOSE</code></li><li><code>TOK.CLOSE_PAREN_QUESTION</code></li><li><code>TOK.CLOSE_PAREN_ASTERISK</code></li><li><code>TOK.CLOSE_PAREN_PLUS</code></li><li><code>TOK.COMMA</code></li></ul>
            @exception EmptyTokenException if the subarray is empty
            @exception PartialTokenException if the subarray contains only part of
            a legal token
            @exception InvalidTokenException if the subarrary does not start
            with a legal token or part of one
            @exception EndOfPrologException if the subarray starts with the document
            element; <code>tokenizeContent</code> should be used on the remainder
            of the entity
            @exception ExtensibleTokenException if the subarray is a legal token
            but subsequent bytes in the same entity could be part of the token
            @see #TOK.PI
            @see #TOK.XML_DECL
            @see #TOK.COMMENT
            @see #TOK.PARAM_ENTITY_REF
            @see #TOK.PROLOG_S
            @see #TOK.DECL_OPEN
            @see #TOK.DECL_CLOSE
            @see #TOK.NAME
            @see #TOK.NMTOKEN
            @see #TOK.POUND_NAME
            @see #TOK.OR
            @see #TOK.PERCENT
            @see #TOK.OPEN_PAREN
            @see #TOK.CLOSE_PAREN
            @see #TOK.OPEN_BRACKET
            @see #TOK.CLOSE_BRACKET
            @see #TOK.LITERAL
            @see #TOK.NAME_QUESTION
            @see #TOK.NAME_ASTERISK
            @see #TOK.NAME_PLUS
            @see #TOK.COND_SECT_OPEN
            @see #TOK.COND_SECT_CLOSE
            @see #TOK.CLOSE_PAREN_QUESTION
            @see #TOK.CLOSE_PAREN_ASTERISK
            @see #TOK.CLOSE_PAREN_PLUS
            @see #TOK.COMMA
            @see ContentToken
            @see EmptyTokenException
            @see PartialTokenException
            @see InvalidTokenException
            @see ExtensibleTokenException
            @see EndOfPrologException
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.tokenizeAttributeValue(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.Xpnet.Token)">
            Scans the first token of a byte subarrary that contains part of
            literal attribute value.  The opening and closing delimiters
            are not included in the subarrary.
            Returns one of the following integers according to the type of
            token that the subarray starts with:
            <ul><li><code>TOK.DATA_CHARS</code></li><li><code>TOK.DATA_NEWLINE</code></li><li><code>TOK.ATTRIBUTE_VALUE_S</code></li><li><code>TOK.MAGIC_ENTITY_REF</code></li><li><code>TOK.ENTITY_REF</code></li><li><code>TOK.CHAR_REF</code></li><li><code>TOK.CHAR_PAIR_REF</code></li></ul>
            @exception EmptyTokenException if the subarray is empty
            @exception PartialTokenException if the subarray contains only part of
            a legal token
            @exception InvalidTokenException if the subarrary does not start
            with a legal token or part of one
            @exception ExtensibleTokenException if the subarray encodes just a carriage
            return ('\r')
            @see #TOK.DATA_CHARS
            @see #TOK.DATA_NEWLINE
            @see #TOK.ATTRIBUTE_VALUE_S
            @see #TOK.MAGIC_ENTITY_REF
            @see #TOK.ENTITY_REF
            @see #TOK.CHAR_REF
            @see #TOK.CHAR_PAIR_REF
            @see Token
            @see EmptyTokenException
            @see PartialTokenException
            @see InvalidTokenException
            @see ExtensibleTokenException
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.tokenizeEntityValue(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.Xpnet.Token)">
            Scans the first token of a byte subarrary that contains part of
            literal entity value.  The opening and closing delimiters
            are not included in the subarrary.
            Returns one of the following integers according to the type of
            token that the subarray starts with:
            <ul><li><code>TOK.DATA_CHARS</code></li><li><code>TOK.DATA_NEWLINE</code></li><li><code>TOK.PARAM_ENTITY_REF</code></li><li><code>TOK.MAGIC_ENTITY_REF</code></li><li><code>TOK.ENTITY_REF</code></li><li><code>TOK.CHAR_REF</code></li><li><code>TOK.CHAR_PAIR_REF</code></li></ul>
            @exception EmptyTokenException if the subarray is empty
            @exception PartialTokenException if the subarray contains only part of
            a legal token
            @exception InvalidTokenException if the subarrary does not start
            with a legal token or part of one
            @exception ExtensibleTokenException if the subarray encodes just a carriage
            return ('\r')
            @see #TOK.DATA_CHARS
            @see #TOK.DATA_NEWLINE
            @see #TOK.MAGIC_ENTITY_REF
            @see #TOK.ENTITY_REF
            @see #TOK.PARAM_ENTITY_REF
            @see #TOK.CHAR_REF
            @see #TOK.CHAR_PAIR_REF
            @see Token
            @see EmptyTokenException
            @see PartialTokenException
            @see InvalidTokenException
            @see ExtensibleTokenException
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.skipIgnoreSect(System.Byte[],System.Int32,System.Int32)">
             Skips over an ignored conditional section.
             The subarray starts following the <code>&lt;![ IGNORE [</code>.
            
             @return the index of the character following the closing
             <code>]]&gt;</code>
            
             @exception PartialTokenException if the subarray does not contain the
             complete ignored conditional section
             @exception InvalidTokenException if the ignored conditional section
             contains illegal characters
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.getPublicId(System.Byte[],System.Int32,System.Int32)">
            Checks that a literal contained in the specified byte subarray
            is a legal public identifier and returns a string with
            the normalized content of the public id.
            The subarray includes the opening and closing quotes.
            @exception InvalidTokenException if it is not a legal public identifier
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.matchesXMLstring(System.Byte[],System.Int32,System.Int32,System.String)">
            Returns true if the specified byte subarray is equal to the string.
            The string must contain only XML significant characters.
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.Encoding.skipS(System.Byte[],System.Int32,System.Int32)">
             Skips over XML whitespace characters at the start of the specified
             subarray.
            
             @return the index of the first non-whitespace character,
             <code>end</code> if there is the subarray is all whitespace
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.Encoding.charTypeTable">
            <summary />
        </member>
        <member name="P:agsXMPP.Xml.Xpnet.Encoding.MinBytesPerChar">
            Returns the minimum number of bytes required to represent a single
            character in this encoding.  The value will be 1, 2 or 4.
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.UTF8Encoding.#ctor">
            <summary>
            New tokenizer
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.UTF8Encoding.byteType(System.Byte[],System.Int32)">
            <summary>
            What is the type of the current byte?
            </summary>
            <param name="buf" />
            <param name="off" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.UTF8Encoding.byteToAscii(System.Byte[],System.Int32)">
            <summary>
            Current byte to ASCII char
            </summary>
            <param name="buf" />
            <param name="off" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.UTF8Encoding.charMatches(System.Byte[],System.Int32,System.Char)">
            <summary>
            c is a significant ASCII character
            </summary>
            <param name="buf" />
            <param name="off" />
            <param name="c" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.UTF8Encoding.byteType2(System.Byte[],System.Int32)">
            <summary>
            A 2 byte UTF-8 representation splits the characters 11 bits
            between the bottom 5 and 6 bits of the bytes.
            </summary>
            <param name="buf" />
            <param name="off" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.UTF8Encoding.convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary />
            <param name="sourceBuf" />
            <param name="sourceStart" />
            <param name="sourceEnd" />
            <param name="targetBuf" />
            <param name="targetStart" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.UTF8Encoding.movePosition(System.Byte[],System.Int32,System.Int32,agsXMPP.Xml.Xpnet.Position)">
            <summary />
            <param name="buf" />
            <param name="off" />
            <param name="end" />
            <param name="pos" />
        </member>
        <member name="T:agsXMPP.IO.StringWriterWithEncoding">
            <summary>
            This class is inherited from the StringWriter Class
            The standard StringWriter class supports no encoding
            With this Class we can set the Encoding of a StringWriter in the Constructor
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.privacy.RuleManager">
            <summary>
            Helper class for creating rules for communication blocking
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.BlockByJid(agsXMPP.Jid,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Block stanzas by Jid
            </summary>
            <param name="jidToBlock" />
            <param name="order" />
            <param name="stanza">stanzas you want to block</param>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.BlockByGroup(System.String,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Block stanzas for a given roster group
            </summary>
            <param name="group" />
            <param name="order" />
            <param name="stanza">stanzas you want to block</param>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.BlockBySubscription(agsXMPP.protocol.iq.roster.SubscriptionType,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Block stanzas by subscription type
            </summary>
            <param name="subType" />
            <param name="order" />
            <param name="stanza">stanzas you want to block</param>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.BlockGlobal(System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Block globally (all users) the given stanzas
            </summary>
            <param name="order" />
            <param name="stanza">stanzas you want to block</param>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.AllowByJid(agsXMPP.Jid,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Allow stanzas by Jid
            </summary>
            <param name="jidToBlock" />
            <param name="order" />
            <param name="stanza">stanzas you want to block</param>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.AllowByGroup(System.String,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Allow stanzas for a given roster group
            </summary>
            <param name="group" />
            <param name="order" />
            <param name="stanza">stanzas you want to block</param>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.privacy.RuleManager.AllowBySubscription(agsXMPP.protocol.iq.roster.SubscriptionType,System.Int32,agsXMPP.protocol.iq.privacy.Stanza)">
            <summary>
            Allow stanzas by subscription type
            </summary>
            <param name="subType" />
            <param name="order" />
            <param name="stanza">stanzas you want to block</param>
            <returns />
        </member>
        <member name="T:agsXMPP.protocol.x.rosterx.RosterX">
            <summary>
            Roster Item Exchange (JEP-0144)
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.rosterx.RosterX.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.x.rosterx.RosterX" /> class.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.rosterx.RosterX.GetRoster">
            <summary>
            Gets the roster.
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.x.rosterx.RosterX.AddRosterItem(agsXMPP.protocol.x.rosterx.RosterItem)">
            <summary>
            Adds a roster item.
            </summary>
            <param name="r">The r.</param>
        </member>
        <member name="T:agsXMPP.protocol.stream.Features">
            <summary>
            Summary description for Features.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.stream.Features.SupportsCompression">
            <summary>
            Is Stream Compression supported?
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.stream.Features.SupportsRegistration">
            <summary>
            Is Registration supported?
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.UnknownCondition">
            <summary>
            unknown error condition
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.BadFormat">
            <summary>
            the entity has sent XML that cannot be processed; this error MAY be used instead of the more specific XML-related errors, such as &lt;bad-namespace-prefix/&gt;, &lt;invalid-xml/&gt;, &lt;restricted-xml/&gt;, &lt;unsupported-encoding/&gt;, and &lt;xml-not-well-formed/&gt;, although the more specific errors are preferred.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.BadNamespacePrefix">
            <summary>
            the entity has sent a namespace prefix that is unsupported, or has sent no namespace prefix on an element that requires such a prefix (see XML Namespace Names and Prefixes (XML Namespace Names and Prefixes)).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.Conflict">
            <summary>
            the server is closing the active stream for this entity because a new stream has been initiated that conflicts with the existing stream.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.ConnectionTimeout">
            <summary>
            the entity has not generated any traffic over the stream for some period of time (configurable according to a local service policy).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.HostGone">
            <summary>
            the value of the 'to' attribute provided by the initiating entity in the stream header corresponds to a hostname that is no longer hosted by the server.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.HostUnknown">
            <summary>
            the value of the 'to' attribute provided by the initiating entity in the stream header does not correspond to a hostname that is hosted by the server.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.ImproperAddressing">
            <summary>
            a stanza sent between two servers lacks a 'to' or 'from' attribute (or the attribute has no value).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.InternalServerError">
            <summary>
            the server has experienced a misconfiguration or an otherwise-undefined internal error that prevents it from servicing the stream.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.InvalidFrom">
            <summary>
            the JID or hostname provided in a 'from' address does not match an authorized JID or validated domain negotiated between servers via SASL or dialback, or between a client and a server via authentication and resource binding.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.InvalidId">
            <summary>
            the stream ID or dialback ID is invalid or does not match an ID previously provided.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.InvalidNamespace">
            <summary>
            the streams namespace name is something other than "http://etherx.jabber.org/streams" or the dialback namespace name is something other than "jabber:server:dialback" (see XML Namespace Names and Prefixes (XML Namespace Names and Prefixes)).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.InvalidXml">
            <summary>
            the entity has sent invalid XML over the stream to a server that performs validation.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.NotAuthorized">
            <summary>
            the entity has attempted to send data before the stream has been authenticated, or otherwise is not authorized to perform an action related to stream negotiation; the receiving entity MUST NOT process the offending stanza before sending the stream error.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.PolicyViolation">
            <summary>
            the entity has violated some local service policy; the server MAY choose to specify the policy in the &lt;text/&gt; element or an application-specific condition element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.RemoteConnectionFailed">
            <summary>
            the server is unable to properly connect to a remote entity that is required for authentication or authorization.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.ResourceConstraint">
            <summary>
            the server lacks the system resources necessary to service the stream.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.RestrictedXml">
            <summary>
            the entity has attempted to send restricted XML features such as a comment, processing instruction, DTD, entity reference, or unescaped character (see Restrictions (Restrictions)).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.SeeOtherHost">
            <summary>
            the server will not provide service to the initiating entity but is redirecting traffic to another host; the server SHOULD specify the alternate hostname or IP address (which MUST be a valid domain identifier) as the XML character data of the &lt;see-other-host/&gt; element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.SystemShutdown">
            <summary>
            the server is being shut down and all active streams are being closed.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.UndefinedCondition">
            <summary>
            the error condition is not one of those defined by the other conditions in this list; this error condition SHOULD be used only in conjunction with an application-specific condition.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.UnsupportedEncoding">
            <summary>
            the initiating entity has encoded the stream in an encoding that is not supported by the server.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.UnsupportedStanzaType">
            <summary>
            the initiating entity has sent a first-level child of the stream that is not supported by the server.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.UnsupportedVersion">
            <summary>
            the value of the 'version' attribute provided by the initiating entity in the stream header specifies a version of XMPP that is not supported by the server; the server MAY specify the version(s) it supports in the &lt;text/&gt; element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.StreamErrorCondition.XmlNotWellFormed">
            <summary>
            the initiating entity has sent XML that is not well-formed as defined by the XML specs.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Error">
            <summary>
            Stream Errors &lt;stream:error&gt;
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.Error.Text">
            <summary>
                <para>
            The &lt;text/&gt; element is OPTIONAL. If included, it SHOULD be used only to provide descriptive or diagnostic information
            that supplements the meaning of a defined condition or application-specific condition. 
            </para>
                <para>
            It SHOULD NOT be interpreted programmatically by an application.
            It SHOULD NOT be used as the error message presented to a user, but MAY be shown in addition to the error message 
            associated with the included condition element (or elements).
            </para>
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.bind.Bind">
            <summary>
            Summary description for Bind.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.bind.Bind.Resource">
            <summary>
            The resource to bind
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.bind.Bind.Jid">
            <summary>
            The jid the server created
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.time.TimeIq">
            <summary>
            Summary description for TimeIq.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.html.Html.Body">
            <summary>
            The Body Element of the XHTML Message
            </summary>
        </member>
        <member name="T:agsXMPP.Net.SocketConnectionType">
            <summary>
            Summary description for SocketType.
            </summary>
        </member>
        <member name="F:agsXMPP.Net.SocketConnectionType.Direct">
            <summary>
            Direct TCP/IP Connection
            </summary>
        </member>
        <member name="F:agsXMPP.Net.SocketConnectionType.HttpPolling">
            <summary>
            A HTTP Polling Socket connection (JEP-0025)
            </summary>
        </member>
        <member name="F:agsXMPP.Net.SocketConnectionType.Bosh">
            <summary>
                <para>XEP-0124: Bidirectional-streams Over Synchronous HTTP (BOSH)</para>
                <para>http://www.xmpp.org/extensions/xep-0124.html</para>
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Open.#ctor">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Open.#ctor(System.String,System.Int64)">
            <summary />
            <param name="sid" />
            <param name="blocksize" />
        </member>
        <member name="P:agsXMPP.protocol.extensions.ibb.Open.BlockSize">
            <summary>
            Block size
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bookmarks.RosterNotes">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.RosterNotes.AddNote(agsXMPP.protocol.extensions.bookmarks.RosterNote)">
            <summary>
            Add a note to the storage object
            </summary>
            <param name="note">The note.</param>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.RosterNotes.AddNote(agsXMPP.Jid,System.DateTime,System.DateTime,System.String)">
            <summary>
            Add a note to the storage object
            </summary>
            <param name="jid" />
            <param name="cdate" />
            <param name="mdate" />
            <param name="note" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.RosterNotes.GetRosterNotes">
            <summary>
            get all roster notes
            </summary>
            <returns />
        </member>
        <member name="T:agsXMPP.IO.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br />
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="abyte">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="len">length of pattern to copy</param>
            <param name="dist">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.CopyStored(agsXMPP.IO.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="len">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dict">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="len">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:agsXMPP.IO.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:agsXMPP.IO.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="F:agsXMPP.Idn.NFKC.SBase">
            <summary>
            Entire hangul code copied from:
            http://www.unicode.org/unicode/reports/tr15/
            Several hangul specific constants
            </summary>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.NormalizeNFKC(System.String)">
            <summary>
            Applies NFKC normalization to a string.
            </summary>
            <param name="in">The string to normalize.</param>
            <returns> An NFKC normalized string.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.decomposeIndex(System.Char)">
            <summary>
            Returns the index inside the decomposition table, implemented
            using a binary search.
            </summary>
            <param name="c">Character to look up.</param>
            <returns> Index if found, -1 otherwise.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.combiningClass(System.Char)">
            <summary>
            Returns the combining class of a given character.
            </summary>
            <param name="c">The character.</param>
            <returns> The combining class.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.canonicalOrdering(System.Text.StringBuilder)">
            <summary>
            Rearranges characters in a stringbuffer in order to respect the
            canonical ordering properties.
            </summary>
            <param name="The">StringBuffer to rearrange.</param>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.composeIndex(System.Char)">
            <summary>
            Returns the index inside the composition table.		
            </summary>
            <param name="a">Character to look up.</param>
            <returns> Index if found, -1 otherwise.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.compose(System.Char,System.Char)">
            <summary>
            Tries to compose two characters canonically.
            </summary>
            <param name="a">First character.</param>
            <param name="b">Second character.</param>
            <returns> The composed character or -1 if no composition could be found.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.decomposeHangul(System.Char)">
            <summary>
            Decomposes a hangul character.
            </summary>
            <param name="s">A character to decompose.</param>
            <returns> A string containing the hangul decomposition of the input
            character. If no hangul decomposition can be found, a string
            containing the character itself is returned.</returns>
        </member>
        <member name="M:agsXMPP.Idn.NFKC.composeHangul(System.Char,System.Char)">
            <summary>
            Composes two hangul characters.
            </summary>
            <param name="a">First character.</param>
            <param name="b">Second character.</param>
            <returns> Returns the composed character or -1 if the two characters cannot be composed.</returns>
        </member>
        <member name="T:agsXMPP.Xml.Dom.Text">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.x.muc.iq.admin.AdminIq">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.x.Delay">
            <summary>
                <para>
            Delay class for Timestamps
            </para>
                <para>
            Mainly used in offline and groupchat messages. This is the time when the message was received by the server
            </para>
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.Field">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.GetValue">
            <summary>
            The value of the field.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.SetValue(System.String)">
            <summary />
            <param name="val" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.SetValueBool(System.Boolean)">
            <summary>
            Set the value of boolean fields
            </summary>
            <param name="val" />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.GetValueBool">
            <summary>
            Get the value of boolean fields
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.GetValueJid">
            <summary>
            Returns the value as Jif for the Jid fields. 
            Or null when the value is not a valid Jid.
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.AddValue(System.String)">
            <summary>
            Adds a value
            </summary>
            <remarks>
            you can call this function multiple times to add values to "multi" fields
            </remarks>
            <param name="val" />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.AddValues(System.String[])">
            <summary>
            Adds multiple values to the already existing values from a string array
            </summary>
            <param name="vals" />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.SetValues(System.String[])">
            <summary>
            Adds multiple values. All already existing values will be removed
            </summary>
            <param name="vals" />
        </member>
        <member name="M:agsXMPP.protocol.x.data.Field.GetValues">
            <summary>
            Gets all values for multi fields as Array
            </summary>
            <returns>string Array that contains all the values</returns>
        </member>
        <member name="P:agsXMPP.protocol.x.data.Field.IsRequired">
            <summary>
            Is this field a required field?
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.register.RegisterIq">
            <summary>
            Used for registering new usernames on Jabber/XMPP Servers
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.oob.Oob">
            <summary>
            Zusammenfassung für Oob.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.PubSub.Create">
            <summary>
            the Create Element of the Pubsub Element 
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.PubSub.Configure">
            <summary>
            The Configure Element of the PunSub Element
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.commands.Command.Node">
            <summary>
            Node is Required
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.commands.Command.Data">
            <summary>
            The X-Data Element
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.DnsType">
            <summary>
            The DNS TYPE (RFC1035 3.2.2/3).  Not all are supported
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.ANAME">
            <summary>
            a host address
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.NS">
            <summary>
            an authoritative name server
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.CNAME">
            <summary>
            the canonical name for an alias
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.SOA">
            <summary>
            marks the start of a zone of authority
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.WKS">
            <summary>
            a well known service description
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.PTR">
            <summary>
            a domain name pointer
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.HINFO">
            <summary>
            host information
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.MINFO">
            <summary>
            mailbox or mail list information
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.MX">
            <summary>
            mail exchange
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.TXT">
            <summary>
            text strings
            </summary>
        </member>
        <member name="F:agsXMPP.Net.Dns.DnsType.SRV">
            <summary>
            SRV Records
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.DnsClass">
            <summary>
            The DNS CLASS (RFC1035 3.2.4/5)
            Internet will be the one we'll be using (IN), the others are for completeness
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.ReturnCode">
            <summary>
            (RFC1035 4.1.1) These are the return codes the server can send back
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.Opcode">
            <summary>
            (RFC1035 4.1.1) These are the Query Types which apply to all questions in a request
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.MucManager">
            <summary>
            A helper class for Multi User Chat
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.Invite(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            Invite a contact to join a chatroom
            </summary>
            <param name="to">The Jid of the contact to invite</param>
            <param name="room">The Jid of the chatroom</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.Invite(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary>
            Invite a contact to join a chatroom
            </summary>
            <param name="to">The Jid of the contact to invite</param>
            <param name="room">The Jid of the chatroom</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.Invite(agsXMPP.Jid[],agsXMPP.Jid,System.String)">
            <summary>
            Invite multiple contacts to a chatroom
            </summary>
            <param name="jids" />
            <param name="room" />
            <param name="reason" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.Decline(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            Decline a groupchat invitation
            </summary>
            <param name="to">the jid which invited us</param>
            <param name="room">to room to which we send the decline (this is normally the same room we were invited to)</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.Decline(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary>
            Decline a groupchat invitation
            </summary>
            <param name="to">the jid which invited us</param>
            <param name="room">to room to which we send the decline (this is normally the same room we were invited to)</param>
            <param name="reason">reason why we decline the invitation</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.ChangeSubject(agsXMPP.Jid,System.String)">
            <summary>
            Change the subject of a room
            </summary>
            <param name="room" />
            <param name="newSubject" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.ChangeSubject(agsXMPP.Jid,System.String,System.String)">
            <summary>
            Change the subject of a room
            </summary>
            <param name="room" />
            <param name="newSubject" />
            <param name="body" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.ChangeNickname(agsXMPP.Jid,System.String)">
            <summary>
            Change the Nickname in a room
            </summary>
            <param name="room" />
            <param name="newNick" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.JoinRoom(agsXMPP.Jid,System.String)">
            <summary>
            Join a chatroom
            </summary>
            <param name="room">jid of the room to join</param>
            <param name="nickname">nickname to use in the room</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.JoinRoom(agsXMPP.Jid,System.String,System.Boolean)">
            <summary>
            Join a chatroom
            </summary>
            <param name="room">jid of the room to join</param>
            <param name="nickname">nickname to use in the room</param>
            <param name="disableHistory">true for joining without chat room history</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.JoinRoom(agsXMPP.Jid,System.String,System.String,System.Boolean)">
            <summary>
            Join a chatroom
            </summary>
            <param name="room">jid of the room to join</param>
            <param name="nickname">nickname to use in the room</param>
            <param name="password">password for password protected chat rooms</param>
            <param name="disableHistory">true for joining without chat room history</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.LeaveRoom(agsXMPP.Jid,System.String)">
            <summary>
            Leave a conference room
            </summary>
            <param name="room" />
            <param name="nickname" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.AcceptDefaultConfiguration(agsXMPP.Jid)">
            <summary>
            create an "instant room". This means you accept the default configuration and dont want to configure the room.
            </summary>
            <param name="room" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.AcceptDefaultConfiguration(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            create an "instant room". This means you accept the default configuration and dont want to configure the room.
            </summary>
            <param name="room" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.AcceptDefaultConfiguration(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            create an "instant room". This means you accept the default configuration and dont want to configure the room.
            </summary>
            <param name="room" />
            <param name="cb" />
            <param name="cbArgs" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestConfigurationForm(agsXMPP.Jid)">
            <summary>
            Request the configuration form of a chatroom.
            You can request the from when creating a new room. or at any time later if you want to change the room configuration.
            Only room owners can request this from. Otherwise the service must return a 403 forbidden error
            </summary>
            <param name="room" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestConfigurationForm(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            Request the configuration form of a chatroom.
            You can request the from when creating a new room. or at any time later if you want to change the room configuration.
            Only room owners can request this from. Otherwise the service must return a 403 forbidden error
            </summary>
            <param name="room" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestConfigurationForm(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            Request the configuration form of a chatroom.
            You can request the from when creating a new room. or at any time later if you want to change the room configuration.
            Only room owners can request this from. Otherwise the service must return a 403 forbidden error
            </summary>
            <param name="room" />
            <param name="cb" />
            <param name="cbArgs" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.KickOccupant(agsXMPP.Jid,System.String)">
            <summary>
            Kick a occupant
            A moderator has permissions kick a visitor or participant from a room.
            The kick is normally performed based on the occupant's room nickname (though it MAY be based on the full JID)
            and is completed by setting the role of a participant or visitor to a value of "none".
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname">Nickname od the occupant to kick</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.KickOccupant(agsXMPP.Jid,System.String,System.String)">
            <summary>
            Kick a occupant
            A moderator has permissions kick a visitor or participant from a room.
            The kick is normally performed based on the occupant's room nickname (though it MAY be based on the full JID)
            and is completed by setting the role of a participant or visitor to a value of "none".
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname">Nickname od the occupant to kick</param>
            <param name="reason">A optional reason why you kick this occupant</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.KickOccupant(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            Kick a occupant
            A moderator has permissions kick a visitor or participant from a room.
            The kick is normally performed based on the occupant's room nickname (though it MAY be based on the full JID)
            and is completed by setting the role of a participant or visitor to a value of "none".
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname">Nickname od the occupant to kick</param>
            <param name="reason">A optional reason why you kick this occupant</param>
            <param name="cb">Callback which is invoked with the result to this iq</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.KickOccupant(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            Kick a occupant
            A moderator has permissions kick a visitor or participant from a room.
            The kick is normally performed based on the occupant's room nickname (though it MAY be based on the full JID)
            and is completed by setting the role of a participant or visitor to a value of "none".
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname">Nickname od the occupant to kick</param>
            <param name="reason">A optional reason why you kick this occupant</param>
            <param name="cb">Callback which is invoked with the result to this iq</param>
            <param name="cbArg">Callback which is invoked with the result to this iq</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantVoice(agsXMPP.Jid,System.String)">
            <summary />
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantVoice(agsXMPP.Jid,System.String,System.String)">
            <summary />
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname" />
            <param name="reason" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantVoice(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary />
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname" />
            <param name="reason" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantVoice(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary />
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname" />
            <param name="reason" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeVoice(agsXMPP.Jid,System.String)">
            <summary>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak.
            The moderator can revoke voice from a participant by changing the participant's role to "visitor":
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeVoice(agsXMPP.Jid,System.String,System.String)">
            <summary>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak.
            The moderator can revoke voice from a participant by changing the participant's role to "visitor":
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname" />
            <param name="reason" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeVoice(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak.
            The moderator can revoke voice from a participant by changing the participant's role to "visitor":
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname" />
            <param name="reason" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeVoice(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            In a moderated room, a moderator may want to revoke a participant's privileges to speak.
            The moderator can revoke voice from a participant by changing the participant's role to "visitor":
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="nickname" />
            <param name="reason" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestVoiceList(agsXMPP.Jid)">
            <summary>
            A moderator in a moderated room may want to modify the voice list. 
            To do so, the moderator first requests the voice list by querying the room for all occupants 
            with a role of 'participant'.
            The service MUST then return the voice list to the moderator; each item MUST include 
            the 'nick' and 'role' attributes and SHOULD include the 'affiliation' and 'jid' attributes.
            The moderator MAY then modify the voice list. In order to do so, the moderator MUST send the 
            changed items (i.e., only the "delta") back to the service; each item MUST include 
            the 'nick' attribute and 'role' attribute (normally set to a value of "participant" or "visitor") 
            but SHOULD NOT include the 'jid' attribute and MUST NOT include the 'affiliation' attribute 
            (which is used to manage affiliations such as owner rather than the participant role),
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestVoiceList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            A moderator in a moderated room may want to modify the voice list. 
            To do so, the moderator first requests the voice list by querying the room for all occupants 
            with a role of 'participant'.
            The service MUST then return the voice list to the moderator; each item MUST include 
            the 'nick' and 'role' attributes and SHOULD include the 'affiliation' and 'jid' attributes.
            The moderator MAY then modify the voice list. In order to do so, the moderator MUST send the 
            changed items (i.e., only the "delta") back to the service; each item MUST include 
            the 'nick' attribute and 'role' attribute (normally set to a value of "participant" or "visitor") 
            but SHOULD NOT include the 'jid' attribute and MUST NOT include the 'affiliation' attribute 
            (which is used to manage affiliations such as owner rather than the participant role),        
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestVoiceList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            A moderator in a moderated room may want to modify the voice list. 
            To do so, the moderator first requests the voice list by querying the room for all occupants 
            with a role of 'participant'.
            The service MUST then return the voice list to the moderator; each item MUST include 
            the 'nick' and 'role' attributes and SHOULD include the 'affiliation' and 'jid' attributes.
            The moderator MAY then modify the voice list. In order to do so, the moderator MUST send the 
            changed items (i.e., only the "delta") back to the service; each item MUST include 
            the 'nick' attribute and 'role' attribute (normally set to a value of "participant" or "visitor") 
            but SHOULD NOT include the 'jid' attribute and MUST NOT include the 'affiliation' attribute 
            (which is used to manage affiliations such as owner rather than the participant role),        
            </summary>
            <param name="room">Jid of the room to which this iq is sent</param>
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.BanUser(agsXMPP.Jid,agsXMPP.Jid)">
            <summary />
            <param name="room" />
            <param name="user" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.BanUser(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary />
            <param name="room" />
            <param name="user" />
            <param name="reason" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.BanUser(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.IqCB)">
            <summary />
            <param name="room" />
            <param name="user" />
            <param name="reason" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.BanUser(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.IqCB,System.Object)">
            <summary />
            <param name="room" />
            <param name="user" />
            <param name="reason" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestBanList(agsXMPP.Jid)">
            <summary>
            A room admin may want to modify the ban list. 
            <remarks>
            Note: The ban list is always based on a user's bare JID, 
            although a nick (perhaps the last room nickname associated with that JID) MAY be included for convenience. 
            To modify the list of banned JIDs, the admin first requests the ban list by querying the room for all 
            users with an affiliation of 'outcast'.
            </remarks></summary>
            <param name="room" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestBanList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            A room admin may want to modify the ban list. 
            <remarks>
            Note: The ban list is always based on a user's bare JID, 
            although a nick (perhaps the last room nickname associated with that JID) MAY be included for convenience. 
            To modify the list of banned JIDs, the admin first requests the ban list by querying the room for all 
            users with an affiliation of 'outcast'.
            </remarks></summary>
            <param name="room" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestBanList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            A room admin may want to modify the ban list. 
            <remarks>
            Note: The ban list is always based on a user's bare JID, 
            although a nick (perhaps the last room nickname associated with that JID) MAY be included for convenience. 
            To modify the list of banned JIDs, the admin first requests the ban list by querying the room for all 
            users with an affiliation of 'outcast'.
            </remarks></summary>
            <param name="room" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantAdminPrivileges(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            Grant administrative privileges to a member or unaffiliated user.
            This could be done by an room owner
            </summary>
            <param name="room" />
            <param name="user" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantAdminPrivileges(agsXMPP.Jid,agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            Grant administrative privileges to a member or unaffiliated user.
            This could be done by an room owner
            </summary>
            <param name="room" />
            <param name="user" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantAdminPrivileges(agsXMPP.Jid,agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            Grant administrative privileges to a member or unaffiliated user.
            This could be done by an room owner
            </summary>
            <param name="room" />
            <param name="user" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room" />
            <param name="user" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room" />
            <param name="user" />
            <param name="reason" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.IqCB)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room" />
            <param name="user" />
            <param name="reason" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room" />
            <param name="user" />
            <param name="reason" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,System.String)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room" />
            <param name="nickname" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,System.String,System.String)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room" />
            <param name="nickname" />
            <param name="reason" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room" />
            <param name="nickname" />
            <param name="reason" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantMembership(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            An admin can grant membership to a user; 
            this is done by changing the user's affiliation to "member" 
            (normally based on nick if the user is in the room, or on bare JID if not; 
            in either case, if the nick is provided, that nick becomes the user's default nick in the room
            if that functionality is supported by the implementation)
            </summary>
            <param name="room" />
            <param name="nickname" />
            <param name="reason" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantOwnershipPrivileges(agsXMPP.Jid,agsXMPP.Jid)">
            <summary>
            If allowed by an implementation, an owner MAY grant ownership privileges to another user.        
            </summary>
            <param name="room" />
            <param name="user" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantOwnershipPrivileges(agsXMPP.Jid,agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            If allowed by an implementation, an owner MAY grant ownership privileges to another user.        
            </summary>
            <param name="room" />
            <param name="user" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantOwnershipPrivileges(agsXMPP.Jid,agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            If allowed by an implementation, an owner MAY grant ownership privileges to another user.        
            </summary>
            <param name="room" />
            <param name="user" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeMembership(agsXMPP.Jid,System.String)">
            <summary>
            An admin may want to revoke a user's membership
            this is done by changing the user's affiliation to "none"
            </summary>
            <param name="room" />
            <param name="nickname" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeMembership(agsXMPP.Jid,System.String,System.String)">
            <summary>
            An admin may want to revoke a user's membership
            this is done by changing the user's affiliation to "none"
            </summary>
            <param name="room" />
            <param name="nickname" />
            <param name="reason" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeMembership(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            An admin may want to revoke a user's membership
            this is done by changing the user's affiliation to "none"
            </summary>
            <param name="room" />
            <param name="nickname" />
            <param name="reason" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RevokeMembership(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            An admin may want to revoke a user's membership
            this is done by changing the user's affiliation to "none"
            </summary>
            <param name="room" />
            <param name="nickname" />
            <param name="reason" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestAdminList(agsXMPP.Jid)">
            <summary>
            Request the list of admins. This could be done by the room owner
            </summary>
            <param name="room" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestAdminList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            Request the list of admins. This could be done by the room owner
            </summary>
            <param name="room" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestAdminList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            Request the list of admins. This could be done by the room owner
            </summary>
            <param name="room" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestOwnerList(agsXMPP.Jid)">
            <summary>
            Request the owner list of a room
            </summary>
            <param name="room" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestOwnerList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            Request the owner list of a room
            </summary>
            <param name="room" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestOwnerList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            Request the owner list of a room
            </summary>
            <param name="room" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestMemberList(agsXMPP.Jid)">
            <summary>
            In the context of a members-only room, the member list is essentially a "whitelist" of people 
            who are allowed to enter the room. Anyone who is not a member is effectively banned from entering the room, 
            even if their affiliation is not "outcast".
            In the context of an open room, the member list is simply a list of users (bare JID and reserved nick) 
            who are registered with the room. Such users may appear in a room roster, have their room nickname reserved, 
            be returned in search results or FAQ queries, and the like.
            It is RECOMMENDED that only room admins have the privilege to modify the member list in members-only rooms. 
            To do so, the admin first requests the member list by querying the room for all users with an affiliation of "member"
            </summary>
            <param name="room" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestMemberList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            In the context of a members-only room, the member list is essentially a "whitelist" of people 
            who are allowed to enter the room. Anyone who is not a member is effectively banned from entering the room, 
            even if their affiliation is not "outcast".
            In the context of an open room, the member list is simply a list of users (bare JID and reserved nick) 
            who are registered with the room. Such users may appear in a room roster, have their room nickname reserved, 
            be returned in search results or FAQ queries, and the like.
            It is RECOMMENDED that only room admins have the privilege to modify the member list in members-only rooms. 
            To do so, the admin first requests the member list by querying the room for all users with an affiliation of "member"
            </summary>
            <param name="room" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestMemberList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            In the context of a members-only room, the member list is essentially a "whitelist" of people 
            who are allowed to enter the room. Anyone who is not a member is effectively banned from entering the room, 
            even if their affiliation is not "outcast".
            In the context of an open room, the member list is simply a list of users (bare JID and reserved nick) 
            who are registered with the room. Such users may appear in a room roster, have their room nickname reserved, 
            be returned in search results or FAQ queries, and the like.
            It is RECOMMENDED that only room admins have the privilege to modify the member list in members-only rooms. 
            To do so, the admin first requests the member list by querying the room for all users with an affiliation of "member"
            </summary>
            <param name="room" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantModeratorPrivileges(agsXMPP.Jid,System.String)">
            <summary>
            An admin may want to grant moderator privileges to a participant or visitor
            this is done by changing the user's role to "moderator"
            </summary>
            <param name="room" />
            <param name="nickname" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantModeratorPrivileges(agsXMPP.Jid,System.String,System.String)">
            <summary>
            An admin may want to grant moderator privileges to a participant or visitor
            this is done by changing the user's role to "moderator"
            </summary>
            <param name="room" />
            <param name="nickname" />
            <param name="reason" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantModeratorPrivileges(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB)">
            <summary>
            An admin may want to grant moderator privileges to a participant or visitor
            this is done by changing the user's role to "moderator"
            </summary>
            <param name="room" />
            <param name="nickname" />
            <param name="reason" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.GrantModeratorPrivileges(agsXMPP.Jid,System.String,System.String,agsXMPP.IqCB,System.Object)">
            <summary>
            An admin may want to grant moderator privileges to a participant or visitor
            this is done by changing the user's role to "moderator"
            </summary>
            <param name="room" />
            <param name="nickname" />
            <param name="reason" />
            <param name="cb" />
            <param name="cbArg" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestModeratorList(agsXMPP.Jid)">
            <summary>
            Requests the moderator list.
            </summary>
            <param name="room">The room.</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestModeratorList(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
            Requests the moderator list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">The cb.</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.RequestModeratorList(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
            Requests the moderator list.
            </summary>
            <param name="room">The room.</param>
            <param name="cb">The cb.</param>
            <param name="cbArg">The cb arg.</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.CreateReservedRoom(agsXMPP.Jid)">
            <summary>
            Creates a reserved room. The MUC server replies to this request either with an error if the room already exists 
            or another error occured. Or with the configuration for, for the reserved room which you have submit in the
            second step
            </summary>
            <param name="room">Jid of the room to create</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.CreateReservedRoom(agsXMPP.Jid,agsXMPP.IqCB)">
            <summary>
                <para>
            Creates a reserved room. The MUC server replies to this request either with an error if the room already exists 
            or another error occured. Or with the configuration for, for the reserved room which you have submit in the
            second step.
            </para>
            </summary>
            <param name="room">Jid of the room to create</param>
            <param name="cb">callback for the response</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.MucManager.CreateReservedRoom(agsXMPP.Jid,agsXMPP.IqCB,System.Object)">
            <summary>
                <para>
            Creates a reserved room. The MUC server replies to this request either with an error if the room already exists 
            or another error occured. Or with the configuration for, for the reserved room which you have submit in the
            second step.
            </para>
            </summary>
            <param name="room">Jid of the room to create</param>
            <param name="cb">callback for the response</param>
            <param name="cbArg">optional callback arguments</param>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.aborted">
            <summary>
            The receiving entity acknowledges an <abort /> element sent by the initiating entity; sent in reply to the <abort /> element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.incorrect_encoding">
            <summary>
            The data provided by the initiating entity could not be processed because the [BASE64] (Josefsson, S., “The Base16, Base32, and Base64 Data Encodings,” July 2003.) encoding is incorrect (e.g., because the encoding does not adhere to the definition in Section 3 of [BASE64] (Josefsson, S., “The Base16, Base32, and Base64 Data Encodings,” July 2003.)); sent in reply to a <response /> element or an <auth /> element with initial response data.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.invalid_authzid">
            <summary>
            The authzid provided by the initiating entity is invalid, either because it is incorrectly formatted or because the initiating entity does not have permissions to authorize that ID; sent in reply to a <response /> element or an <auth /> element with initial response data.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.invalid_mechanism">
            <summary>
            The initiating entity did not provide a mechanism or requested a mechanism that is not supported by the receiving entity; sent in reply to an <auth /> element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.mechanism_too_weak">
            <summary>
            The mechanism requested by the initiating entity is weaker than server policy permits for that initiating entity; sent in reply to a <response /> element or an <auth /> element with initial response data.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.not_authorized">
            <summary>
            The authentication failed because the initiating entity did not provide valid credentials (this includes but is not limited to the case of an unknown username); sent in reply to a <response /> element or an <auth /> element with initial response data.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.sasl.FailureCondition.temporary_auth_failure">
            <summary>
            The authentication failed because of a temporary error condition within the receiving entity; sent in reply to an <auth /> element or <response /> element.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.register.RegisterEventArgs.Auto">
            <summary>
            Set Auto to true if the library should register automatically
            Set it to false if you want to fill out the registration fields manual
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.browse.BrowseIq">
            <summary>
            Summary description for BrowseIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.ibb.Data">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Data.#ctor">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.extensions.ibb.Data.#ctor(System.String,System.Int32)">
            <summary />
            <param name="sid" />
            <param name="seq" />
        </member>
        <member name="P:agsXMPP.protocol.extensions.ibb.Data.Sequence">
            <summary>
            the sequence
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.caps.Capabilities">
            <summary>
                <para>
            It is often desirable for a Jabber/XMPP application (commonly but not necessarily a client) to take different actions 
            depending on the capabilities of another application from which it receives presence information. Examples include: 
            </para>
                <list type="bullet">
                    <item>
                        <term>Showing a different set of icons depending on the capabilities of other clients.</term>
                    </item>
                    <item>
                        <term>Not sending XHTML-IM content to plaintext clients such as cell phones.</term>
                    </item>
                    <item>
                        <term>Allowing the initiation of Voice over IP (VoIP) sessions only to clients that support VoIP.</term>
                    </item>
                    <item>
                        <term>Not showing a "Send a File" button if another user's client does not support File Transfer.</term>
                    </item>
                </list>
                <para>
            Recently, some existing Jabber clients have begun sending Software Version requests to each entity from which they 
            receive presence. That solution is impractical on a larger scale, particularly for users or applications with large rosters. 
            This document proposes a more robust and scalable solution: namely, a presence-based mechanism for exchanging information 
            about entity capabilities.
            </para>
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.caps.Capabilities.#ctor">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.extensions.caps.Capabilities.#ctor(System.String,System.String)">
            <summary />
            <param name="version" />
            <param name="node" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.caps.Capabilities.SetVersion(agsXMPP.protocol.iq.disco.DiscoInfo)">
            <summary>
            Builds and sets the caps ver attribute from a DiscoInfo object
            </summary>
            <param name="di" />
        </member>
        <member name="P:agsXMPP.protocol.extensions.caps.Capabilities.Node">
            <summary>
            Required node attribute
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.caps.Capabilities.Version">
            <summary>
            Required version attribute
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.caps.Capabilities.Hash">
            <summary>
            Required Hash-Type.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.Message">
            <summary>
            Summary description for Message.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Message.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="T:agsXMPP.Collections.BareJidComparer">
            <summary />
        </member>
        <member name="M:agsXMPP.Collections.BareJidComparer.Compare(System.Object,System.Object)">
            <summary />
            <param name="x" />
            <param name="y" />
            <returns />
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Muc">
            <summary>
            Summary description for MucUser.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.Muc.History">
            <summary>
            The History object
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.iq.admin.Admin">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Admin.AddItem(agsXMPP.protocol.x.muc.iq.admin.Item)">
            <summary />
            <param name="item" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Admin.AddItems(agsXMPP.protocol.x.muc.iq.admin.Item[])">
            <summary>
            Adds the items.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Admin.GetItems">
            <summary />
            <returns />
        </member>
        <member name="T:agsXMPP.protocol.tls.Failure">
            <summary>
            Summary description for Failure.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.storage.AvatarIq">
            <summary>
            Summary description for AvatarIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Success">
            <summary>
            Summary description for Success.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.roster.Roster">
            <summary>
            Zusammenfassung für Roster.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.private.PrivateIq">
            <summary>
            Summary description for PrivateIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoItemsIq">
            <summary>
            Discovering the Items Associated with a Jabber Entity
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoItems">
            <summary>
            Discovering the Items Associated with a Jabber Entity
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoItems.Node">
            <summary>
            The node to discover (Optional)
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoInfo">
            <summary>
            Discovering Information About a Jabber Entity
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.disco.DiscoInfo.GetFeatures">
            <summary>
            Gets all Features
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.disco.DiscoInfo.HasFeature(System.String)">
            <summary>
            Check if a feature is supported
            </summary>
            <param name="var" />
            <returns />
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoInfo.Node">
            <summary>
            Optional node Attrib
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.avatar.AvatarIq">
            <summary>
            Summary description for AvatarIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.auth.Auth">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.iq.auth.Auth.SetAuthDigest(System.String,System.String,System.String)">
            <summary />
            <param name="username" />
            <param name="password" />
            <param name="StreamID" />
        </member>
        <member name="M:agsXMPP.protocol.iq.auth.Auth.SetAuthPlain(System.String,System.String)">
            <summary />
            <param name="username" />
            <param name="password" />
        </member>
        <member name="M:agsXMPP.protocol.iq.auth.Auth.SetAuth(System.String,System.String,System.String)">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.extensions.filetransfer.Range">
            <summary>
            When range is sent in the offer, it should have no attributes. 
            This signifies that the sender can do ranged transfers.
            When no range element is sent in the Stream Initiation result, the Sender MUST send the complete file starting at offset 0.
            More generally, data is sent over the stream byte for byte starting at the offset position for the length specified.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.Range.Offset">
            <summary>
            Specifies the position, in bytes, to start transferring the file data from.
            This defaults to zero (0) if not specified.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.Range.Length">
            <summary>
            Specifies the number of bytes to retrieve starting at offset.
            This defaults to the length of the file from offset to the end.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.Item.Id">
            <summary>
            The optional id
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Inactive">
            <summary>
            User has not been actively participating in the chat session.
            User has not interacted with the chat interface for an intermediate period of time (e.g., 30 seconds).
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.chatstates.Inactive.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.extensions.chatstates.Inactive" /> class.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Gone">
            <summary>
            User has effectively ended their participation in the chat session.
            User has not interacted with the chat interface, system, or device for a relatively long period of time 
            (e.g., 2 minutes), or has terminated the chat interface (e.g., by closing the chat window).
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.chatstates.Gone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.extensions.chatstates.Gone" /> class.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.time.Time.#ctor">
            <summary>
            XEP-0202: Entity Time
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.time.Time.SetDateTimeNow">
            <summary>
            Sets the utc offset and time automatically.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.time.Time.UtcOffset">
            <summary>
            Gets or sets the UTC offset.
            </summary>
            <value>The UTC offset.</value>
        </member>
        <member name="P:agsXMPP.protocol.time.Time.DateTime">
            <summary>
            Gets or sets the date time.
            </summary>
            <value>The date time.</value>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bytestreams.ByteStream">
            <summary>
            ByteStreams
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.AddStreamHost">
            <summary>
            Add a StreamHost
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.AddStreamHost(agsXMPP.protocol.extensions.bytestreams.StreamHost)">
            <summary>
            Add a StreamHost
            </summary>
            <param name="sh" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.AddStreamHost(agsXMPP.Jid,System.String)">
            <summary>
            Add a StreamHost
            </summary>
            <param name="jid" />
            <param name="host" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.AddStreamHost(agsXMPP.Jid,System.String,System.Int32)">
            <summary>
            Add a StreamHost
            </summary>
            <param name="jid" />
            <param name="host" />
            <param name="port" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.AddStreamHost(agsXMPP.Jid,System.String,System.Int32,System.String)">
            <summary>
            Add a StreamHost
            </summary>
            <param name="jid" />
            <param name="host" />
            <param name="port" />
            <param name="zeroconf" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bytestreams.ByteStream.GetStreamHosts">
            <summary>
            Get the list of streamhosts
            </summary>
            <returns />
        </member>
        <member name="P:agsXMPP.protocol.extensions.bytestreams.ByteStream.Activate">
            <summary>
            The activate Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.Presence">
            <summary>
            Summary description for Presence.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Presence.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.TOK">
            <summary>
            Tokens that might have been found
            </summary>
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.DATA_CHARS">
            Represents one or more characters of data.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.DATA_NEWLINE">
            Represents a newline (CR, LF or CR followed by LF) in data.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.START_TAG_NO_ATTS">
            Represents a complete start-tag <code>&lt;name&gt;</code>,
            that doesn't have any attribute specifications.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.START_TAG_WITH_ATTS">
            Represents a complete start-tag <code>&lt;name
            att="val"&gt;</code>, that contains one or more
            attribute specifications.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.EMPTY_ELEMENT_NO_ATTS">
            Represents an empty element tag <code>&lt;name/&gt;</code>,
            that doesn't have any attribute specifications.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.EMPTY_ELEMENT_WITH_ATTS">
            Represents an empty element tag <code>&lt;name
            att="val"/&gt;</code>, that contains one or more
            attribute specifications.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.END_TAG">
            Represents a complete end-tag <code>&lt;/name&gt;</code>.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.CDATA_SECT_OPEN">
            Represents the start of a CDATA section
            <code>&lt;![CDATA[</code>.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.CDATA_SECT_CLOSE">
            Represents the end of a CDATA section <code>]]&gt;</code>.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.ENTITY_REF">
            Represents a general entity reference.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.MAGIC_ENTITY_REF">
            Represents a general entity reference to a one of the 5
            predefined entities <code>amp</code>, <code>lt</code>,
            <code>gt</code>, <code>quot</code>, <code>apos</code>.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.CHAR_REF">
            Represents a numeric character reference (decimal or
            hexadecimal), when the referenced character is less
            than or equal to 0xFFFF and so is represented by a
            single char.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.CHAR_PAIR_REF">
            Represents a numeric character reference (decimal or
            hexadecimal), when the referenced character is greater
            than 0xFFFF and so is represented by a pair of chars.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.PI">
            Represents a processing instruction.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.XML_DECL">
            Represents an XML declaration or text declaration (a
            processing instruction whose target is
            <code>xml</code>).
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.COMMENT">
            Represents a comment <code>&lt;!-- comment --&gt;</code>.
            This can occur both in the prolog and in content.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.ATTRIBUTE_VALUE_S">
            Represents a white space character in an attribute
            value, excluding white space characters that are part
            of line boundaries.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.PARAM_ENTITY_REF">
            Represents a parameter entity reference in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.PROLOG_S">
            Represents whitespace in the prolog.
            The token contains one or more whitespace characters.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.DECL_OPEN">
            Represents <code>&lt;!NAME</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.DECL_CLOSE">
            Represents <code>&gt;</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.NAME">
            Represents a name in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.NMTOKEN">
            Represents a name token in the prolog that is not a name.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.POUND_NAME">
            Represents <code>#NAME</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.OR">
            Represents <code>|</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.PERCENT">
            Represents a <code>%</code> in the prolog that does not start
            a parameter entity reference.
            This can occur in an entity declaration.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.OPEN_PAREN">
            Represents a <code>(</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.CLOSE_PAREN">
            Represents a <code>)</code> in the prolog that is not
            followed immediately by any of
             <code>*</code>, <code>+</code> or <code>?</code>.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.OPEN_BRACKET">
            Represents <code>[</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.CLOSE_BRACKET">
            Represents <code>]</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.LITERAL">
            Represents a literal (EntityValue, AttValue, SystemLiteral or
            PubidLiteral).
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.NAME_QUESTION">
            Represents a name followed immediately by <code>?</code>.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.NAME_ASTERISK">
            Represents a name followed immediately by <code>*</code>.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.NAME_PLUS">
            Represents a name followed immediately by <code>+</code>.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.COND_SECT_OPEN">
            Represents <code>&lt;![</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.COND_SECT_CLOSE">
            Represents <code>]]&gt;</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.CLOSE_PAREN_QUESTION">
            Represents <code>)?</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.CLOSE_PAREN_ASTERISK">
            Represents <code>)*</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.CLOSE_PAREN_PLUS">
            Represents <code>)+</code> in the prolog.
        </member>
        <member name="F:agsXMPP.Xml.Xpnet.TOK.COMMA">
            Represents <code>,</code> in the prolog.
        </member>
        <member name="T:agsXMPP.protocol.stream.feature.Register">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Photo">
            <summary>
            Vcard Photo
            When you dont want System.Drawing in the Lib just remove the photo stuff
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Photo.SetImage(System.String)">
            <summary>
            Sets the URL of an external image
            </summary>
            <param name="url" />
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Photo.Type">
            <summary>
            The Media Type, Only available when BINVAL
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Photo.ImageFormat">
            <summary>
            returns the image format or null for unknown formats or TYPES
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Photo.Image">
            <summary>
            gets or sets the from internal (binary) or external source
            When external then it trys to get the image with a Webrequest
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.shim.Header">
            <summary>
            JEP-0131: Stanza Headers and Internet Metadata (SHIM)
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.CreateNode(agsXMPP.Jid,System.String)">
            <summary>
            Create a Node with default configuration
            </summary>
            <param name="to" />
            <param name="node" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.CreateNode(agsXMPP.Jid,agsXMPP.Jid,System.String,System.Boolean)">
            <summary>
            Create a Node
            </summary>
            <param name="to" />
            <param name="from" />
            <param name="defaultConfig" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to" />
            <param name="node" />
            <param name="payload" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item,agsXMPP.IqCB)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to" />
            <param name="node" />
            <param name="payload" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item,agsXMPP.IqCB,System.Object)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to" />
            <param name="node" />
            <param name="payload" />
            <param name="cb" />
            <param name="cbArgs" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to" />
            <param name="from" />
            <param name="node" />
            <param name="payload" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item,agsXMPP.IqCB)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to" />
            <param name="from" />
            <param name="node" />
            <param name="payload" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.PublishItem(agsXMPP.Jid,agsXMPP.Jid,System.String,agsXMPP.protocol.extensions.pubsub.Item,agsXMPP.IqCB,System.Object)">
            <summary>
            Publish a payload to a Node
            </summary>
            <param name="to" />
            <param name="from" />
            <param name="node" />
            <param name="payload" />
            <param name="cb" />
            <param name="cbArgs" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.Subscribe(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary />
            <param name="to">Jid of the Publish Subscribe Service</param>
            <param name="subscribe">Jid which should be subscribed</param>
            <param name="node">node to which we want to subscribe</param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.PubSubManager.Unsubscribe(agsXMPP.Jid,agsXMPP.Jid,System.String)">
            <summary />
            <param name="to">Jid of the Publish Subscribe Service</param>
            <param name="subscribe">Jid which should be subscribed</param>
            <param name="node">node to which we want to subscribe</param>
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Subscribers.AddSubscriber">
            <summary>
            Add a Subscriber
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Subscribers.AddSubscriber(agsXMPP.protocol.extensions.pubsub.owner.Subscriber)">
            <summary>
            Add a Subscriber
            </summary>
            <param name="subscriber">the Subscriber to add</param>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.pubsub.owner.Subscribers.GetSubscribers">
            <summary />
            <returns />
        </member>
        <member name="P:agsXMPP.protocol.extensions.pubsub.owner.Pending.Data">
            <summary>
            The x-Data Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.Stream">
            <summary>
            stream:stream Element
            This is the first Element we receive from the server.
            It encloses our whole xmpp session.
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.IPConfigurationInformation">
            <summary>
            Summary description for IPConfigurationInformation.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.agent.Agent">
            <summary>
            Zusammenfassung für Agent.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.agent.Agent.CanRegister">
            <summary>
            Can we register this agent/transport
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.agent.Agent.CanSearch">
            <summary>
            Can we search thru this agent/transport
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.agent.Agent.IsTransport">
            <summary>
            Is this agent a transport?
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.agent.Agent.IsGroupchat">
            <summary>
            Is this agent for groupchat
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.ping.PingIq">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.extensions.msgreceipts.Received">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.extensions.bookmarks.StorageIq">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.extensions.bookmarks.Storage">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConference(agsXMPP.protocol.extensions.bookmarks.Conference)">
            <summary>
            Add a conference bookmark to the storage object
            </summary>
            <param name="conf" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConference(agsXMPP.Jid,System.String)">
            <summary>
            Add a conference bookmark to the storage object
            </summary>
            <param name="jid" />
            <param name="name" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConference(agsXMPP.Jid,System.String,System.String)">
            <summary>
            Add a conference bookmark to the storage object
            </summary>
            <param name="jid" />
            <param name="name" />
            <param name="nickname" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConference(agsXMPP.Jid,System.String,System.String,System.String)">
            <summary>
            Add a conference bookmark to the storage object
            </summary>
            <param name="jid" />
            <param name="name" />
            <param name="nickname" />
            <param name="password" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConference(agsXMPP.Jid,System.String,System.String,System.String,System.Boolean)">
            <summary />
            <param name="jid" />
            <param name="name" />
            <param name="nickname" />
            <param name="password" />
            <param name="autojoin" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddConferences(agsXMPP.protocol.extensions.bookmarks.Conference[])">
            <summary>
            add multiple conference bookmarks
            </summary>
            <param name="confs" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.GetConferences">
            <summary>
            get all conference booksmarks
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddUrl(agsXMPP.protocol.extensions.bookmarks.Url)">
            <summary>
            add a url bookmark
            </summary>
            <param name="url" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.AddUrls(agsXMPP.protocol.extensions.bookmarks.Url[])">
            <summary>
            add multiple url bookmarks
            </summary>
            <param name="urls" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.Storage.GetUrls">
            <summary>
            Get all url bookmarks
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.IqGrabber.#ctor(agsXMPP.XmppClientConnection)">
            <summary />
            <param name="conn" />
        </member>
        <member name="M:agsXMPP.IqGrabber.OnIq(System.Object,agsXMPP.protocol.client.IQ)">
            <summary>
            An IQ Element is received. Now check if its one we are looking for and
            raise the event in this case.
            </summary>
            <param name="sender" />
            <param name="e" />
        </member>
        <member name="M:agsXMPP.IqGrabber.SendIq(agsXMPP.protocol.client.IQ,agsXMPP.IqCB)">
            <summary>
            Send an IQ Request and store the object with callback in the Hashtable
            </summary>
            <param name="iq">The iq to send</param>
            <param name="cb">the callback function which gets raised for the response</param>
        </member>
        <member name="M:agsXMPP.IqGrabber.SendIq(agsXMPP.protocol.client.IQ,agsXMPP.IqCB,System.Object)">
            <summary>
            Send an IQ Request and store the object with callback in the Hashtable
            </summary>
            <param name="iq">The iq to send</param>
            <param name="cb">the callback function which gets raised for the response</param>
            <param name="cbArg">additional object for arguments</param>
        </member>
        <member name="M:agsXMPP.IqGrabber.SendIq(agsXMPP.protocol.client.IQ,System.Int32)">
            <summary>
            Sends an Iq synchronous and return the response or null on timeout
            </summary>
            <param name="iq">The IQ to send</param>
            <param name="timeout" />
            <returns>The response IQ or null on timeout</returns>
        </member>
        <member name="M:agsXMPP.IqGrabber.SendIq(agsXMPP.protocol.client.IQ)">
            <summary>
            Sends an Iq synchronous and return the response or null on timeout.
            Timeout time used is <see cref="P:agsXMPP.IqGrabber.SynchronousTimeout" /></summary>
            <param name="iq">The IQ to send</param>
            <returns>The response IQ or null on timeout</returns>
        </member>
        <member name="M:agsXMPP.IqGrabber.SynchronousIqResult(System.Object,agsXMPP.protocol.client.IQ,System.Object)">
            <summary>
            Callback for synchronous iq grabbing
            </summary>
            <param name="sender" />
            <param name="iq" />
            <param name="data" />
        </member>
        <member name="P:agsXMPP.IqGrabber.SynchronousTimeout">
            <summary>
            Timeout for synchronous requests, default value is 5000 (5 seconds)
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Dom.NodeList">
            <summary />
        </member>
        <member name="F:agsXMPP.Xml.Dom.NodeList.m_Owner">
            <summary>
            Owner (Parent) of the ChildElement Collection
            </summary>
        </member>
        <member name="T:agsXMPP.Util.Enum">
            <summary>
            Provides helper functions for Enumerations.
            </summary>
            <remarks>Extends the <see cref="T:System.Enum">System.Enum Class</see>.</remarks>
            <seealso cref="T:System.Enum">System.Enum Class</seealso>
        </member>
        <member name="T:agsXMPP.Sasl.Scram.ScramSha1Mechanism">
            <summary />
        </member>
        <member name="M:agsXMPP.Sasl.Scram.ScramSha1Mechanism.GenerateClientNonce">
            <summary>
            Generate a random client nonce
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Role">
            <summary>
            There are four defined roles that an occupant may have
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.Role.none">
            <summary>
            the absence of a role
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.Conference">
            <summary>
            is used for inviting somebody to a chatroom
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.Conference.Chatroom">
            <summary>
            Room Jid
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.tls.StartTls">
            <summary>
            Summary description for starttls.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.time.Time">
            <summary>
            XEP-0090: Entity Time
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.time.Time.Tz">
            <summary>
            Timezone
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.time.Time.Display">
            <summary>
            Human-readable date/time.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.register.Register">
            <summary>
            Used for registering new usernames on Jabber/XMPP Servers
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.register.Register.RemoveAccount">
            <summary>
            Remove registration from the server
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.register.Register.Data">
            <summary>
            The X-Data Element
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.disco.DiscoFeature">
            <summary>
            Disco feature
            </summary>
            <remarks>
            see: http://www.jabber.org/registrar/disco-features.html
            </remarks>
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoFeature.Var">
            <summary>
            feature name or namespace
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.Item">
            <summary>
            Used in XData seach.
            includes the headers of the search results
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Paused">
            <summary>
            User had been composing but now has stopped.
            User was composing but has not interacted with the message input interface for a short period of time (e.g., 5 seconds).
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.chatstates.Paused.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.extensions.chatstates.Paused" /> class.
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.ResourceRecord">
            <summary>
            Represents a Resource Record as detailed in RFC1035 4.1.3
            </summary>
        </member>
        <member name="M:agsXMPP.Net.Dns.ResourceRecord.#ctor(agsXMPP.Net.Dns.Pointer)">
            <summary>
            Construct a resource record from a pointer to a byte array
            </summary>
            <param name="pointer">the position in the byte array of the record</param>
        </member>
        <member name="T:agsXMPP.protocol.extensions.msgreceipts.Request">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.extensions.bosh.Body.Wait">
            <summary>
            Specifies the longest time (in seconds) that the connection manager is allowed to wait before responding to any request 
            during the session. This enables the client to limit the delay before it discovers any network failure, 
            and to prevent its HTTP/TCP connection from expiring due to inactivity.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bosh.Body.MaxPause">
            <summary>
            If the connection manager supports session pausing (inactivity) then it SHOULD advertise that to the client by including a 'maxpause'
            attribute in the session creation response element. The value of the attribute indicates the maximum length of a temporary 
            session pause (in seconds) that a client MAY request.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bosh.Body.To">
            <summary>
            Specifies the target domain of the first stream.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bosh.Body.Hold">
            <summary>
            specifies the maximum number of requests the connection manager is allowed to keep waiting at any one time during the session. 
            If the client is not able to use HTTP Pipelining then this SHOULD be set to "1".
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bytestreams.ByteStreamIq">
            <summary>
            a Bytestream IQ
            </summary>
        </member>
        <member name="T:agsXMPP.Collections.FullJidComparer">
            <summary />
        </member>
        <member name="M:agsXMPP.Collections.FullJidComparer.Compare(System.Object,System.Object)">
            <summary />
            <param name="x" />
            <param name="y" />
            <returns />
        </member>
        <member name="M:agsXMPP.Idn.IDNA.ToASCII(System.String)">
            <summary>
            Converts a Unicode string to ASCII using the procedure in RFC3490
            section 4.1. Unassigned characters are not allowed and STD3 ASCII
            rules are enforced. The input string may be a domain name
            containing dots.
            </summary>
            <param name="input">Unicode string.</param>
            <returns> Encoded string.</returns>
        </member>
        <member name="M:agsXMPP.Idn.IDNA.ToASCII(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts a Unicode string to ASCII using the procedure in RFC3490
            section 4.1. Unassigned characters are not allowed and STD3 ASCII
            rules are enforced.
            </summary>
            <param name="input">Unicode string.</param>
            <param name="allowUnassigned">Unassigned characters, allowed or not?</param>
            <param name="useSTD3ASCIIRules">STD3 ASCII rules, enforced or not?</param>
            <returns> Encoded string.</returns>
        </member>
        <member name="M:agsXMPP.Idn.IDNA.ToUnicode(System.String)">
            <summary>
            Converts an ASCII-encoded string to Unicode. Unassigned
            characters are not allowed and STD3 hostnames are enforced. Input
            may be domain name containing dots.
            </summary>
            <param name="input">ASCII input string.</param>
            <returns> Unicode string.</returns>
        </member>
        <member name="M:agsXMPP.Idn.IDNA.ToUnicode(System.String,System.Boolean,System.Boolean)">
            <summary>
            Converts an ASCII-encoded string to Unicode.		
            </summary>
            <param name="input">ASCII input string.</param>
            <param name="allowUnassigned">Allow unassigned Unicode characters.</param>
            <param name="useSTD3ASCIIRules">Check that the output conforms to STD3.</param>
            <returns>Unicode string.</returns>
        </member>
        <member name="M:agsXMPP.Exceptions.JidException.#ctor">
            <summary />
        </member>
        <member name="M:agsXMPP.Exceptions.JidException.#ctor(System.String)">
            <summary />
            <param name="msg" />
        </member>
        <member name="T:agsXMPP.Xml.Xpnet.ContentToken">
            <summary>
            Represents information returned by <code>Encoding.tokenizeContent</code>.
            @see Encoding#tokenizeContent
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.ContentToken.getAttributeSpecifiedCount">
            <summary>
            Returns the number of attributes specified in the start-tag or empty element tag.
            </summary>
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.ContentToken.getAttributeNameStart(System.Int32)">
            <summary>
            Returns the index of the first character of the name of the
            attribute index <code>i</code>.
            </summary>
            <param name="i" />
            <returns />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.ContentToken.getAttributeNameEnd(System.Int32)">
            Returns the index following the last character of the name of the
            attribute index <code>i</code>.
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.ContentToken.getAttributeValueStart(System.Int32)">
            Returns the index of the character following the opening quote of
            attribute index <code>i</code>.
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.ContentToken.getAttributeValueEnd(System.Int32)">
            Returns the index of the closing quote attribute index <code>i</code>.
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.ContentToken.isAttributeNormalized(System.Int32)">
            Returns true if attribute index <code>i</code> does not need to
            be normalized.  This is an optimization that allows further processing
            of the attribute to be avoided when it is known that normalization
            cannot change the value of the attribute.
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.ContentToken.clearAttributes">
            <summary>
            Clear out all of the current attributes
            </summary>
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.ContentToken.appendAttribute(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Add a new attribute
            </summary>
            <param name="nameStart" />
            <param name="nameEnd" />
            <param name="valueStart" />
            <param name="valueEnd" />
            <param name="normalized" />
        </member>
        <member name="M:agsXMPP.Xml.Xpnet.ContentToken.checkAttributeUniqueness(System.Byte[])">
            <summary>
            Is the current attribute unique?
            </summary>
            <param name="buf" />
        </member>
        <member name="F:agsXMPP.Uri.IQ_RPC">
            <summary>
            JEP-0009: Jabber-RPC
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.X_DATA">
            <summary>
            jabber:x:data
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.X_ROSTERX">
            <summary>
            JEP-0144 Roster Item Exchange
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.MUC">
            <summary>
            Multi User Chat (MUC) JEP-0045
            http://jabber.org/protocol/muc
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.MUC_USER">
            <summary>
            http://jabber.org/protocol/muc#user
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.MUC_ADMIN">
            <summary>
            "http://jabber.org/protocol/muc#admin
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.MUC_OWNER">
            <summary>
            http://jabber.org/protocol/muc#owner
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.STREAMS">
            <summary>
            urn:ietf:params:xml:ns:xmpp-streams
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.ACCEPT">
            <summary>
            jabber:component:accept
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.FEATURE_COMPRESS">
            <summary>
            Stream Compression http://jabber.org/features/compress
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.NICK">
            <summary>
            JEP-0172 User nickname
            http://jabber.org/protocol/nick
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.CHATSTATES">
            <summary>
            JEP-0085 Chat State Notifications
            http://jabber.org/protocol/chatstates
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.COMPRESS">
            <summary>
            JEP-0138: Stream Compression
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.FEATURE_NEG">
            <summary>
            JEP-0020: Feature Negotiation http://jabber.org/protocol/feature-neg
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.SI">
            <summary>
            JEO-0095 http://jabber.org/protocol/si
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.SI_FILE_TRANSFER">
            <summary>
            JEO-0096 http://jabber.org/protocol/si/profile/file-transfer
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.BYTESTREAMS">
            <summary>
            JEP-0065 SOCKS5 bytestreams
            http://jabber.org/protocol/bytestreams
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.JIVESOFTWARE_PHONE">
            <summary>
            Jivesoftware asterisk-im extension (http://jivesoftware.com/xmlns/phone);
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.XHTML_IM">
            <summary>
            JEP-0071: XHTML-IM (http://jivesoftware.com/xmlns/phone)
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.CAPS">
            <summary>
            XEP-0115: Entity Capabilities (http://jabber.org/protocol/caps)
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.JINGLE">
            <summary>
            Jingle http://jabber.org/protocol/jingle
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.JINGLE_AUDIO_DESCRIPTION">
            <summary>
            Jingle audio format description http://jabber.org/protocol/jingle/description/audio
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.JINGLE_AUDIO_INFO">
            <summary>
            Jingle Info audio http://jabber.org/protocol/jingle/info/audio;
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.GEOLOC">
            <summary>
            GeoLoc (http://jabber.org/protocol/geoloc)
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.PING">
            <summary>
                <para>XMPP ping</para>
                <para>Namespace: urn:xmpp:ping</para>
                <para>
                    <seealso cref="!:http://www.xmpp.org/extensions/xep-0199.html">http://www.xmpp.org/extensions/xep-0199.html</seealso>
                </para>
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.COMMANDS">
            <summary>
            Ad-Hoc Commands (http://jabber.org/protocol/commands)
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.MSG_RECEIPT">
            <summary>
                <para>XEP-0184: Message Receipts</para>
                <para>urn:xmpp:receipts</para>
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.STORAGE_BOOKMARKS">
            <summary>
                <para>XEP-0048: Bookmark Storage</para>
                <para>storage:bookmarks</para>
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.IBB">
            <summary>
                <para>XEP-0047: In-Band Bytestreams (IBB)</para>
                <para>http://jabber.org/protocol/ibb</para>
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.AMP">
            <summary>
                <para />
                <para>http://jabber.org/protocol/amp</para>
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.VCARD_UPDATE">
            <summary>
                <para>XEP-0153: vCard-Based Avatars</para>
                <para>vcard-temp:x:update</para>
            </summary>
        </member>
        <member name="F:agsXMPP.Uri.STORAGE_ROSTERNOTES">
            <summary>
                <para>XEP-0145 Annotations</para>
                <para>storage:rosternotes</para>
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.rosterx.RosterItem">
            <summary>
            Summary description for RosterItem.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.Affiliation">
            <summary>
            There are five defined affiliations that a user may have in relation to a room
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.muc.Affiliation.none">
            <summary>
            the absence of an affiliation
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.FieldType">
            <summary>
            Field Types
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Unknown">
            <summary>
            a unknown fieldtype
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Boolean">
            <summary>
            The field enables an entity to gather or provide an either-or choice between two options. The allowable values are 1 for yes/true/assent and 0 for no/false/decline. The default value is 0.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Fixed">
            <summary>
            The field is intended for data description (e.g., human-readable text such as "section" headers) rather than data gathering or provision. The <value /> child SHOULD NOT contain newlines (the \n and \r characters); instead an application SHOULD generate multiple fixed fields, each with one <value /> child.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Hidden">
            <summary>
            The field is not shown to the entity providing information, but instead is returned with the form.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Jid_Multi">
            <summary>
            The field enables an entity to gather or provide multiple Jabber IDs.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Jid_Single">
            <summary>
            The field enables an entity to gather or provide a single Jabber ID.	
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.List_Multi">
            <summary>
            The field enables an entity to gather or provide one or more options from among many.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.List_Single">
            <summary>
            The field enables an entity to gather or provide one option from among many.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Text_Multi">
            <summary>
            The field enables an entity to gather or provide multiple lines of text.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Text_Private">
            <summary>
            password style textbox.
            The field enables an entity to gather or provide a single line or word of text, which shall be obscured in an interface (e.g., *****).
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.x.data.FieldType.Text_Single">
            <summary>
            The field enables an entity to gather or provide a single line or word of text, which may be shown in an interface. This field type is the default and MUST be assumed if an entity receives a field type it does not understand.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.Avatar">
            <summary>
            JEP-0008 avatars
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.version.VersionIq">
            <summary>
            Summary description for VersionIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.version.Version">
            <summary>
            Zusammenfassung für Version.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.filetransfer.File">
            <summary>
            Summary description for File.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.File.Name">
            <summary>
            The file name. Its required
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.File.Size">
            <summary>
            Size of the file. This is required
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.File.Hash">
            <summary>
            a Hash checksum of the file
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.File.Date">
            <summary>
            file date
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.filetransfer.File.Description">
            <summary>
            is used to provide a sender-generated description of the file so the receiver can better understand what is being sent. 
            It MUST NOT be sent in the result.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.data.Reported">
            <summary>
            Used in XData seach reports.
            includes the headers of the search results
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.stream.feature.compression.Compression.AddMethod(agsXMPP.protocol.extensions.compression.CompressionMethod)">
            <summary>
            Add a compression method/algorithm
            </summary>
            <param name="method" />
        </member>
        <member name="M:agsXMPP.protocol.stream.feature.compression.Compression.SupportsMethod(agsXMPP.protocol.extensions.compression.CompressionMethod)">
            <summary>
            Is the given compression method/algrithm supported?
            </summary>
            <param name="method" />
            <returns />
        </member>
        <member name="P:agsXMPP.protocol.stream.feature.compression.Compression.Method">
            <summary>
            method/algorithm used to compressing the stream
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.pubsub.AffiliationType">
            <summary />
        </member>
        <member name="F:agsXMPP.protocol.extensions.pubsub.AffiliationType.none">
            <summary>
            the absence of an affiliation
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.compression.Compress.#ctor(agsXMPP.protocol.extensions.compression.CompressionMethod)">
            <summary>
            Constructor with a given method/algorithm for Stream compression
            </summary>
            <param name="method">method/algorithm used to compressing the stream</param>
        </member>
        <member name="P:agsXMPP.protocol.extensions.compression.Compress.Method">
            <summary>
            method/algorithm used to compressing the stream
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.commands.Note.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.commands.Note.#ctor(agsXMPP.protocol.extensions.commands.NoteType)">
            <summary />
            <param name="type" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.commands.Note.#ctor(System.String,agsXMPP.protocol.extensions.commands.NoteType)">
            <summary />
            <param name="text" />
            <param name="type" />
        </member>
        <member name="T:agsXMPP.protocol.component.Log">
            <summary>
            Zusammenfassung für Log.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.component.Log.#ctor(System.String)">
            <summary>
            creates a new Log Packet with the given message
            </summary>
            <param name="message" />
        </member>
        <member name="P:agsXMPP.protocol.component.Log.Type">
            <summary>
            Gets or Sets the logtype
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.Log.LogNamespace">
            <summary>
            The namespace for logging
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.disco.DiscoManager.#ctor(agsXMPP.XmppClientConnection)">
            <summary>
            Constructor
            </summary>
            <param name="con" />
        </member>
        <member name="P:agsXMPP.protocol.iq.disco.DiscoManager.AutoAnswerDiscoInfoRequests">
            <summary>
            Automatically answer DiscoInfo requests.
            Set disco information (identties and features) in the DiscoInfo property object.        
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.RequestBookmarks">
            <summary>
            Request the bookmarks from the storage on the server
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.RequestBookmarks(agsXMPP.IqCB)">
            <summary>
            Request the bookmarks from the storage on the server
            </summary>
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.RequestBookmarks(agsXMPP.IqCB,System.Object)">
            <summary>
            Request the bookmarks from the storage on the server
            </summary>
            <param name="cb" />
            <param name="cbArgs" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[])">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[],agsXMPP.IqCB)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[],agsXMPP.IqCB,System.Object)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls" />
            <param name="cb" />
            <param name="cbArgs" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Conference[])">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="conferences" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Conference[],agsXMPP.IqCB)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="conferences" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Conference[],agsXMPP.IqCB,System.Object)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="conferences" />
            <param name="cb" />
            <param name="cbArgs" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[],agsXMPP.protocol.extensions.bookmarks.Conference[])">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls" />
            <param name="conferences" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[],agsXMPP.protocol.extensions.bookmarks.Conference[],agsXMPP.IqCB)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls" />
            <param name="conferences" />
            <param name="cb" />
        </member>
        <member name="M:agsXMPP.protocol.extensions.bookmarks.BookmarkManager.StoreBookmarks(agsXMPP.protocol.extensions.bookmarks.Url[],agsXMPP.protocol.extensions.bookmarks.Conference[],agsXMPP.IqCB,System.Object)">
            <summary>
            Send booksmarks to the server storage
            </summary>
            <param name="urls" />
            <param name="conferences" />
            <param name="cb" />
            <param name="cbArgs" />
        </member>
        <member name="T:agsXMPP.Factory.ElementType">
            <summary />
        </member>
        <member name="M:agsXMPP.Factory.ElementType.#ctor(System.String,System.String)">
            <summary />
            <param name="TagName" />
            <param name="Namespace" />
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.NamePrep(System.String)">
            <summary> Preps a name according to the Stringprep profile defined in
            RFC3491. Unassigned code points are not allowed.
            *
            </summary>
            <param name="input">the name to prep.
            </param>
            <returns> the prepped name.
            @throws StringprepException If the name cannot be prepped with
            this profile.
            @throws NullPointerException If the name is null.
            
            </returns>
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.NamePrep(System.String,System.Boolean)">
            <summary> Preps a name according to the Stringprep profile defined in
            RFC3491.
            *
            </summary>
            <param name="input">the name to prep.
            </param>
            <param name="allowUnassigned">true if the name may contain unassigned
            code points.
            </param>
            <returns> the prepped name.
            @throws StringprepException If the name cannot be prepped with
            this profile.
            @throws NullPointerException If the name is null.
            
            </returns>
        </member>
        <member name="F:agsXMPP.Idn.Stringprep.RFC3920_NODEPREP_PROHIBIT">
            Characters prohibited by RFC3920 nodeprep that aren't defined as
            part of the RFC3454 tables.
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.NodePrep(System.String)">
            <summary> Preps a node name according to the Stringprep profile defined in
            RFC3920. Unassigned code points are not allowed.
            *
            </summary>
            <param name="input">the node name to prep.
            </param>
            <returns> the prepped node name.
            @throws StringprepException If the node name cannot be prepped
            with this profile.
            @throws NullPointerException If the node name is null.
            
            </returns>
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.NodePrep(System.String,System.Boolean)">
            <summary>
            Preps a node name according to the Stringprep profile defined in RFC3920.
            </summary>
            <param name="input">the node name to prep.
            </param>
            <param name="allowUnassigned">true if the node name may contain
            unassigned code points.
            </param>
            <returns> the prepped node name.
            @throws StringprepException If the node name cannot be prepped
            with this profile.
            @throws NullPointerException If the node name is null.
            
            </returns>
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.ResourcePrep(System.String)">
            <summary>
            Preps a resource name according to the Stringprep profile defined
            in RFC3920. Unassigned code points are not allowed.
            </summary>
            <param name="input">the resource name to prep.
            </param>
            <returns> the prepped node name.
            @throws StringprepException If the resource name cannot be prepped
            with this profile.
            @throws NullPointerException If the resource name is null.
            
            </returns>
        </member>
        <member name="M:agsXMPP.Idn.Stringprep.ResourcePrep(System.String,System.Boolean)">
            <summary>
            Preps a resource name according to the Stringprep profile defined
            in RFC3920.
            </summary>
            <param name="input">the resource name to prep.
            </param>
            <param name="allowUnassigned">true if the resource name may contain
            unassigned code points.
            </param>
            <returns>
            the prepped node name.
            @throws StringprepException If the resource name cannot be prepped
            with this profile.
            @throws NullPointerException If the resource name is null.
            
            </returns>
        </member>
        <member name="T:agsXMPP.Util.Hash">
            <summary>
            Helper class for hashing.
            </summary>
        </member>
        <member name="M:agsXMPP.Util.Hash.HexToString(System.Byte[])">
            <summary>
            Converts all bytes in the Array to a string representation.
            </summary>
            <param name="buf" />
            <returns>string representation</returns>
        </member>
        <member name="T:agsXMPP.protocol.extensions.jivesoftware.phone.PhoneEvent">
            <summary>
            Events are sent to the user when their phone is ringing, when a call ends, etc. 
            This packet is send within a message packet (subelement of message)
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.chatstates.Composing">
            <summary>
            User is composing a message.
            User is interacting with a message input interface specific to this chat session 
            (e.g., by typing in the input area of a chat window).
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.chatstates.Composing.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:agsXMPP.protocol.extensions.chatstates.Composing" /> class.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.PresenceType">
            <summary>
            Enumeration for the Presence Type structure. 
            This enum is used to describe what type of Subscription Type the current subscription is.
            When sending a presence or receiving a subscription this type is used to easily identify the type of subscription it is.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.available">
            <summary>
            Used when one wants to send presence to someone/server/transport that you’re available. 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.subscribe">
            <summary>
            Used to send a subscription request to someone.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.subscribed">
            <summary>
            Used to accept a subscription request.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.unsubscribe">
            <summary>
            Used to unsubscribe someone from your presence. 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.unsubscribed">
            <summary>
            Used to deny a subscription request.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.unavailable">
            <summary>
            Used when one wants to send presence to someone/server/transport that you’re unavailable.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.invisible">
            <summary>
            Used when you want to see your roster, but don't want anyone on you roster to see you
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.error">
            <summary>
            presence error
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.PresenceType.probe">
            <summary>
            used in server to server protocol to request presences
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.ErrorCondition">
            <summary>
            stanza error condition as defined in RFC 3920 9.3
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.BadRequest">
            <summary>
            The sender has sent a stanza containing XML that does not conform to the appropriate schema or that 
            cannot be processed (e.g., an IQ stanza that includes an unrecognized value of the 'type' attribute);
            the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.Conflict">
            <summary>
            Access cannot be granted because an existing resource exists with the same name or address; 
            the associated error type SHOULD be "cancel". 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.FeatureNotImplemented">
            <summary>
            The feature represented in the XML stanza is not implemented by the intended recipient or 
            an intermediate server and therefore the stanza cannot be processed; the associated error type SHOULD 
            be "cancel" or "modify".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.Forbidden">
            <summary>
            The requesting entity does not possess the required permissions to perform the action; 
            the associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.Gone">
            <summary>
            The recipient or server can no longer be contacted at this address 
            (the error stanza MAY contain a new address in the XML character data of the &lt;gone/&gt; element); 
            the associated error type SHOULD be "cancel" or "modify".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.InternalServerError">
            <summary>
            The server could not process the stanza because of a misconfiguration or an otherwise-undefined 
            internal server error; the associated error type SHOULD be "wait" or "cancel".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.ItemNotFound">
            <summary>
            The addressed JID or item requested cannot be found; the associated error type SHOULD be "cancel" or "modify".
            </summary>
            <remarks>        
            An application MUST NOT return this error if doing so would provide information about the intended 
            recipient's network availability to an entity that is not authorized to know such information; 
            instead it SHOULD return a &lt;service-unavailable/&gt; error.
            </remarks>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.JidMalformed">
            <summary>
            The sending entity has provided or communicated an XMPP address 
            (e.g., a value of the 'to' attribute) or aspect thereof (e.g., an XMPP resource identifier) 
            that does not adhere to the syntax defined under RFC3920 Section 3 (Addresses); 
            the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.NotAcceptable">
            <summary>
            The recipient or server understands the request but is refusing to process it because it does not
            meet criteria defined by the recipient or server (e.g., a local policy regarding stanza size 
            limits or acceptable words in messages); the associated error type SHOULD be "modify".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.NotAllowed">
            <summary>
            The recipient or server does not allow any entity to perform the action (e.g., sending to entities at 
            a blacklisted domain); the associated error type SHOULD be "cancel".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.NotAuthorized">
            <summary>
            The sender must provide proper credentials before being allowed to perform the action, or has provided 
            improper credentials; the associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.NotModified">
            <summary>
            The item requested has not changed since it was last requested; the associated error type SHOULD be "continue".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.PaymentRequired">
            <summary>
            The requesting entity is not authorized to access the requested service because payment is required; 
            the associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.RecipientUnavailable">
            <summary>
            The intended recipient is temporarily unavailable; the associated error type SHOULD be "wait".
            </summary>
            <remarks>
            An application MUST NOT return this error if doing so would provide information about the 
            intended recipient's network availability to an entity that is not authorized to know such 
            information; instead it SHOULD return a &lt;service-unavailable/&gt; error.
            </remarks>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.Redirect">
            <summary>
            The recipient or server is redirecting requests for this information to another entity, 
            typically in a temporary fashion; the associated error type SHOULD be "modify" and the error stanza
            SHOULD contain the alternate address (which SHOULD be a valid JID) in the XML character data 
            of the &lt;redirect/&gt; element.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.RegistrationRequired">
            <summary>
            The requesting entity is not authorized to access the requested service because prior 
            registration is required; the associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.RemoteServerNotFound">
            <summary>
            A remote server or service specified as part or all of the JID of the intended recipient 
            does not exist; the associated error type SHOULD be "cancel".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.RemoteServerTimeout">
            <summary>
            A remote server or service specified as part or all of the JID of the intended recipient 
            (or required to fulfill a request) could not be contacted within a reasonable amount 
            of time; the associated error type SHOULD be "wait".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.ResourceConstraint">
            <summary>
            The server or recipient lacks the system resources necessary to service the request; 
            the associated error type SHOULD be "wait".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.ServiceUnavailable">
            <summary>
            The server or recipient does not currently provide the requested service; 
            the associated error type SHOULD be "cancel".
            </summary>
            <remarks>
            An application SHOULD return a &lt;service-unavailable/&gt; error instead of 
            &lt;item-not-found/&gt; or &lt;recipient-unavailable/&gt; if sending one of the latter 
            errors would provide information about the intended recipient's network 
            availability to an entity that is not authorized to know such information.
            </remarks>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.SubscriptionRequired">
            <summary>
            The requesting entity is not authorized to access the requested service 
            because a prior subscription is required; the associated error type SHOULD be "auth".
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.UndefinedCondition">
            <summary>
            The error condition is not one of those defined by the other conditions in this list; 
            any error type may be associated with this condition, and it SHOULD be used only in conjunction 
            with an application-specific condition.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCondition.UnexpectedRequest">
            <summary>
            The recipient or server understood the request but was not expecting it at this time 
            (e.g., the request was out of order); the associated error type SHOULD be "wait" or "modify".
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.ErrorCode">
            <summary>
            The legacy Error Code
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.BadRequest">
            <summary>
            Bad request
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.Unauthorized">
            <summary>
            Unauthorized
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.PaymentRequired">
            <summary>
            Payment required
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.Forbidden">
            <summary>
            Forbidden
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.NotFound">
            <summary>
            Not found
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.NotAllowed">
            <summary>
            Not allowed
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.NotAcceptable">
            <summary>
            Not acceptable
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.RegistrationRequired">
            <summary>
            Registration required 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.RequestTimeout">
            <summary>
            Request timeout
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.Conflict">
            <summary>
            Conflict
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.InternalServerError">
            <summary>
            Internal server error
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.NotImplemented">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.RemoteServerError">
            <summary>
            Remote server error
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.ServiceUnavailable">
            <summary>
            Service unavailable
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.RemoteServerTimeout">
            <summary>
            Remote server timeout
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ErrorCode.Disconnected">
            <summary>
            Disconnected
            </summary>
        </member>
        <member name="T:agsXMPP.Net.Dns.Resolver">
            <summary>
            Summary description for Dns.
            </summary>
        </member>
        <member name="M:agsXMPP.Net.Dns.Resolver.#ctor">
            <summary>
            Private constructor - this static class should never be instantiated
            </summary>
        </member>
        <member name="M:agsXMPP.Net.Dns.Resolver.SRVLookup(System.String,System.Net.IPAddress)">
            <summary>
            Shorthand form to make SRV querying easier, essentially wraps up the retreival
            of the SRV records, and sorts them by preference
            </summary>
            <param name="domain">domain name to retreive SRV RRs for</param>
            <param name="dnsServer">the server we're going to ask</param>
            <returns>An array of SRVRecords</returns>
        </member>
        <member name="M:agsXMPP.Net.Dns.Resolver.Lookup(agsXMPP.Net.Dns.Request,System.Net.IPAddress)">
            <summary>
            The principal look up function, which sends a request message to the given
            DNS server and collects a response. This implementation re-sends the message
            via UDP up to two times in the event of no response/packet loss
            </summary>
            <param name="request">The logical request to send to the server</param>
            <param name="dnsServer">The IP address of the DNS server we are querying</param>
            <returns>The logical response from the DNS server or null if no response</returns>
        </member>
        <member name="T:agsXMPP.Net.Dns.NoResponseException">
            <summary>
            Thrown when the server does not respond
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.browse.BrowseItem">
            <summary>
            Summary description for BrowseItem.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.browse.BrowseItem.GetNamespaces">
            <summary>
            Gets all advertised namespaces of this item
            </summary>
            <returns>string array that contains the advertised namespaces</returns>
        </member>
        <member name="T:agsXMPP.protocol.iq.agent.AgentsIq">
            <summary>
            Summary description for AgentsIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.component.IQ">
            <summary>
            Summary description for Iq.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.component.IQ.Error">
            <summary>
            Error Child Element
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:agsXMPP.IO.Compression.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="!:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream" />
            <see cref="!:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream" />
        </member>
        <member name="F:agsXMPP.IO.Compression.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:agsXMPP.IO.Compression.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buf">
            an array of bytes
            </param>
            <param name="off">
            the start of the data used for this update
            </param>
            <param name="len">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:agsXMPP.IO.Compression.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Dom.Document">
            <summary />
        </member>
        <member name="M:agsXMPP.Xml.Dom.Document.Clear">
            <summary>
            Clears the Document
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Dom.Comment">
            <summary>
            Summary description for Comment.
            </summary>
        </member>
        <member name="T:agsXMPP.Xml.Dom.CData">
            <summary />
        </member>
        <member name="T:agsXMPP.Util.Time">
            <summary>
            Class handles the XMPP time format
            </summary>
        </member>
        <member name="M:agsXMPP.Util.Time.Date(System.String)">
            <summary />
            <param name="date" />
            <returns />
        </member>
        <member name="M:agsXMPP.Util.Time.Date(System.DateTime)">
            <summary>
            Get a XMPP string representation of a Date        
            </summary>
            <param name="date">DateTime</param>
            <returns>XMPP string representation of a DateTime value</returns>
        </member>
        <member name="M:agsXMPP.Util.Time.ISO_8601Date(System.String)">
            <summary>
            The new standard used by XMPP in JEP-82 (ISO-8601)
            <example>1970-01-01T00:00Z</example></summary>
            <param name="date" />
            <returns />
        </member>
        <member name="M:agsXMPP.Util.Time.ISO_8601Date(System.DateTime)">
            <summary>
            The new standard used by XMPP in JEP-82 (ISO-8601)
            converts a local DateTime to a ISO-8601 formatted date in UTC format.
            <example>1970-01-01T00:00Z</example></summary>
            <param name="date">local Datetime</param>
            <returns />
        </member>
        <member name="T:agsXMPP.Sasl.XGoogleToken.XGoogleTokenMechanism">
            <summary>
            X-GOOGLE-TOKEN Authentication
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.History">
            <summary>
            This is used to get the history of a muc room
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.History.#ctor">
            <summary>
            Empty default constructor
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.History.#ctor(System.DateTime)">
            <summary>
            get the history starting from a given date when available
            </summary>
            <param name="date" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.History.#ctor(System.Int32)">
            <summary>
            Specify the maximum nunber of messages to retrieve from the history
            </summary>
            <param name="max" />
        </member>
        <member name="P:agsXMPP.protocol.x.muc.History.Seconds">
            <summary>
            request the last xxx seconds of history when available
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.History.MaxStanzas">
            <summary>
            Request maximum stanzas of history when available
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.History.Since">
            <summary>
            Request history from a given date when available
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.x.muc.History.MaxCharacters">
            <summary>
            Limit the total number of characters in the history to "X" 
            (where the character count is the characters of the complete XML stanzas, 
            not only their XML character data).
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.sasl.Abort">
            <summary>
            Summary description for Abort.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.VcardIq">
            <summary>
            Summary description for VcardIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Name">
            <summary />
        </member>
        <member name="T:agsXMPP.protocol.iq.search.SearchItem">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.iq.search.SearchItem.Nickname">
            <summary>
            Nickname, null when not available
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.auth.AuthIq">
            <summary>
            Summary description for AuthIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.jivesoftware.phone.PhoneStatusType">
            <summary>
            Events are sent to the user when their phone is ringing, 
            when a call ends, etc. As with presence, 
            pubsub should probably be the mechanism used for sending this information, 
            but message packets are used to send events for the time being
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.rpc.RpcIq">
            <summary>
            RpcIq.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.MessageType">
            <summary>
            Enumeration that represents the type of a message
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.MessageType.normal">
            <summary>
            This in a normal message, much like an email. You dont expect a fast
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.MessageType.error">
            <summary>
            a error messages
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.MessageType.chat">
            <summary>
            is for chat like messages, person to person. Send this if you expect a fast reply. reply or no reply at all.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.MessageType.groupchat">
            <summary>
            is used for sending/receiving messages from/to a chatroom (IRC style chats) 
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.MessageType.headline">
            <summary>
            Think of this as a news broadcast, or RRS Feed, the message will normally have a URL and Description Associated with it.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.PresenceManager">
            <summary>
            Helper class for managing presence and subscriptions
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.client.PresenceManager.Subscribe(agsXMPP.Jid)">
            <summary>
            Subscribe to a contact
            </summary>
            <param name="to">Bare Jid of the rosteritem we want to subscribe</param>
        </member>
        <member name="M:agsXMPP.protocol.client.PresenceManager.Subscribe(agsXMPP.Jid,System.String)">
            <summary>        
            Subscribe to a contact
            </summary>
            <param name="to">Bare Jid of the rosteritem we want to subscribe</param>
            <param name="message">a message which normally contains the reason why we want to subscibe to this contact</param>
        </member>
        <member name="M:agsXMPP.protocol.client.PresenceManager.Unsubscribe(agsXMPP.Jid)">
            <summary>
            Unsubscribe from a contact
            </summary>
            <param name="to">Bare Jid of the rosteritem we want to unsubscribe</param>
        </member>
        <member name="M:agsXMPP.protocol.client.PresenceManager.ApproveSubscriptionRequest(agsXMPP.Jid)">
            <summary>
            Approve a subscription request
            </summary>
            <param name="to">Bare Jid to approve</param>
        </member>
        <member name="M:agsXMPP.protocol.client.PresenceManager.RefuseSubscriptionRequest(agsXMPP.Jid)">
            <summary>
            Refuse  subscription request
            </summary>
            <param name="to">Bare Jid to approve</param>
        </member>
        <member name="T:agsXMPP.protocol.iq.agent.Agents">
            <summary>
            Zusammenfassung für Agent.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bookmarks.Url">
            <summary>
            URLs are fairly simple, as they only need to store a URL and a title, 
            and the client then can simply launch the appropriate browser.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Url.Name">
            <summary>
            A description/name for this bookmark
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.Url.Address">
            <summary>
            The url address to store e.g. http://www.ag-software,de/
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.extensions.amp.Amp.GetRules">
            <summary>
            Gets a list of all form fields
            </summary>
            <returns />
        </member>
        <member name="P:agsXMPP.protocol.extensions.amp.Amp.Status">
            <summary>
            The 'status' attribute specifies the reason for the amp element.
            When specifying semantics to be applied (client to server), this attribute MUST NOT be present. 
            When replying to a sending entity regarding a met condition, this attribute MUST be present and 
            SHOULD be the value of the 'action' attribute for the triggered rule. 
            (Note: Individual action definitions MAY provide their own requirements.)
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.amp.Amp.PerHop">
            <summary>
            The 'per-hop' attribute flags the contained ruleset for processing at each server in the route 
            between the original sender and original intended recipient. 
            This attribute MAY be present, and MUST be either "true" or "false". 
            If not present, the default is "false".
            </summary>
        </member>
        <member name="M:agsXMPP.Idn.PunycodeException.#ctor(System.String)">
            <summary>
            Creates a new PunycodeException.
            </summary>
            <param name="message">message</param>
        </member>
        <member name="M:agsXMPP.Idn.Punycode.Encode(System.String)">
            <summary>
            Punycodes a unicode string.
            </summary>
            <param name="input">Unicode string.</param>
            <returns> Punycoded string.</returns>
        </member>
        <member name="M:agsXMPP.Idn.Punycode.Decode(System.String)">
            <summary>
            Decode a punycoded string.
            </summary>
            <param name="input">Punycode string</param>
            <returns> Unicode string.</returns>
        </member>
        <member name="M:agsXMPP.Xml.Dom.ElementList.#ctor">
            <summary>
            A Collection of Element Nodes
            </summary>
        </member>
        <member name="T:agsXMPP.Sasl.Plain.PlainMechanism">
            <summary>
            Summary description for PlainMechanism.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.x.muc.owner.Destroy">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.x.muc.owner.Destroy.AlternateVenue">
            <summary>
            Pptional attribute for a alternate venue
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor">
            <summary />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation)">
            <summary />
            <param name="affiliation" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Role)">
            <summary />
            <param name="role" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role)">
            <summary />
            <param name="affiliation" />
            <param name="role" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role,agsXMPP.Jid)">
            <summary />
            <param name="affiliation" />
            <param name="role" />
            <param name="jid" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role,System.String)">
            <summary />
            <param name="affiliation" />
            <param name="role" />
            <param name="reason" />
        </member>
        <member name="M:agsXMPP.protocol.x.muc.iq.admin.Item.#ctor(agsXMPP.protocol.x.muc.Affiliation,agsXMPP.protocol.x.muc.Role,agsXMPP.Jid,System.String)">
            <summary />
            <param name="affiliation" />
            <param name="role" />
            <param name="jid" />
            <param name="reason" />
        </member>
        <member name="T:agsXMPP.protocol.x.data.Value">
            <summary>
            Summary description for Value.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.session.Session">
            <summary>
            Summary description for Session.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.vcard.Vcard">
            <summary>
            Summary description for Vcard.
            </summary>
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Vcard.GetAddresses">
            <summary />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Vcard.GetAddress(agsXMPP.protocol.iq.vcard.AddressLocation)">
            <summary />
            <param name="loc" />
            <returns />
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Vcard.AddEmailAddress(agsXMPP.protocol.iq.vcard.Email)">
            <summary>
            Adds a new Email Adress object
            </summary>
            <param name="mail" />
        </member>
        <member name="M:agsXMPP.protocol.iq.vcard.Vcard.GetEmailAddresses">
            <summary>
            Get all Email addresses
            </summary>
            <returns />
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Url">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Birthday">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Title">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Role">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Description">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Name">
            <summary />
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Photo">
            <summary>
            a Photograph
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.iq.vcard.Vcard.Organization">
            <summary />
        </member>
        <member name="T:agsXMPP.Net.Dns.InvalidResponseException">
            <summary>
            Thrown when the server delivers a response we are not expecting to hear
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.iq.browse.Browse">
            <summary>
            Summary description for Browse.
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.extensions.bookmarks.RosterNote">
            <summary>
            Annotations are stored using server-side private XML storage. 
            A storage element contains a collection of one or more notes elements, 
            each representing a note about a given entity.
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.RosterNote.CreationDate">
            <summary>
            Creation date time
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.RosterNote.ModificationDate">
            <summary>
            Modification date tiime
            </summary>
        </member>
        <member name="P:agsXMPP.protocol.extensions.bookmarks.RosterNote.Jid">
            <summary>
            The Jid of the bookmarked room
            </summary>
        </member>
        <member name="T:agsXMPP.protocol.client.ShowType">
            <summary>
            Enumeration that represents the online state.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ShowType.NONE">
            <summary />
        </member>
        <member name="F:agsXMPP.protocol.client.ShowType.away">
            <summary>
            The entity or resource is temporarily away.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ShowType.chat">
            <summary>
            The entity or resource is actively interested in chatting.
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ShowType.dnd">
            <summary>
            The entity or resource is busy (dnd = "Do Not Disturb").
            </summary>
        </member>
        <member name="F:agsXMPP.protocol.client.ShowType.xa">
            <summary>
            The entity or resource is away for an extended period (xa = "eXtended Away").
            </summary>
        </member>
        <member name="F:agsXMPP.IdType.Numeric">
            <summary>
            Numeric Id's are generated by increasing a long value
            </summary>
        </member>
        <member name="F:agsXMPP.IdType.Guid">
            <summary>
            Guid Id's are unique, Guid packet Id's should be used for server and component applications,
            or apps which very long sessions (multiple days, weeks or years)
            </summary>
        </member>
        <member name="T:agsXMPP.Id">
            <summary>
            This class takes care anout out unique Message Ids
            </summary>
        </member>
        <member name="M:agsXMPP.Id.Reset">
            <summary>
            Reset the id counter to agsXmpp_1 again
            </summary>
        </member>
        <member name="P:agsXMPP.Id.Prefix">
            <summary>
            to Save Bandwidth on Mobile devices you can change the prefix
            null is also possible to optimize Bandwidth usage
            </summary>
        </member>
        <member name="T:NLog.ComInterop.ComLogger">
            <summary>
            NLog COM Interop logger implementation.
            </summary>
        </member>
        <member name="T:NLog.ComInterop.IComLogger">
            <summary>
            NLog COM Interop logger interface.
            </summary>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Log(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the Trace level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the Debug level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the Info level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the Warn level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the Error level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the Fatal level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogger.IsEnabled(System.String)">
            <summary>
            Checks if the specified log level is enabled.
            </summary>
            <param name="level">The log level.</param>
            <returns>A value indicating whether the specified log level is enabled.</returns>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether the Trace level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether the Debug level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether the Info level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether the Warn level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether the Error level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether the Fatal level is enabled.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogger.LoggerName">
            <summary>
            Gets or sets the logger name.
            </summary>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Log(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the Trace level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the Debug level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the Info level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the Warn level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the Error level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the Fatal level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
        </member>
        <member name="M:NLog.ComInterop.ComLogger.IsEnabled(System.String)">
            <summary>
            Checks if the specified log level is enabled.
            </summary>
            <param name="level">The log level.</param>
            <returns>
            A value indicating whether the specified log level is enabled.
            </returns>
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether the Trace level is enabled.
            </summary>
            <value />
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether the Debug level is enabled.
            </summary>
            <value />
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether the Info level is enabled.
            </summary>
            <value />
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether the Warn level is enabled.
            </summary>
            <value />
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether the Error level is enabled.
            </summary>
            <value />
        </member>
        <member name="P:NLog.ComInterop.ComLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether the Fatal level is enabled.
            </summary>
            <value />
        </member>
        <member name="P:NLog.ComInterop.ComLogger.LoggerName">
            <summary>
            Gets or sets the logger name.
            </summary>
            <value />
        </member>
        <member name="T:NLog.ComInterop.ComLogManager">
            <summary>
            NLog COM Interop LogManager implementation.
            </summary>
        </member>
        <member name="T:NLog.ComInterop.IComLogManager">
            <summary>
            NLog COM Interop LogManager interface.
            </summary>
        </member>
        <member name="M:NLog.ComInterop.IComLogManager.LoadConfigFromFile(System.String)">
            <summary>
            Loads NLog configuration from the specified file.
            </summary>
            <param name="fileName">The name of the file to load NLog configuration from.</param>
        </member>
        <member name="M:NLog.ComInterop.IComLogManager.GetLogger(System.String)">
            <summary>
            Creates the specified logger object and assigns a LoggerName to it.
            </summary>
            <param name="name">Logger name.</param>
            <returns>The new logger instance.</returns>
        </member>
        <member name="P:NLog.ComInterop.IComLogManager.InternalLogToConsole">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the console.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogManager.InternalLogFile">
            <summary>
            Gets or sets the name of the internal log file.
            </summary>
        </member>
        <member name="P:NLog.ComInterop.IComLogManager.InternalLogLevel">
            <summary>
            Gets or sets the name of the internal log level.
            </summary>
        </member>
        <member name="M:NLog.ComInterop.ComLogManager.GetLogger(System.String)">
            <summary>
            Creates the specified logger object and assigns a LoggerName to it.
            </summary>
            <param name="loggerName">The name of the logger.</param>
            <returns>The new logger instance.</returns>
        </member>
        <member name="M:NLog.ComInterop.ComLogManager.LoadConfigFromFile(System.String)">
            <summary>
            Loads NLog configuration from the specified file.
            </summary>
            <param name="fileName">The name of the file to load NLog configuration from.</param>
        </member>
        <member name="P:NLog.ComInterop.ComLogManager.InternalLogToConsole">
            <summary>
            Gets or sets a value indicating whether to log internal messages to the console.
            </summary>
            <value>
            A value of <c>true</c> if internal messages should be logged to the console; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:NLog.ComInterop.ComLogManager.InternalLogLevel">
            <summary>
            Gets or sets the name of the internal log level.
            </summary>
            <value />
        </member>
        <member name="P:NLog.ComInterop.ComLogManager.InternalLogFile">
            <summary>
            Gets or sets the name of the internal log file.
            </summary>
            <value />
        </member>
        <member name="T:NLog.Common.AsyncContinuation">
            <summary>
            Asynchronous continuation delegate - function invoked at the end of asynchronous
            processing.
            </summary>
            <param name="exception">Exception during asynchronous processing or null if no exception
            was thrown.</param>
        </member>
        <member name="T:NLog.Common.AsyncHelpers">
            <summary>
            Helpers for asynchronous operations.
            </summary>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.ForEachItemSequentially``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
            <summary>
            Iterates over all items in the given collection and runs the specified action
            in sequence (each action executes only after the preceding one has completed without an error).
            </summary>
            <typeparam name="T">Type of each item.</typeparam>
            <param name="items">The items to iterate.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
            <param name="action">The action to invoke for each item.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.Repeat(System.Int32,NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
            <summary>
            Repeats the specified asynchronous action multiple times and invokes asynchronous continuation at the end.
            </summary>
            <param name="repeatCount">The repeat count.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke at the end.</param>
            <param name="action">The action to invoke.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.PrecededBy(NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction)">
            <summary>
            Modifies the continuation by pre-pending given action to execute just before it.
            </summary>
            <param name="asyncContinuation">The async continuation.</param>
            <param name="action">The action to pre-pend.</param>
            <returns>Continuation which will execute the given action before forwarding to the actual continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.WithTimeout(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Attaches a timeout to a continuation which will invoke the continuation when the specified
            timeout has elapsed.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">The timeout.</param>
            <returns>Wrapped continuation.</returns>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.ForEachItemInParallel``1(System.Collections.Generic.IEnumerable{``0},NLog.Common.AsyncContinuation,NLog.Common.AsynchronousAction{``0})">
            <summary>
            Iterates over all items in the given collection and runs the specified action
            in parallel (each action executes on a thread from thread pool).
            </summary>
            <typeparam name="T">Type of each item.</typeparam>
            <param name="values">The items to iterate.</param>
            <param name="asyncContinuation">The asynchronous continuation to invoke once all items
            have been iterated.</param>
            <param name="action">The action to invoke for each item.</param>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.RunSynchronously(NLog.Common.AsynchronousAction)">
            <summary>
            Runs the specified asynchronous action synchronously (blocks until the continuation has
            been invoked).
            </summary>
            <param name="action">The action.</param>
            <remarks>
            Using this method is not recommended because it will block the calling thread.
            </remarks>
        </member>
        <member name="M:NLog.Common.AsyncHelpers.OneTimeOnly(NLog.Common.AsyncContinuation)">
            <summary>
            Wraps the continuation with a guard which will only make sure that the continuation function
            is invoked only once.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <returns>Wrapped asynchronous continuation.</returns>
        </member>
        <member name="T:NLog.Common.AsynchronousAction">
            <summary>
            Asynchronous action.
            </summary>
            <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
        </member>
        <member name="T:NLog.Common.AsynchronousAction`1">
            <summary>
            Asynchronous action with one argument.
            </summary>
            <typeparam name="T">Type of the argument.</typeparam>
            <param name="argument">Argument to the action.</param>
            <param name="asyncContinuation">Continuation to be invoked at the end of action.</param>
        </member>
        <member name="T:NLog.Common.AsyncLogEventInfo">
            <summary>
            Represents the logging event with asynchronous continuation.
            </summary>
        </member>
        <member name="M:NLog.Common.AsyncLogEventInfo.#ctor(NLog.LogEventInfo,NLog.Common.AsyncContinuation)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Common.AsyncLogEventInfo" /> struct.
            </summary>
            <param name="logEvent">The log event.</param>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="P:NLog.Common.AsyncLogEventInfo.LogEvent">
            <summary>
            Gets the log event.
            </summary>
        </member>
        <member name="P:NLog.Common.AsyncLogEventInfo.Continuation">
            <summary>
            Gets the continuation.
            </summary>
        </member>
        <member name="T:NLog.Common.InternalLogger">
            <summary>
            NLog internal logger.
            </summary>
        </member>
        <member name="M:NLog.Common.InternalLogger.#cctor">
            <summary>
            Initializes static members of the InternalLogger class.
            </summary>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Logs the specified message at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Log(NLog.LogLevel,System.String)">
            <summary>
            Logs the specified message at the specified level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Trace level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Trace(System.String)">
            <summary>
            Logs the specified message at the Trace level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Debug level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Debug(System.String)">
            <summary>
            Logs the specified message at the Debug level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Info level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Info(System.String)">
            <summary>
            Logs the specified message at the Info level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Warn level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Warn(System.String)">
            <summary>
            Logs the specified message at the Warn level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Error level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Error(System.String)">
            <summary>
            Logs the specified message at the Error level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.String,System.Object[])">
            <summary>
            Logs the specified message at the Fatal level.
            </summary>
            <param name="message">Message which may include positional parameters.</param>
            <param name="args">Arguments to the message.</param>
        </member>
        <member name="M:NLog.Common.InternalLogger.Fatal(System.String)">
            <summary>
            Logs the specified message at the Fatal level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogLevel">
            <summary>
            Gets or sets the internal log level.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogToConsole">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the console output stream.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogToConsoleError">
            <summary>
            Gets or sets a value indicating whether internal messages should be written to the console error stream.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogFile">
            <summary>
            Gets or sets the name of the internal log file.
            </summary>
            <remarks>A value of <see langword="null" /> value disables internal logging to a file.</remarks>
        </member>
        <member name="P:NLog.Common.InternalLogger.LogWriter">
            <summary>
            Gets or sets the text writer that will receive internal logs.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IncludeTimestamp">
            <summary>
            Gets or sets a value indicating whether timestamp should be included in internal log output.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether internal log includes Trace messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether internal log includes Debug messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether internal log includes Info messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether internal log includes Warn messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether internal log includes Error messages.
            </summary>
        </member>
        <member name="P:NLog.Common.InternalLogger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether internal log includes Fatal messages.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionAndExpression">
            <summary>
            Condition <b>and</b> expression.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionExpression">
            <summary>
            Base class for representing nodes in condition expression trees.
            </summary>
        </member>
        <member name="T:NLog.Config.INLogConfigurationItem">
            <summary>
            Marks the object as configuration item for NLog.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.op_Implicit(System.String)~NLog.Conditions.ConditionExpression">
            <summary>
            Converts condition text to a condition expression tree.
            </summary>
            <param name="text">Condition text to be converted.</param>
            <returns>Condition expression tree.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.Evaluate(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionAndExpression" /> class.
            </summary>
            <param name="left">Left hand side of the AND expression.</param>
            <param name="right">Right hand side of the AND expression.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>A concatenated '(Left) and (Right)' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionAndExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionAndExpression.Left" /> and <see cref="P:NLog.Conditions.ConditionAndExpression.Right" /> recursively.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the conjunction operator.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionAndExpression.Left">
            <summary>
            Gets the left hand side of the AND expression.
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionAndExpression.Right">
            <summary>
            Gets the right hand side of the AND expression.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionEvaluationException">
            <summary>
            Exception during evaluation of condition expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionEvaluationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionEvaluationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.Conditions.ConditionLayoutExpression">
            <summary>
            Condition layout expression (represented by a string literal
            with embedded ${}).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.#ctor(NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLayoutExpression" /> class.
            </summary>
            <param name="layout">The layout.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>String literal in single quotes.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLayoutExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by calculating the value
            of the layout in the specified evaluation context.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the layout.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionLayoutExpression.Layout">
            <summary>
            Gets the layout.
            </summary>
            <value>The layout.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionLevelExpression">
            <summary>
            Condition level expression (represented by the <b>level</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>The '<b>level</b>' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLevelExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the current log level.
            </summary>
            <param name="context">Evaluation context. Ignored.</param>
            <returns>The <see cref="T:NLog.LogLevel" /> object representing current log level.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionLiteralExpression">
            <summary>
            Condition literal expression (numeric, <b>LogLevel.XXX</b>, <b>true</b> or <b>false</b>).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionLiteralExpression" /> class.
            </summary>
            <param name="literalValue">Literal value.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>The literal value.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLiteralExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The literal value as passed in the constructor.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionLiteralExpression.LiteralValue">
            <summary>
            Gets the literal value.
            </summary>
            <value>The literal value.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionLoggerNameExpression">
            <summary>
            Condition logger name expression (represented by the <b>logger</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>A <b>logger</b> string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionLoggerNameExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the logger name.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The logger name.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMessageExpression">
            <summary>
            Condition message expression (represented by the <b>message</b> keyword).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>The '<b>message</b>' string.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMessageExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates to the logger message.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The logger message.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodAttribute">
            <summary>
            Marks class as a log event Condition and assigns a name to it.
            </summary>
        </member>
        <member name="T:NLog.Config.NameBaseAttribute">
            <summary>
            Attaches a simple name to an item (such as <see cref="T:NLog.Targets.Target" />, 
            <see cref="T:NLog.LayoutRenderers.LayoutRenderer" />, <see cref="T:NLog.Layouts.Layout" />, etc.).
            </summary>
        </member>
        <member name="M:NLog.Config.NameBaseAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NameBaseAttribute" /> class.
            </summary>
            <param name="name">The name of the item.</param>
        </member>
        <member name="P:NLog.Config.NameBaseAttribute.Name">
            <summary>
            Gets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodAttribute" /> class.
            </summary>
            <param name="name">Condition method name.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodExpression">
            <summary>
            Condition method invocation expression (represented by <b>method(p1,p2,p3)</b> syntax).
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.#ctor(System.String,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{NLog.Conditions.ConditionExpression})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionMethodExpression" /> class.
            </summary>
            <param name="conditionMethodName">Name of the condition method.</param>
            <param name="methodInfo">
                <see cref="P:NLog.Conditions.ConditionMethodExpression.MethodInfo" /> of the condition method.</param>
            <param name="methodParameters">The method parameters.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethodExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionMethodExpression.MethodInfo">
            <summary>
            Gets the method info.
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionMethodExpression.MethodParameters">
            <summary>
            Gets the method parameters.
            </summary>
            <value>The method parameters.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionMethods">
            <summary>
            A bunch of utility methods (mostly predicates) which can be used in
            condition expressions. Parially inspired by XPath 1.0.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Equals2(System.Object,System.Object)">
            <summary>
            Compares two objects for equality.
            </summary>
            <param name="firstObject">The first object.</param>
            <param name="secondObject">The second object.</param>
            <returns>
                <b>true</b> when two objects are equal, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Contains(System.String,System.String)">
            <summary>
            Gets or sets a value indicating whether the second string is a substring of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <returns>
                <b>true</b> when the second string is a substring of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.StartsWith(System.String,System.String)">
            <summary>
            Gets or sets a value indicating whether the second string is a prefix of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <returns>
                <b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.EndsWith(System.String,System.String)">
            <summary>
            Gets or sets a value indicating whether the second string is a suffix of the first one.
            </summary>
            <param name="haystack">The first string.</param>
            <param name="needle">The second string.</param>
            <returns>
                <b>true</b> when the second string is a prefix of the first string, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionMethods.Length(System.String)">
            <summary>
            Returns the length of a string.
            </summary>
            <param name="text">A string whose lengths is to be evaluated.</param>
            <returns>The length of the string.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionMethodsAttribute">
            <summary>
            Marks the class as containing condition methods.
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionNotExpression">
            <summary>
            Condition <b>not</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.#ctor(NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionNotExpression" /> class.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionNotExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionNotExpression.Expression">
            <summary>
            Gets the expression to be negated.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionOrExpression">
            <summary>
            Condition <b>or</b> expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionOrExpression" /> class.
            </summary>
            <param name="left">Left hand side of the OR expression.</param>
            <param name="right">Right hand side of the OR expression.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionOrExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression by evaluating <see cref="P:NLog.Conditions.ConditionOrExpression.LeftExpression" /> and <see cref="P:NLog.Conditions.ConditionOrExpression.RightExpression" /> recursively.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>The value of the alternative operator.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionOrExpression.LeftExpression">
            <summary>
            Gets the left expression.
            </summary>
            <value>The left expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionOrExpression.RightExpression">
            <summary>
            Gets the right expression.
            </summary>
            <value>The right expression.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionParseException">
            <summary>
            Exception during parsing of condition expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParseException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.Conditions.ConditionParser">
            <summary>
            Condition parser. Turns a string representation of condition expression
            into an expression tree.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.#ctor(System.String,NLog.Config.NLogFactories)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionParser" /> class.
            </summary>
            <param name="expressionText">The expression text.</param>
            <param name="nlogFactories">Instance of <see cref="T:NLog.Config.NLogFactories" /> used to resolve references to condition methods and layout renderers.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression" /> tree.
            </summary>
            <param name="expressionText">The expression to be parsed.</param>
            <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionParser.ParseExpression(System.String,NLog.Config.NLogFactories)">
            <summary>
            Parses the specified condition string and turns it into
            <see cref="T:NLog.Conditions.ConditionExpression" /> tree.
            </summary>
            <param name="expressionText">The expression to be parsed.</param>
            <param name="nlogFactories">Instance of <see cref="T:NLog.Config.NLogFactories" /> used to resolve references to condition methods and layout renderers.</param>
            <returns>The root of the expression syntax tree which can be used to get the value of the condition in a specified context.</returns>
        </member>
        <member name="T:NLog.Conditions.ConditionRelationalExpression">
            <summary>
            Condition relational (<b>==</b>, <b>!=</b>, <b>&lt;</b>, <b>&lt;=</b>,
            <b>&gt;</b> or <b>&gt;=</b>) expression.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionRelationalOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionRelationalExpression" /> class.
            </summary>
            <param name="leftExpression">The left expression.</param>
            <param name="rightExpression">The right expression.</param>
            <param name="relationalOperator">The relational operator.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the condition expression.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.EvaluateNode(NLog.LogEventInfo)">
            <summary>
            Evaluates the expression.
            </summary>
            <param name="context">Evaluation context.</param>
            <returns>Expression result.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionRelationalExpression.Compare(System.Object,System.Object,NLog.Conditions.ConditionRelationalOperator)">
            <summary>
            Compares the specified values using specified relational operator.
            </summary>
            <param name="leftValue">The first value.</param>
            <param name="rightValue">The second value.</param>
            <param name="relationalOperator">The relational operator.</param>
            <returns>Result of the given relational operator.</returns>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.LeftExpression">
            <summary>
            Gets the left expression.
            </summary>
            <value>The left expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.RightExpression">
            <summary>
            Gets the right expression.
            </summary>
            <value>The right expression.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionRelationalExpression.RelationalOperator">
            <summary>
            Gets the relational operator.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionRelationalOperator">
            <summary>
            Relational operators used in conditions.
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Equal">
            <summary>
            Equality (==).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.NotEqual">
            <summary>
            Inequality (!=).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Less">
            <summary>
            Less than (&lt;).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.Greater">
            <summary>
            Greater than (&gt;).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.LessOrEqual">
            <summary>
            Less than or equal (&lt;=).
            </summary>
        </member>
        <member name="F:NLog.Conditions.ConditionRelationalOperator.GreaterOrEqual">
            <summary>
            Greater than or equal (&gt;=).
            </summary>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenizer">
            <summary>
            Hand-written tokenizer for conditions.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.#cctor">
            <summary>
            Initializes static members of the ConditionTokenizer class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Conditions.ConditionTokenizer" /> class.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.InitTokenizer(System.String)">
            <summary>
            Initializes the tokenizer with a given input string.
            </summary>
            <param name="inputString">The input string.</param>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.Expect(NLog.Conditions.ConditionTokenType)">
            <summary>
            Asserts current token type and advances to the next token.
            </summary>
            <param name="tokenType">Expected token type.</param>
            <remarks>If token type doesn't match, an exception is thrown.</remarks>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.EatKeyword">
            <summary>
            Asserts that current token is a keyword and returns its value and advances to the next token.
            </summary>
            <returns>Keyword value.</returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsKeyword(System.String)">
            <summary>
            Gets or sets a value indicating whether current keyword is equal to the specified value.
            </summary>
            <param name="keyword">The keyword.</param>
            <returns>
            A value of <c>true</c> if current keyword is equal to the specified value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsEOF">
            <summary>
            Gets or sets a value indicating whether the tokenizer has reached the end of the token stream.
            </summary>
            <returns>
            A value of <c>true</c> if the tokenizer has reached the end of the token stream; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsNumber">
            <summary>
            Gets or sets a value indicating whether current token is a number.
            </summary>
            <returns>
            A value of <c>true</c> if current token is a number; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.IsToken(NLog.Conditions.ConditionTokenType)">
            <summary>
            Gets or sets a value indicating whether the specified token is of specified type.
            </summary>
            <param name="tokenType">The token type.</param>
            <returns>
            A value of <c>true</c> if current token is of specified type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.GetNextToken">
            <summary>
            Gets the next token and sets <see cref="P:NLog.Conditions.ConditionTokenizer.TokenType" /> and <see cref="P:NLog.Conditions.ConditionTokenizer.TokenValue" /> properties.
            </summary>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenPosition">
            <summary>
            Gets the token position.
            </summary>
            <value>The token position.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenType">
            <summary>
            Gets the type of the token.
            </summary>
            <value>The type of the token.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.TokenValue">
            <summary>
            Gets the token value.
            </summary>
            <value>The token value.</value>
        </member>
        <member name="P:NLog.Conditions.ConditionTokenizer.StringTokenValue">
            <summary>
            Gets the value of a string token.
            </summary>
            <value>The string token value.</value>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenizer.CharToTokenType">
            <summary>
            Mapping between characters and token types for punctuations.
            </summary>
        </member>
        <member name="M:NLog.Conditions.ConditionTokenizer.CharToTokenType.#ctor(System.Char,NLog.Conditions.ConditionTokenType)">
            <summary>
            Initializes a new instance of the CharToTokenType struct.
            </summary>
            <param name="character">The character.</param>
            <param name="tokenType">Type of the token.</param>
        </member>
        <member name="T:NLog.Conditions.ConditionTokenType">
            <summary>
            Token types for condition expressions.
            </summary>
        </member>
        <member name="T:NLog.Config.AdvancedAttribute">
            <summary>
            Marks the class or a member as advanced. Advanced classes and members are hidden by 
            default in generated documentation.
            </summary>
        </member>
        <member name="M:NLog.Config.AdvancedAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.AdvancedAttribute" /> class.
            </summary>
        </member>
        <member name="T:NLog.Config.AppDomainFixedOutputAttribute">
            <summary>
            Identifies that the output of layout or layout render does not change for the lifetime of the current appdomain.
            </summary>
        </member>
        <member name="T:NLog.Config.ArrayParameterAttribute">
            <summary>
            Used to mark configurable parameters which are arrays. 
            Specifies the mapping between XML elements and .NET types.
            </summary>
        </member>
        <member name="M:NLog.Config.ArrayParameterAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.ArrayParameterAttribute" /> class.
            </summary>
            <param name="itemType">The type of the array item.</param>
            <param name="elementName">The XML element name that represents the item.</param>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ItemType">
            <summary>
            Gets the .NET type of the array item.
            </summary>
        </member>
        <member name="P:NLog.Config.ArrayParameterAttribute.ElementName">
            <summary>
            Gets the XML element name.
            </summary>
        </member>
        <member name="T:NLog.Config.ConfigSectionHandler">
            <summary>
            NLog configuration section handler class for configuring NLog from App.config.
            </summary>
        </member>
        <member name="M:NLog.Config.ConfigSectionHandler.System#Configuration#IConfigurationSectionHandler#Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent">Parent object.</param>
            <param name="configContext">Configuration context object.</param>
            <param name="section">Section XML node.</param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="T:NLog.Config.DefaultParameterAttribute">
            <summary>
            Attribute used to mark the default parameters for layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Config.DefaultParameterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.DefaultParameterAttribute" /> class.
            </summary>
        </member>
        <member name="T:NLog.Config.Factory`2">
            <summary>
            Factory for class-based items.
            </summary>
            <typeparam name="TBaseType">The base type of each item.</typeparam>
            <typeparam name="TAttributeType">The type of the attribute used to annotate itemss.</typeparam>
        </member>
        <member name="T:NLog.Config.INamedItemFactory`2">
            <summary>
            Represents a factory of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
            <typeparam name="TInstanceType">Base type for each item instance.</typeparam>
            <typeparam name="TDefinitionType">Item definition type (typically <see cref="T:System.Type" /> or <see cref="T:System.Reflection.MethodInfo" />).</typeparam>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.RegisterDefinition(System.String,`1)">
            <summary>
            Registers new item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="itemDefinition">Item definition.</param>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.TryGetDefinition(System.String,`1@)">
            <summary>
            Tries to get registed item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">Reference to a variable which will store the item definition.</param>
            <returns>Item definition.</returns>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.CreateInstance(System.String)">
            <summary>
            Creates item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <returns>Newly created item instance.</returns>
        </member>
        <member name="M:NLog.Config.INamedItemFactory`2.TryCreateInstance(System.String,`0@)">
            <summary>
            Tries to create an item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">The result.</param>
            <returns>True if instance was created successfully, false otherwise.</returns>
        </member>
        <member name="P:NLog.Config.INamedItemFactory`2.AllRegisteredItems">
            <summary>
            Gets a collection of all registered items in the factory.
            </summary>
            <returns>Sequence of key/value pairs where each key represents the name 
            of the item and value is the <typeparamref name="TDefinitionType" /> of
            the item.</returns>
        </member>
        <member name="T:NLog.Config.IFactory">
            <summary>
            Provides means to populate factories of named items (such as targets, layouts, layout renderers, etc.).
            </summary>
        </member>
        <member name="M:NLog.Config.Factory`2.ScanAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the assembly.
            </summary>
            <param name="theAssembly">The assembly.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.Clear">
            <summary>
            Clears the contents of the factory.
            </summary>
        </member>
        <member name="M:NLog.Config.Factory`2.RegisterDefinition(System.String,System.Type)">
            <summary>
            Registers a single type definition.
            </summary>
            <param name="name">The item name.</param>
            <param name="type">The type of the item.</param>
        </member>
        <member name="M:NLog.Config.Factory`2.TryGetDefinition(System.String,System.Type@)">
            <summary>
            Tries to get registed item definition.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">Reference to a variable which will store the item definition.</param>
            <returns>Item definition.</returns>
        </member>
        <member name="M:NLog.Config.Factory`2.TryCreateInstance(System.String,`0@)">
            <summary>
            Tries to create an item instance.
            </summary>
            <param name="itemName">Name of the item.</param>
            <param name="result">The result.</param>
            <returns>True if instance was created successfully, false otherwise.</returns>
        </member>
        <member name="M:NLog.Config.Factory`2.CreateInstance(System.String)">
            <summary>
            Creates an item instance.
            </summary>
            <param name="name">The name of the item.</param>
            <returns>Created item.</returns>
        </member>
        <member name="P:NLog.Config.Factory`2.AllRegisteredItems">
            <summary>
            Gets a collection of all registered items in the factory.
            </summary>
            <returns>Sequence of key/value pairs where each key represents the name 
            of the item and value is the <see cref="T:System.Type" /> of
            the item.</returns>
        </member>
        <member name="T:NLog.Config.IInstallable">
            <summary>
            Implemented by objects which support installation and uninstallation.
            </summary>
        </member>
        <member name="M:NLog.Config.IInstallable.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Config.IInstallable.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Config.IInstallable.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="T:NLog.Config.InstallationContext">
            <summary>
            Provides context for install/uninstall operations.
            </summary>
        </member>
        <member name="F:NLog.Config.InstallationContext.logLevel2ConsoleColor">
            <summary>
            Mapping between log levels and console output colors.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext" /> class.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.InstallationContext" /> class.
            </summary>
            <param name="logOutput">The log output.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Trace(System.String,System.Object[])">
            <summary>
            Logs the specified trace message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Debug(System.String,System.Object[])">
            <summary>
            Logs the specified debug message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Info(System.String,System.Object[])">
            <summary>
            Logs the specified informational message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Warning(System.String,System.Object[])">
            <summary>
            Logs the specified warning message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Error(System.String,System.Object[])">
            <summary>
            Logs the specified error message.
            </summary>
            <param name="message">The message.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:NLog.Config.InstallationContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Config.InstallationContext.CreateLogEvent">
            <summary>
            Creates the log event which can be used to render layouts during installation/uninstallations.
            </summary>
            <returns>Log event info object.</returns>
        </member>
        <member name="P:NLog.Config.InstallationContext.State">
            <summary>
            Gets the installation state.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.LogLevel">
            <summary>
            Gets or sets the installation log level.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.IgnoreFailures">
            <summary>
            Gets or sets a value indicating whether to ignore failures during installation.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.Parameters">
            <summary>
            Gets the installation parameters.
            </summary>
        </member>
        <member name="P:NLog.Config.InstallationContext.LogOutput">
            <summary>
            Gets or sets the log output.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingConfiguration">
            <summary>
            Keeps logging configuration and provides simple API
            to modify it.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfiguration" /> class.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.AddTarget(System.String,NLog.Targets.Target)">
            <summary>
            Registers the specified target object under a given name.
            </summary>
            <param name="name">
            Name of the target.
            </param>
            <param name="target">
            The target object.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FindTargetByName(System.String)">
            <summary>
            Finds the target with the specified name.
            </summary>
            <param name="name">
            The name of the target to be found.
            </param>
            <returns>
            Found target or <see langword="null" /> when the target is not found.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.GetConfiguredNamedTargets">
            <summary>
            Returns a collection of named targets specified in the configuration.
            </summary>
            <returns>
            A list of named targets.
            </returns>
            <remarks>
            Unnamed targets (such as those wrapped by other targets) are not returned.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Reload">
            <summary>
            Called by LogManager when one of the log configuration files changes.
            </summary>
            <returns>
            A new instance of <see cref="T:NLog.Config.LoggingConfiguration" /> that represents the updated configuration.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.RemoveTarget(System.String)">
            <summary>
            Removes the specified named target.
            </summary>
            <param name="name">
            Name of the target.
            </param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Install(NLog.Config.InstallationContext)">
            <summary>
            Installs target-specific objects on current system.
            </summary>
            <param name="installationContext">The installation context.</param>
            <remarks>
            Installation typically runs with administrative permissions.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Uninstalls target-specific objects from current system.
            </summary>
            <param name="installationContext">The installation context.</param>
            <remarks>
            Uninstallation typically runs with administrative permissions.
            </remarks>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.Close">
            <summary>
            Closes all targets and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.FlushAllTargets(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes any pending log messages on all appenders.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Config.LoggingConfiguration.ValidateConfig">
            <summary>
            Validates the configuration.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.FileNamesToWatch">
            <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.LoggingRules">
            <summary>
            Gets the collection of logging rules.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingConfiguration.AllTargets">
            <summary>
            Gets all targets.
            </summary>
        </member>
        <member name="T:NLog.Config.LoggingConfigurationChangedEventArgs">
            <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationChanged" /> events.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfigurationChangedEventArgs.#ctor(NLog.Config.LoggingConfiguration,NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationChangedEventArgs" /> class.
            </summary>
            <param name="oldConfiguration">The old configuration.</param>
            <param name="newConfiguration">The new configuration.</param>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.OldConfiguration">
            <summary>
            Gets the old configuration.
            </summary>
            <value>The old configuration.</value>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationChangedEventArgs.NewConfiguration">
            <summary>
            Gets the new configuration.
            </summary>
            <value>The new configuration.</value>
        </member>
        <member name="T:NLog.Config.LoggingConfigurationReloadedEventArgs">
            <summary>
            Arguments for <see cref="E:NLog.LogFactory.ConfigurationReloaded" />.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingConfigurationReloadedEventArgs.#ctor(System.Boolean,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingConfigurationReloadedEventArgs" /> class.
            </summary>
            <param name="succeeded">Whether configuration reload has succeeded.</param>
            <param name="exception">The exception during configuration reload.</param>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Succeeded">
            <summary>
            Gets a value indicating whether configuration reload has succeeded.
            </summary>
            <value>A value of <c>true</c> if succeeded; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:NLog.Config.LoggingConfigurationReloadedEventArgs.Exception">
            <summary>
            Gets the exception which occurred during configuration reload.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:NLog.Config.LoggingRule">
            <summary>
            Represents a logging rule. An equivalent of &lt;logger /&gt; configuration element.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule" /> class.
            </summary>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.LogLevel,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule" /> class.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="minLevel">Minimum log level needed to trigger this rule.</param>
            <param name="target">Target to be written to when the rule matches.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.#ctor(System.String,NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.LoggingRule" /> class.
            </summary>
            <param name="loggerNamePattern">Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends.</param>
            <param name="target">Target to be written to when the rule matches.</param>
            <remarks>By default no logging levels are defined. You should call <see cref="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)" /> and <see cref="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)" /> to set them.</remarks>
        </member>
        <member name="M:NLog.Config.LoggingRule.EnableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Enables logging for a particular level.
            </summary>
            <param name="level">Level to be enabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.DisableLoggingForLevel(NLog.LogLevel)">
            <summary>
            Disables logging for a particular level.
            </summary>
            <param name="level">Level to be disabled.</param>
        </member>
        <member name="M:NLog.Config.LoggingRule.ToString">
            <summary>
            Returns a string representation of <see cref="T:NLog.Config.LoggingRule" />. Used for debugging.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.IsLoggingEnabledForLevel(NLog.LogLevel)">
            <summary>
            Checks whether te particular log level is enabled for this rule.
            </summary>
            <param name="level">Level to be checked.</param>
            <returns>A value of <see langword="true" /> when the log level is enabled, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:NLog.Config.LoggingRule.NameMatches(System.String)">
            <summary>
            Checks whether given name matches the logger name pattern.
            </summary>
            <param name="loggerName">String to be matched.</param>
            <returns>A value of <see langword="true" /> when the name matches, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="P:NLog.Config.LoggingRule.Targets">
            <summary>
            Gets a collection of targets that should be written to when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.ChildRules">
            <summary>
            Gets a collection of child rules to be evaluated when this rule matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Filters">
            <summary>
            Gets a collection of filters to be checked before writing to targets.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.Final">
            <summary>
            Gets or sets a value indicating whether to quit processing any further rule when this one matches.
            </summary>
        </member>
        <member name="P:NLog.Config.LoggingRule.LoggerNamePattern">
            <summary>
            Gets or sets logger name pattern.
            </summary>
            <remarks>
            Logger name pattern. It may include the '*' wildcard at the beginning, at the end or at both ends but not anywhere else.
            </remarks>
        </member>
        <member name="P:NLog.Config.LoggingRule.Levels">
            <summary>
            Gets or sets the collection of log levels enabled by this rule.
            </summary>
            <value>The log levels.</value>
        </member>
        <member name="T:NLog.Config.MethodFactory`2">
            <summary>
            Factory for locating methods.
            </summary>
            <typeparam name="TClassAttributeType">The type of the class marker attribute.</typeparam>
            <typeparam name="TMethodAttributeType">The type of the method marker attribute.</typeparam>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.ScanAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Scans the assembly for classes marked with <typeparamref name="TClassAttributeType" />
            and methods marked with <typeparamref name="TMethodAttributeType" /> and adds them 
            to the factory.
            </summary>
            <param name="theAssembly">The assembly.</param>
            <param name="prefix">The prefix to use for names.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.Clear">
            <summary>
            Clears contents of the factory.
            </summary>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.RegisterDefinition(System.String,System.Reflection.MethodInfo)">
            <summary>
            Registers the definition of a single method.
            </summary>
            <param name="name">The method name.</param>
            <param name="methodInfo">The method info.</param>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.TryCreateInstance(System.String,System.Reflection.MethodInfo@)">
            <summary>
            Tries to retrieve method by name.
            </summary>
            <param name="name">The method name.</param>
            <param name="result">The result.</param>
            <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.CreateInstance(System.String)">
            <summary>
            Retrieves method by name.
            </summary>
            <param name="name">Method name.</param>
            <returns>MethodInfo object.</returns>
        </member>
        <member name="M:NLog.Config.MethodFactory`2.TryGetDefinition(System.String,System.Reflection.MethodInfo@)">
            <summary>
            Tries to get method definition.
            </summary>
            <param name="name">The method .</param>
            <param name="result">The result.</param>
            <returns>A value of <c>true</c> if the method was found, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:NLog.Config.MethodFactory`2.AllRegisteredItems">
            <summary>
            Gets a collection of all registered items in the factory.
            </summary>
            <returns>
            Sequence of key/value pairs where each key represents the name
            of the item and value is the <see cref="T:System.Reflection.MethodInfo" /> of
            the item.
            </returns>
        </member>
        <member name="T:NLog.Config.NLogFactories">
            <summary>
            Provides registration information for named items (targets, layouts, layout renderers, etc.) managed by NLog.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogFactories.#cctor">
            <summary>
            Initializes static members of the NLogFactories class.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogFactories.#ctor(System.Reflection.Assembly[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogFactories" /> class.
            </summary>
            <param name="assemblies">The assemblies to scan for named items.</param>
        </member>
        <member name="M:NLog.Config.NLogFactories.RegisterItemsFromAssembly(System.Reflection.Assembly)">
            <summary>
            Registers named items from the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:NLog.Config.NLogFactories.RegisterItemsFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Registers named items from the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="itemNamePrefix">Item name prefix.</param>
        </member>
        <member name="M:NLog.Config.NLogFactories.Clear">
            <summary>
            Clears the contents of all factories.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogFactories.RegisterType(System.Type,System.String)">
            <summary>
            Registers the type.
            </summary>
            <param name="type">The type to register.</param>
            <param name="itemNamePrefix">The item name prefix.</param>
        </member>
        <member name="P:NLog.Config.NLogFactories.Default">
            <summary>
            Gets or sets default singleton instance of <see cref="T:NLog.Config.NLogFactories" />.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogFactories.TargetFactory">
            <summary>
            Gets the <see cref="T:NLog.Targets.Target" /> factory.
            </summary>
            <value>The target factory.</value>
        </member>
        <member name="P:NLog.Config.NLogFactories.FilterFactory">
            <summary>
            Gets the <see cref="T:NLog.Filters.Filter" /> factory.
            </summary>
            <value>The filter factory.</value>
        </member>
        <member name="P:NLog.Config.NLogFactories.LayoutRendererFactory">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer" /> factory.
            </summary>
            <value>The layout renderer factory.</value>
        </member>
        <member name="P:NLog.Config.NLogFactories.LayoutFactory">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.LayoutRenderer" /> factory.
            </summary>
            <value>The layout factory.</value>
        </member>
        <member name="P:NLog.Config.NLogFactories.AmbientPropertyFactory">
            <summary>
            Gets the ambient property factory.
            </summary>
            <value>The ambient property factory.</value>
        </member>
        <member name="P:NLog.Config.NLogFactories.ConditionMethodFactory">
            <summary>
            Gets the condition method factory.
            </summary>
            <value>The condition method factory.</value>
        </member>
        <member name="T:NLog.Config.NLogXmlElement">
            <summary>
            Represents simple XML element with case-insensitive attribute semantics.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement" /> class.
            </summary>
            <param name="inputUri">The input URI.</param>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.NLogXmlElement" /> class.
            </summary>
            <param name="reader">The reader to initialize element from.</param>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NLog.Config.NLogXmlElement" /> class from being created.
            </summary>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.Elements(System.String)">
            <summary>
            Returns children elements with the specified element name.
            </summary>
            <param name="elementName">Name of the element.</param>
            <returns>Children elements with the specified element name.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetRequiredAttribute(System.String)">
            <summary>
            Gets the required attribute.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>Attribute value.</returns>
            <remarks>Throws if the attribute is not specified.</remarks>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetOptionalBooleanAttribute(System.String,System.Boolean)">
            <summary>
            Gets the optional boolean attribute value.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">Default value to return if the attribute is not found.</param>
            <returns>Boolean attribute value or default.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.GetOptionalAttribute(System.String,System.String)">
            <summary>
            Gets the optional attribute value.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Value of the attribute or default value.</returns>
        </member>
        <member name="M:NLog.Config.NLogXmlElement.AssertName(System.String[])">
            <summary>
            Asserts that the name of the element is among specified element names.
            </summary>
            <param name="allowedNames">The allowed names.</param>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.LocalName">
            <summary>
            Gets the element name.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.AttributeValues">
            <summary>
            Gets the dictionary of attribute values.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.Children">
            <summary>
            Gets the collection of child elements.
            </summary>
        </member>
        <member name="P:NLog.Config.NLogXmlElement.Value">
            <summary>
            Gets the value of the element.
            </summary>
        </member>
        <member name="T:NLog.Config.RequiredParameterAttribute">
            <summary>
            Attribute used to mark the required parameters for targets,
            layout targets and filters.
            </summary>
        </member>
        <member name="T:NLog.Config.RuntimeOS">
            <summary>
            Supported operating systems.
            </summary>
            <remarks>
            If you add anything here, make sure to add the appropriate detection
            code to <see cref="T:NLog.Internal.PlatformDetector" /></remarks>
        </member>
        <member name="F:NLog.Config.RuntimeOS.Any">
            <summary>
            Any operating system.
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeOS.Unix">
            <summary>
            Unix/Linux operating systems.
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeOS.WindowsCE">
            <summary>
            Windows CE.
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeOS.Windows">
            <summary>
            Desktop versions of Windows (95,98,ME).
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeOS.WindowsNT">
            <summary>
            Windows NT, 2000, 2003 and future versions based on NT technology.
            </summary>
        </member>
        <member name="F:NLog.Config.RuntimeOS.Unknown">
            <summary>
            Unknown operating system.
            </summary>
        </member>
        <member name="T:NLog.Config.SimpleConfigurator">
            <summary>
            Provides simple programmatic configuration API used for trivial logging cases.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info" /> level are output to the console.
            </summary>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForConsoleLogging(NLog.LogLevel)">
            <summary>
            Configures NLog for console logging so that all messages above and including
            the specified level are output to the console.
            </summary>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target)">
            <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the <see cref="F:NLog.LogLevel.Info" /> level are output.
            </summary>
            <param name="target">The target to log all messages to.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForTargetLogging(NLog.Targets.Target,NLog.LogLevel)">
            <summary>
            Configures NLog for to log to the specified target so that all messages 
            above and including the specified level are output.
            </summary>
            <param name="target">The target to log all messages to.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the <see cref="F:NLog.LogLevel.Info" /> level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
        </member>
        <member name="M:NLog.Config.SimpleConfigurator.ConfigureForFileLogging(System.String,NLog.LogLevel)">
            <summary>
            Configures NLog for file logging so that all messages above and including
            the specified level are written to the specified file.
            </summary>
            <param name="fileName">Log file name.</param>
            <param name="minLevel">The minimal logging level.</param>
        </member>
        <member name="T:NLog.Config.StackTraceUsage">
            <summary>
            Value indicating how stack trace should be captured when processing the log event.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.None">
            <summary>
            Stack trace should not be captured.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.WithoutSource">
            <summary>
            Stack trace should be captured without source-level information.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.WithSource">
            <summary>
            Stack trace should be captured including source-level information such as line numbers.
            </summary>
        </member>
        <member name="F:NLog.Config.StackTraceUsage.Max">
            <summary>
            Capture maximum amount of the stack trace information supported on the plaform.
            </summary>
        </member>
        <member name="T:NLog.Config.ThreadAgnosticAttribute">
            <summary>
            Marks the layout or layout renderer as producing correct results regardless of the thread
            it's running on.
            </summary>
        </member>
        <member name="T:NLog.Config.XmlLoggingConfiguration">
            <summary>
            A class for configuring NLog through an XML configuration file 
            (App.config style or App.nlog style).
            </summary>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="element">The XML element.</param>
            <param name="fileName">Name of the XML file.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="element">The XML element.</param>
            <param name="fileName">Name of the XML file.</param>
            <param name="ignoreErrors">If set to <c>true</c> errors will be ignored during file processing.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="fileName">Configuration file to be read.</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.#ctor(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Config.XmlLoggingConfiguration" /> class.
            </summary>
            <param name="reader">
                <see cref="T:System.Xml.XmlReader" /> containing the configuration section.</param>
            <param name="fileName">Name of the file that contains the element (to be used as a base for including other files).</param>
            <param name="ignoreErrors">Ignore any errors during configuration.</param>
        </member>
        <member name="M:NLog.Config.XmlLoggingConfiguration.Reload">
            <summary>
            Re-reads the original configuration file and returns the new <see cref="T:NLog.Config.LoggingConfiguration" /> object.
            </summary>
            <returns>The new <see cref="T:NLog.Config.XmlLoggingConfiguration" /> object.</returns>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AppConfig">
            <summary>
            Gets the default <see cref="T:NLog.Config.LoggingConfiguration" /> object by parsing 
            the application configuration file (<c>app.exe.config</c>).
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.AutoReload">
            <summary>
            Gets or sets a value indicating whether the configuration files
            should be watched for changes and reloaded automatically when changed.
            </summary>
        </member>
        <member name="P:NLog.Config.XmlLoggingConfiguration.FileNamesToWatch">
            <summary>
            Gets the collection of file names which should be watched for changes by NLog.
            This is the list of configuration files processed.
            If the <c>autoReload</c> attribute is not set it returns empty collection.
            </summary>
        </member>
        <member name="T:NLog.Filters.ConditionBasedFilter">
            <summary>
            Matches when the specified condition is met.
            </summary>
            <remarks>
            Conditions are expressed using a simple language 
            described <a href="conditions.html">here</a>.
            </remarks>
        </member>
        <member name="T:NLog.Filters.Filter">
            <summary>
            An abstract filter class. Provides a way to eliminate log messages
            based on properties other than logger name and log level.
            </summary>
        </member>
        <member name="M:NLog.Filters.Filter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.Filter" /> class.
            </summary>
        </member>
        <member name="M:NLog.Filters.Filter.GetFilterResult(NLog.LogEventInfo)">
            <summary>
            Gets the result of evaluating filter against given log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Filter result.</returns>
        </member>
        <member name="M:NLog.Filters.Filter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
                <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
        </member>
        <member name="P:NLog.Filters.Filter.Action">
            <summary>
            Gets or sets the action to be taken when filter matches.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="M:NLog.Filters.ConditionBasedFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
                <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
        </member>
        <member name="P:NLog.Filters.ConditionBasedFilter.Condition">
            <summary>
            Gets or sets the condition expression.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="T:NLog.Filters.FilterAttribute">
            <summary>
            Marks class as a layout renderer and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.Filters.FilterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.FilterAttribute" /> class.
            </summary>
            <param name="name">Name of the filter.</param>
        </member>
        <member name="T:NLog.Filters.FilterResult">
            <summary>
            Filter result.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Neutral">
            <summary>
            The filter doesn't want to decide whether to log or discard the message.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Log">
            <summary>
            The message should be logged.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.Ignore">
            <summary>
            The message should not be logged.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.LogFinal">
            <summary>
            The message should be logged and processing should be finished.
            </summary>
        </member>
        <member name="F:NLog.Filters.FilterResult.IgnoreFinal">
            <summary>
            The message should not be logged and processing should be finished.
            </summary>
        </member>
        <member name="T:NLog.Filters.LayoutBasedFilter">
            <summary>
            A base class for filters that are based on comparing a value to a layout.
            </summary>
        </member>
        <member name="M:NLog.Filters.LayoutBasedFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.LayoutBasedFilter" /> class.
            </summary>
        </member>
        <member name="P:NLog.Filters.LayoutBasedFilter.Layout">
            <summary>
            Gets or sets the layout to be used to filter log messages.
            </summary>
            <value>The layout.</value>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="T:NLog.Filters.WhenContainsFilter">
            <summary>
            Matches when the calculated layout contains the specified substring. 
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
                <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="P:NLog.Filters.WhenContainsFilter.Substring">
            <summary>
            Gets or sets the substring to be matched.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="T:NLog.Filters.WhenEqualFilter">
            <summary>
            Matches when the calculated layout is equal to the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
                <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
        </member>
        <member name="P:NLog.Filters.WhenEqualFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="P:NLog.Filters.WhenEqualFilter.CompareTo">
            <summary>
            Gets or sets a string to compare the layout to.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="T:NLog.Filters.WhenNotContainsFilter">
            <summary>
            Matches when the calculated layout does NOT contain the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotContainsFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
                <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.Substring">
            <summary>
            Gets or sets the substring to be matched.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="P:NLog.Filters.WhenNotContainsFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="T:NLog.Filters.WhenNotEqualFilter">
            <summary>
            Matches when the calculated layout is NOT equal to the specified substring.
            This filter is deprecated in favour of <c>&lt;when /&gt;</c> which is based on <a href="conditions.html">contitions</a>.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Filters.WhenNotEqualFilter" /> class.
            </summary>
        </member>
        <member name="M:NLog.Filters.WhenNotEqualFilter.Check(NLog.LogEventInfo)">
            <summary>
            Checks whether log event should be logged or not.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>
                <see cref="F:NLog.Filters.FilterResult.Ignore" /> - if the log event should be ignored<br /><see cref="F:NLog.Filters.FilterResult.Neutral" /> - if the filter doesn't want to decide<br /><see cref="F:NLog.Filters.FilterResult.Log" /> - if the log event should be logged<br />
            .</returns>
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.CompareTo">
            <summary>
            Gets or sets a string to compare the layout to.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="P:NLog.Filters.WhenNotEqualFilter.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing strings.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="T:NLog.GDC">
            <summary>
            Global Diagnostics Context - used for log4net compatibility.
            </summary>
        </member>
        <member name="T:NLog.GlobalDiagnosticsContext">
            <summary>
            Global Diagnostics Context - a dictionary structure to hold per-application-instance values.
            </summary>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Set(System.String,System.String)">
            <summary>
            Sets the Global Diagnostics Context item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Get(System.String)">
            <summary>
            Gets the Global Diagnostics Context named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of String.Empty if the value is not present.</returns>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread GDC.</returns>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Remove(System.String)">
            <summary>
            Removes the specified item from the Global Diagnostics Context.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.GlobalDiagnosticsContext.Clear">
            <summary>
            Clears the content of the GDC.
            </summary>
        </member>
        <member name="T:NLog.Internal.AspHelper">
            <summary>
            Various helper methods for accessing state of ASP application.
            </summary>
        </member>
        <member name="T:NLog.Internal.CurrentTimeGetter">
            <summary>
            Optimized methods to get current time.
            </summary>
        </member>
        <member name="M:NLog.Internal.CurrentTimeGetter.#cctor">
            <summary>
            Initializes static members of the CurrentTimeGetter class.
            </summary>
        </member>
        <member name="P:NLog.Internal.CurrentTimeGetter.Now">
            <summary>
            Gets the current time in an optimized fashion.
            </summary>
            <value>Current time.</value>
        </member>
        <member name="T:NLog.Internal.DictionaryAdapter`2">
            <summary>
            Provides untyped IDictionary interface on top of generic IDictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the DictionaryAdapter class.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key">The <see cref="T:System.Object" /> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object" /> to use as the value of the element to add.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary" /> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" /> object.</param>
            <returns>
            True if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator" /> object for the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array" /> at which copying begins.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <value />
            <returns>
            An <see cref="T:System.Collections.ICollection" /> object containing the values in the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <value />
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.ICollection" />.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
            <value />
            <returns>true if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </summary>
            <value />
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object has a fixed size.
            </summary>
            <value />
            <returns>true if the <see cref="T:System.Collections.IDictionary" /> object has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> object is read-only.
            </summary>
            <value />
            <returns>true if the <see cref="T:System.Collections.IDictionary" /> object is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.
            </summary>
            <value />
            <returns>
            An <see cref="T:System.Collections.ICollection" /> object containing the keys of the <see cref="T:System.Collections.IDictionary" /> object.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object" /> with the specified key.
            </summary>
            <param name="key">Dictionary key.</param>
            <value>Value corresponding to key or null if not found</value>
        </member>
        <member name="T:NLog.Internal.DictionaryAdapter`2.MyEnumerator">
            <summary>
            Wrapper IDictionaryEnumerator.
            </summary>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.#ctor(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.DictionaryAdapter`2.MyEnumerator" /> class.
            </summary>
            <param name="wrapped">The wrapped.</param>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Entry">
            <summary>
            Gets both the key and the value of the current dictionary entry.
            </summary>
            <value />
            <returns>
            A <see cref="T:System.Collections.DictionaryEntry" /> containing both the key and the value of the current dictionary entry.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Key">
            <summary>
            Gets the key of the current dictionary entry.
            </summary>
            <value />
            <returns>
            The key of the current element of the enumeration.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Value">
            <summary>
            Gets the value of the current dictionary entry.
            </summary>
            <value />
            <returns>
            The value of the current element of the enumeration.
            </returns>
        </member>
        <member name="P:NLog.Internal.DictionaryAdapter`2.MyEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value />
            <returns>
            The current element in the collection.
            </returns>
        </member>
        <member name="T:NLog.Internal.EnumerableHelpers">
            <summary>
            LINQ-like helpers (cannot use LINQ because we must work with .NET 2.0 profile).
            </summary>
        </member>
        <member name="M:NLog.Internal.EnumerableHelpers.OfType``1(System.Collections.IEnumerable)">
            <summary>
            Filters the given enumerable to return only items of the specified type.
            </summary>
            <typeparam name="T">
            Type of the item.
            </typeparam>
            <param name="enumerable">
            The enumerable.
            </param>
            <returns>
            Items of specified type.
            </returns>
        </member>
        <member name="M:NLog.Internal.EnumerableHelpers.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Reverses the specified enumerable.
            </summary>
            <typeparam name="T">
            Type of enumerable item.
            </typeparam>
            <param name="enumerable">
            The enumerable.
            </param>
            <returns>
            Reversed enumerable.
            </returns>
        </member>
        <member name="M:NLog.Internal.EnumerableHelpers.Any``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Determines is the given predicate is met by any element of the enumerable.
            </summary>
            <typeparam name="T">Element type.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="predicate">The predicate.</param>
            <returns>True if predicate returns true for any element of the collection, false otherwise.</returns>
        </member>
        <member name="M:NLog.Internal.EnumerableHelpers.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the enumerable to list.
            </summary>
            <typeparam name="T">Type of the list element.</typeparam>
            <param name="enumerable">The enumerable.</param>
            <returns>List of elements.</returns>
        </member>
        <member name="T:NLog.Internal.EnvironmentHelper">
            <summary>
            Safe way to get environment variables.
            </summary>
        </member>
        <member name="T:NLog.Internal.FactoryHelper">
            <summary>
            Object construction helper.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.BaseFileAppender">
            <summary>
            Base class for optimized file appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="createParameters">The create parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
            <summary>
            Gets the file info.
            </summary>
            <param name="lastWriteTime">The last write time.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched">
            <summary>
            Records the last write time for a file.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.FileTouched(System.DateTime)">
            <summary>
            Records the last write time for a file to be specific date.
            </summary>
            <param name="dateTime">Date and time when the last write occurred.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileStream(System.Boolean)">
            <summary>
            Creates the file stream.
            </summary>
            <param name="allowConcurrentWrite">If set to <c>true</c> allow concurrent writes.</param>
            <returns>A <see cref="T:System.IO.FileStream" /> object which can be used to write to the file.</returns>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.LastWriteTime">
            <summary>
            Gets the last write time.
            </summary>
            <value>The last write time.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.OpenTime">
            <summary>
            Gets the open time of the file.
            </summary>
            <value>The open time.</value>
        </member>
        <member name="P:NLog.Internal.FileAppenders.BaseFileAppender.CreateFileParameters">
            <summary>
            Gets the file creation parameters.
            </summary>
            <value>The file creation parameters.</value>
        </member>
        <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender">
            <summary>
            Implementation of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> which caches 
            file information.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Close">
            <summary>
            Closes this instance of the appender.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Flush">
            <summary>
            Flushes this current appender.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
            <summary>
            Gets the file info.
            </summary>
            <param name="lastWriteTime">The last write time.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>True if the operation succeeded, false otherwise.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes to a file.
            </summary>
            <param name="bytes">The bytes to be written.</param>
        </member>
        <member name="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Factory">
            <summary>
            Factory class which creates <see cref="T:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender" /> objects.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.IFileAppenderFactory">
            <summary>
            Interface implemented by all factories capable of creating file appenders.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.IFileAppenderFactory.Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> which can be used to write to the file.</returns>
        </member>
        <member name="M:NLog.Internal.FileAppenders.CountingSingleProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.ICreateFileParameters">
            <summary>
            Interface that provides parameters for create file function.
            </summary>
        </member>
        <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender">
            <summary>
            Provides a multiprocess-safe atomic file appends while
            keeping the files open.
            </summary>
            <remarks>
            On Unix you can get all the appends to be atomic, even when multiple 
            processes are trying to write to the same file, because setting the file
            pointer to the end of the file and appending can be made one operation.
            On Win32 we need to maintain some synchronization between processes
            (global named mutex is used for this)
            </remarks>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes to be written.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
            <summary>
            Gets the file info.
            </summary>
            <param name="lastWriteTime">The last write time.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            True if the operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.MutexMultiProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender">
            <summary>
            Multi-process and multi-host file appender which attempts
            to get exclusive write access and retries if it's not available.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
            <summary>
            Gets the file info.
            </summary>
            <param name="lastWriteTime">The last write time.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            True if the operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.RetryingMultiProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender">
            <summary>
            Optimized single-process file appender which keeps the file open for exclusive write.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.#ctor(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.FileAppenders.SingleProcessFileAppender" /> class.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Write(System.Byte[])">
            <summary>
            Writes the specified bytes.
            </summary>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Flush">
            <summary>
            Flushes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.GetFileInfo(System.DateTime@,System.Int64@)">
            <summary>
            Gets the file info.
            </summary>
            <param name="lastWriteTime">The last write time.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            True if the operation succeeded, false otherwise.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileAppenders.SingleProcessFileAppender.Factory">
            <summary>
            Factory class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileAppenders.SingleProcessFileAppender.Factory.NLog#Internal#FileAppenders#IFileAppenderFactory#Open(System.String,NLog.Internal.FileAppenders.ICreateFileParameters)">
            <summary>
            Opens the appender for given file name and parameters.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="parameters">Creation parameters.</param>
            <returns>
            Instance of <see cref="T:NLog.Internal.FileAppenders.BaseFileAppender" /> which can be used to write to the file.
            </returns>
        </member>
        <member name="T:NLog.Internal.FileInfoHelper">
            <summary>
            Optimized routines to get the size and last write time of the specified file.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileInfoHelper.#cctor">
            <summary>
            Initializes static members of the FileInfoHelper class.
            </summary>
        </member>
        <member name="M:NLog.Internal.FileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <param name="lastWriteTime">The last write time of the file.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:NLog.Internal.FormHelper">
            <summary>
            Form helper methods.
            </summary>
        </member>
        <member name="M:NLog.Internal.FormHelper.CreateRichTextBox(System.String,System.Windows.Forms.Form)">
            <summary>
            Creates RichTextBox and docks in parentForm.
            </summary>
            <param name="name">Name of RichTextBox.</param>
            <param name="parentForm">Form to dock RichTextBox.</param>
            <returns>Created RichTextBox.</returns>
        </member>
        <member name="M:NLog.Internal.FormHelper.FindControl(System.String,System.Windows.Forms.Control)">
            <summary>
            Finds control embedded on searchControl.
            </summary>
            <param name="name">Name of the control.</param>
            <param name="searchControl">Control in which we're searching for control.</param>
            <returns>A value of null if no control has been found.</returns>
        </member>
        <member name="M:NLog.Internal.FormHelper.FindControl``1(System.String,System.Windows.Forms.Control)">
            <summary>
            Finds control of specified type embended on searchControl.
            </summary>
            <typeparam name="TControl">The type of the control.</typeparam>
            <param name="name">Name of the control.</param>
            <param name="searchControl">Control in which we're searching for control.</param>
            <returns>
            A value of null if no control has been found.
            </returns>
        </member>
        <member name="M:NLog.Internal.FormHelper.CreateForm(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a form.
            </summary>
            <param name="name">Name of form.</param>
            <param name="width">Width of form.</param>
            <param name="height">Height of form.</param>
            <param name="show">Auto show form.</param>
            <param name="showMinimized">If set to <c>true</c> the form will be minimized.</param>
            <param name="toolWindow">If set to <c>true</c> the form will be created as tool window.</param>
            <returns>Created form.</returns>
        </member>
        <member name="T:NLog.Internal.IRenderable">
            <summary>
            Interface implemented by layouts and layout renderers.
            </summary>
        </member>
        <member name="M:NLog.Internal.IRenderable.Render(NLog.LogEventInfo)">
            <summary>
            Renders the the value of layout or layout renderer in the context of the specified log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>String representation of a layout.</returns>
        </member>
        <member name="T:NLog.Internal.ISmtpClient">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="T:NLog.Internal.ISupportsInitialize">
            <summary>
            Supports object initialization and termination.
            </summary>
        </member>
        <member name="M:NLog.Internal.ISupportsInitialize.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:NLog.Internal.ISupportsInitialize.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="T:NLog.Internal.IUsesStackTrace">
            <summary>
            Allows components to request stack trace information to be provided in the <see cref="T:NLog.LogEventInfo" />.
            </summary>
        </member>
        <member name="P:NLog.Internal.IUsesStackTrace.StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="T:NLog.Internal.LogEventInfoBuffer">
            <summary>
            A cyclic buffer of <see cref="T:NLog.LogEventInfo" /> object.
            </summary>
        </member>
        <member name="M:NLog.Internal.LogEventInfoBuffer.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.LogEventInfoBuffer" /> class.
            </summary>
            <param name="size">Buffer size.</param>
            <param name="growAsNeeded">Whether buffer should grow as it becomes full.</param>
            <param name="growLimit">The maximum number of items that the buffer can grow to.</param>
        </member>
        <member name="M:NLog.Internal.LogEventInfoBuffer.Append(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer.
            </summary>
            <param name="eventInfo">Log event.</param>
            <returns>The number of items in the buffer.</returns>
        </member>
        <member name="M:NLog.Internal.LogEventInfoBuffer.GetEventsAndClear(NLog.Common.AsyncLogEventInfo[]@)">
            <summary>
            Gets the array of events accumulated in the buffer and clears the buffer as one atomic operation.
            </summary>
            <param name="returnValue">The return value.</param>
            <remarks>
            In case there are no items in the buffer, the function returns an empty array.
            </remarks>
        </member>
        <member name="P:NLog.Internal.LogEventInfoBuffer.Size">
            <summary>
            Gets the number of items in the array.
            </summary>
        </member>
        <member name="T:NLog.Internal.LoggerConfiguration">
            <summary>
            Logger configuration.
            </summary>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.#ctor(NLog.Internal.TargetWithFilterChain[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.LoggerConfiguration" /> class.
            </summary>
            <param name="targetsByLevel">The targets by level.</param>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.GetTargetsForLevel(NLog.LogLevel)">
            <summary>
            Gets targets for the specified level.
            </summary>
            <param name="level">The level.</param>
            <returns>Chain of targets with attached filters.</returns>
        </member>
        <member name="M:NLog.Internal.LoggerConfiguration.IsEnabled(NLog.LogLevel)">
            <summary>
            Determines whether the specified level is enabled.
            </summary>
            <param name="level">The level.</param>
            <returns>
            A value of <c>true</c> if the specified level is enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:NLog.Internal.MultiFileWatcher">
            <summary>
            Watches multiple files at the same time and raises an event whenever 
            a single change is detected in any of those files.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.StopWatching">
            <summary>
            Stops the watching.
            </summary>
        </member>
        <member name="M:NLog.Internal.MultiFileWatcher.Watch(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Watches the specified files for changes.
            </summary>
            <param name="fileNames">The file names.</param>
        </member>
        <member name="E:NLog.Internal.MultiFileWatcher.OnChange">
            <summary>
            Occurs when a change is detected in one of the monitored files.
            </summary>
        </member>
        <member name="T:NLog.Internal.MySmtpClient">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="M:NLog.Internal.MySmtpClient.NLog#Internal#ISmtpClient#get_Host">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="M:NLog.Internal.MySmtpClient.NLog#Internal#ISmtpClient#set_Host(System.String)">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="M:NLog.Internal.MySmtpClient.NLog#Internal#ISmtpClient#get_Port">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="M:NLog.Internal.MySmtpClient.NLog#Internal#ISmtpClient#set_Port(System.Int32)">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="M:NLog.Internal.MySmtpClient.NLog#Internal#ISmtpClient#get_Credentials">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="M:NLog.Internal.MySmtpClient.NLog#Internal#ISmtpClient#set_Credentials(System.Net.ICredentialsByHost)">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="M:NLog.Internal.MySmtpClient.NLog#Internal#ISmtpClient#get_EnableSsl">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="M:NLog.Internal.MySmtpClient.NLog#Internal#ISmtpClient#set_EnableSsl(System.Boolean)">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="M:NLog.Internal.MySmtpClient.NLog#Internal#ISmtpClient#Send(System.Net.Mail.MailMessage)">
            <summary>
            Supports mocking of SMTP Client code.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.INetworkSenderFactory">
            <summary>
            Creates instances of <see cref="T:NLog.Internal.NetworkSenders.NetworkSender" /> objects for given URLs.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.INetworkSenderFactory.Create(System.String)">
            <summary>
            Creates a new instance of the network sender based on a network URL.
            </summary>
            <param name="url">
            URL that determines the network sender to be created.
            </param>
            <returns>
            A newly created network sender.
            </returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.ISocket">
            <summary>
            Interface for mocking socket calls.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.NetworkSender">
            <summary>
            A base class for all network senders. Supports one-way sending of messages
            over various protocols.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.NetworkSender" /> class.
            </summary>
            <param name="url">The network URL.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Finalize">
            <summary>
            Finalizes an instance of the NetworkSender class.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Initialize">
            <summary>
            Initializes this network sender.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Close(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes any pending messages and invokes a continuation.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Send(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Send the given text over the specified protocol.
            </summary>
            <param name="bytes">Bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.Dispose">
            <summary>
            Closes the sender and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific close operation.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific flush.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Actually sends the given text over the specified protocol.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSender.ParseEndpointAddress(System.Uri,System.Net.Sockets.AddressFamily)">
            <summary>
            Parses the URI into an endpoint address.
            </summary>
            <param name="uri">The URI to parse.</param>
            <param name="addressFamily">The address family.</param>
            <returns>Parsed endpoint.</returns>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.NetworkSender.Address">
            <summary>
            Gets the address of the network endpoint.
            </summary>
        </member>
        <member name="P:NLog.Internal.NetworkSenders.NetworkSender.LastSendTime">
            <summary>
            Gets the last send time.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.NetworkSenderFactory">
            <summary>
            Default implementation of <see cref="T:NLog.Internal.NetworkSenders.INetworkSenderFactory" />.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.NetworkSenderFactory.Create(System.String)">
            <summary>
            Creates a new instance of the network sender based on a network URL:.
            </summary>
            <param name="url">
            URL that determines the network sender to be created.
            </param>
            <returns>
            A newly created network sender.
            </returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.SocketProxy">
            <summary>
            Socket proxy for mocking Socket code.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.SocketProxy" /> class.
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.Close">
            <summary>
            Closes the wrapped socket.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes ConnectAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes SendAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.SocketProxy.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            Invokes SendToAsync method on the wrapped socket.
            </summary>
            <param name="args">The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance containing the event data.</param>
            <returns>Result of original method.</returns>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender">
            <summary>
            Sends messages over a TCP network connection.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.TcpNetworkSender" /> class.
            </summary>
            <param name="url">URL. Must start with tcp://.</param>
            <param name="addressFamily">The address family.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates the socket with given parameters. 
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
            <returns>Instance of <see cref="T:NLog.Internal.NetworkSenders.ISocket" /> which represents the socket.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the socket.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoFlush(NLog.Common.AsyncContinuation)">
            <summary>
            Performs sender-specific flush.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Sends the specified text over the connected socket.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs">
            <summary>
            Facilitates mocking of <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> class.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.TcpNetworkSender.MySocketAsyncEventArgs.RaiseCompleted">
            <summary>
            Raises the Completed event.
            </summary>
        </member>
        <member name="T:NLog.Internal.NetworkSenders.UdpNetworkSender">
            <summary>
            Sends messages over the network as UDP datagrams.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.#ctor(System.String,System.Net.Sockets.AddressFamily)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.NetworkSenders.UdpNetworkSender" /> class.
            </summary>
            <param name="url">URL. Must start with udp://.</param>
            <param name="addressFamily">The address family.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.CreateSocket(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Creates the socket.
            </summary>
            <param name="addressFamily">The address family.</param>
            <param name="socketType">Type of the socket.</param>
            <param name="protocolType">Type of the protocol.</param>
            <returns>Implementation of <see cref="T:NLog.Internal.NetworkSenders.ISocket" /> to use.</returns>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoInitialize">
            <summary>
            Performs sender-specific initialization.
            </summary>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoClose(NLog.Common.AsyncContinuation)">
            <summary>
            Closes the socket.
            </summary>
            <param name="continuation">The continuation.</param>
        </member>
        <member name="M:NLog.Internal.NetworkSenders.UdpNetworkSender.DoSend(System.Byte[],System.Int32,System.Int32,NLog.Common.AsyncContinuation)">
            <summary>
            Sends the specified text as a UDP datagram.
            </summary>
            <param name="bytes">The bytes to be sent.</param>
            <param name="offset">Offset in buffer.</param>
            <param name="length">Number of bytes to send.</param>
            <param name="asyncContinuation">The async continuation to be invoked after the buffer has been sent.</param>
            <remarks>To be overridden in inheriting classes.</remarks>
        </member>
        <member name="T:NLog.Internal.ObjectGraphScanner">
            <summary>
            Scans (breadth-first) the object graph following all the edges whose are 
            instances implement <see cref="T:NLog.Config.INLogConfigurationItem" /> and returns all objects implementing a specified interfaces.
            </summary>
        </member>
        <member name="M:NLog.Internal.ObjectGraphScanner.FindReachableObjects``1(NLog.Config.INLogConfigurationItem[])">
            <summary>
            Finds the objects which implement <see cref="T:NLog.Config.INLogConfigurationItem" /> which are reachable
            from any of the given root objects when traversing the object graph over public properties.
            </summary>
            <typeparam name="T">Type of the objects to return.</typeparam>
            <param name="rootObjects">The root objects.</param>
            <returns>Ordered list of objects implementing T.</returns>
        </member>
        <member name="T:NLog.Internal.PlatformDetector">
            <summary>
            Detects the platform the NLog is running on.
            </summary>
        </member>
        <member name="T:NLog.Internal.PortableFileInfoHelper">
            <summary>
            Portable implementation of <see cref="T:NLog.Internal.FileInfoHelper" />.
            </summary>
        </member>
        <member name="M:NLog.Internal.PortableFileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <param name="lastWriteTime">The last write time of the file.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:NLog.Internal.PortableThreadIDHelper">
            <summary>
            Portable implementation of <see cref="T:NLog.Internal.ThreadIDHelper" />.
            </summary>
        </member>
        <member name="T:NLog.Internal.ThreadIDHelper">
            <summary>
            Returns details about current process and thread in a portable manner.
            </summary>
        </member>
        <member name="M:NLog.Internal.ThreadIDHelper.#cctor">
            <summary>
            Initializes static members of the ThreadIDHelper class.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.Instance">
            <summary>
            Gets the singleton instance of PortableThreadIDHelper or
            Win32ThreadIDHelper depending on runtime environment.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentThreadID">
            <summary>
            Gets current thread ID.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
        </member>
        <member name="P:NLog.Internal.ThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
        </member>
        <member name="M:NLog.Internal.PortableThreadIDHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.PortableThreadIDHelper" /> class.
            </summary>
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentThreadID">
            <summary>
            Gets current thread ID.
            </summary>
            <value />
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
            <value />
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
            <value />
        </member>
        <member name="P:NLog.Internal.PortableThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
            <value />
        </member>
        <member name="T:NLog.Internal.PropertyHelper">
            <summary>
            Reflection helpers for accessing properties.
            </summary>
        </member>
        <member name="T:NLog.Internal.SingleCallContinuation">
            <summary>
            Implements a single-call guard around given continuation function.
            </summary>
        </member>
        <member name="M:NLog.Internal.SingleCallContinuation.#ctor(NLog.Common.AsyncContinuation)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.SingleCallContinuation" /> class.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Internal.SingleCallContinuation.Function(System.Exception)">
            <summary>
            Continuation function which implements the single-call guard.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:NLog.Internal.SortHelpers">
            <summary>
            Provides helpers to sort log events and associated continuations.
            </summary>
        </member>
        <member name="M:NLog.Internal.SortHelpers.BucketSort``2(System.Collections.Generic.IEnumerable{``0},NLog.Internal.SortHelpers.KeySelector{``0,``1})">
            <summary>
            Performs bucket sort (group by) on an array of items and returns a dictionary for easy traversal of the result set.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="inputs">The inputs.</param>
            <param name="keySelector">The key selector function.</param>
            <returns>
            Dictonary where keys are unique input keys, and values are lists of <see cref="T:NLog.Common.AsyncLogEventInfo" />.
            </returns>
        </member>
        <member name="T:NLog.Internal.SortHelpers.KeySelector`2">
            <summary>
            Key selector delegate.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TKey">The type of the key.</typeparam>
            <param name="value">Value to extract key information from.</param>
            <returns>Key selected from log event.</returns>
        </member>
        <member name="T:NLog.Internal.StackTraceUsageUtils">
            <summary>
            Utilities for dealing with <see cref="T:NLog.Config.StackTraceUsage" /> values.
            </summary>
        </member>
        <member name="T:NLog.Internal.TargetWithFilterChain">
            <summary>
            Represents target with a chain of filters which determine
            whether logging should happen.
            </summary>
        </member>
        <member name="M:NLog.Internal.TargetWithFilterChain.#ctor(NLog.Targets.Target,System.Collections.Generic.IList{NLog.Filters.Filter})">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TargetWithFilterChain" /> class.
            </summary>
            <param name="target">The target.</param>
            <param name="filterChain">The filter chain.</param>
        </member>
        <member name="M:NLog.Internal.TargetWithFilterChain.GetStackTraceUsage">
            <summary>
            Gets the stack trace usage.
            </summary>
            <returns>A <see cref="T:NLog.Config.StackTraceUsage" /> value that determines stack trace handling.</returns>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.Target">
            <summary>
            Gets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.FilterChain">
            <summary>
            Gets the filter chain.
            </summary>
            <value>The filter chain.</value>
        </member>
        <member name="P:NLog.Internal.TargetWithFilterChain.NextInChain">
            <summary>
            Gets or sets the next <see cref="T:NLog.Internal.TargetWithFilterChain" /> item in the chain.
            </summary>
            <value>The next item in the chain.</value>
        </member>
        <member name="T:NLog.Internal.TimeoutContinuation">
            <summary>
            Wraps <see cref="T:NLog.Common.AsyncContinuation" /> with a timeout.
            </summary>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.#ctor(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.TimeoutContinuation" /> class.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:NLog.Internal.TimeoutContinuation.Function(System.Exception)">
            <summary>
            Continuation function which implements the timeout logic.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:NLog.Internal.UrlHelper">
            <summary>
            URL Encoding helper.
            </summary>
        </member>
        <member name="T:NLog.Internal.Win32FileInfoHelper">
            <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.FileInfoHelper" />.
            </summary>
        </member>
        <member name="M:NLog.Internal.Win32FileInfoHelper.GetFileInfo(System.String,System.IntPtr,System.DateTime@,System.Int64@)">
            <summary>
            Gets the information about a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="fileHandle">The file handle.</param>
            <param name="lastWriteTime">The last write time of the file.</param>
            <param name="fileLength">Length of the file.</param>
            <returns>
            A value of <c>true</c> if file information was retrieved successfully, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:NLog.Internal.Win32ThreadIDHelper">
            <summary>
            Win32-optimized implementation of <see cref="T:NLog.Internal.ThreadIDHelper" />.
            </summary>
        </member>
        <member name="M:NLog.Internal.Win32ThreadIDHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Internal.Win32ThreadIDHelper" /> class.
            </summary>
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentThreadID">
            <summary>
            Gets current thread ID.
            </summary>
            <value />
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessID">
            <summary>
            Gets current process ID.
            </summary>
            <value />
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessName">
            <summary>
            Gets current process name.
            </summary>
            <value />
        </member>
        <member name="P:NLog.Internal.Win32ThreadIDHelper.CurrentProcessBaseName">
            <summary>
            Gets current process name (excluding filename extension, if any).
            </summary>
            <value />
        </member>
        <member name="T:NLog.LayoutRenderers.AmbientPropertyAttribute">
            <summary>
            Designates a property of the class as an ambient property.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AmbientPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.AmbientPropertyAttribute" /> class.
            </summary>
            <param name="name">Ambient property name.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer">
            <summary>
            ASP Application variable.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.LayoutRenderer">
            <summary>
            Render environmental information related to logging events.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Render(NLog.LogEventInfo)">
            <summary>
            Renders the the value of layout renderer in the context of the specified log event.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>String representation of a layout renderer.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.NLog#Internal#ISupportsInitialize#Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environmental information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Initialize">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRenderer.Close">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Application variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.AspApplicationValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the ASP Application variable name.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.AspRequestValueLayoutRenderer">
            <summary>
            ASP Request variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Request variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Item">
            <summary>
            Gets or sets the item name. The QueryString, Form, Cookies, or ServerVariables collection variables having the specified name are rendered.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.QueryString">
            <summary>
            Gets or sets the QueryString variable to be rendered.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Form">
            <summary>
            Gets or sets the form variable to be rendered.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.Cookie">
            <summary>
            Gets or sets the cookie to be rendered.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.AspRequestValueLayoutRenderer.ServerVariable">
            <summary>
            Gets or sets the ServerVariables item to be rendered.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.AspSessionValueLayoutRenderer">
            <summary>
            ASP Session variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified ASP Session variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.AspSessionValueLayoutRenderer.Variable">
            <summary>
            Gets or sets the session variable name.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.BaseDirLayoutRenderer">
            <summary>
            The current application domain's base directory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.BaseDirLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.BaseDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the application base directory and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with with the base directory.
            </summary>
            <docgen category="Advanced Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.BaseDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with with the base directory.
            </summary>
            <docgen category="Advanced Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.CallSiteLayoutRenderer">
            <summary>
            The call site (class name, method name and source information).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CallSiteLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CallSiteLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.ClassName">
            <summary>
            Gets or sets a value indicating whether to render the class name.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.MethodName">
            <summary>
            Gets or sets a value indicating whether to render the method name.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.FileName">
            <summary>
            Gets or sets a value indicating whether to render the source file name and line number.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.IncludeSourcePath">
            <summary>
            Gets or sets a value indicating whether to include source file path.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.CallSiteLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.CounterLayoutRenderer">
            <summary>
            A counter value (increases on each layout rendering).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.CounterLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.CounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified counter value and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Value">
            <summary>
            Gets or sets the initial value of the counter.
            </summary>
            <docgen category="Counter Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Increment">
            <summary>
            Gets or sets the value to be added to the counter after each layout rendering.
            </summary>
            <docgen category="Counter Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.CounterLayoutRenderer.Sequence">
            <summary>
            Gets or sets the name of the sequence. Different named sequences can have individual values.
            </summary>
            <docgen category="Counter Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.DateLayoutRenderer">
            <summary>
            Current date and time.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.DateLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.DateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current date and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.DateLayoutRenderer.Format">
            <summary>
            Gets or sets the date format. Can be any argument accepted by DateTime.ToString(format).
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.EnvironmentLayoutRenderer">
            <summary>
            The environment variable.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.EnvironmentLayoutRenderer.Variable">
            <summary>
            Gets or sets the name of the environment variable.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.EventContextLayoutRenderer">
            <summary>
            Log event context data.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.EventContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified log event context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.EventContextLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.ExceptionLayoutRenderer">
            <summary>
            Exception information provided through 
            a call to one of the Logger.*Exception() methods.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ExceptionLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ExceptionLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified exception information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Format">
            <summary>
            Gets or sets the format of the output. Must be a comma-separated list of exception
            properties: Message, Type, ShortType, ToString, Method, StackTrace.
            This parameter value is case-insensitive.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.ExceptionLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator used to concatenate parts specified in the Format.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.FileContentsLayoutRenderer">
            <summary>
            Renders contents of the specified file.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.FileContentsLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.FileContentsLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the contents of the specified file and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <docgen category="File Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.FileContentsLayoutRenderer.Encoding">
            <summary>
            Gets or sets the encoding used in the file.
            </summary>
            <value>The encoding.</value>
            <docgen category="File Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer">
            <summary>
            The information about the garbage collector.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the selected process information.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.GarbageCollectorInfoLayoutRenderer.Property">
            <summary>
            Gets or sets the property to retrieve.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.GarbageCollectorProperty">
            <summary>
            Gets or sets the property of System.GC to retrieve.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemory">
            <summary>
            Total memory allocated.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.TotalMemoryForceCollection">
            <summary>
            Total memory allocated (perform full garbage collection first).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount0">
            <summary>
            Gets the number of Gen0 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount1">
            <summary>
            Gets the number of Gen1 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.CollectionCount2">
            <summary>
            Gets the number of Gen2 collections.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.GarbageCollectorProperty.MaxGeneration">
            <summary>
            Maximum generation number supported by GC.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.GdcLayoutRenderer">
            <summary>
            Global Diagnostics Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified Global Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.GdcLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.GuidLayoutRenderer">
            <summary>
            Globally-unique identifier (GUID).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.GuidLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.GuidLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders a newly generated GUID string and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.GuidLayoutRenderer.Format">
            <summary>
            Gets or sets the GUID format as accepted by Guid.ToString() method.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.IdentityLayoutRenderer">
            <summary>
            Thread identity information (name and authentication information).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.IdentityLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.IdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified identity information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator to be used when concatenating 
            parts of identity information.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.Name">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.Name.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.AuthType">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.AuthenticationType.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.IsAuthenticated">
            <summary>
            Gets or sets a value indicating whether to render Thread.CurrentPrincipal.Identity.IsAuthenticated.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.IdentityLayoutRenderer.FSNormalize">
            <summary>
            Gets or sets a value indicating whether to modify the output of this renderer so it can be used as a part of file path
            (illegal characters are replaced with '_').
            </summary>
            <docgen category="Advanced Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.InstallContextLayoutRenderer">
            <summary>
            Installation parameter (passed to InstallNLogConfig).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.InstallContextLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified installation parameter and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.InstallContextLayoutRenderer.Parameter">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.LayoutRendererAttribute">
            <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LayoutRendererAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LayoutRendererAttribute" /> class.
            </summary>
            <param name="name">Name of the layout renderer.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LevelLayoutRenderer">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LevelLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current log level and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.LiteralLayoutRenderer">
            <summary>
            A string literal.
            </summary>
            <remarks>
            This is used to escape '${' sequence 
            as ;${literal:text=${}'
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.LiteralLayoutRenderer" /> class.
            </summary>
            <param name="text">The literal text value.</param>
            <remarks>This is used by the layout compiler.</remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.LiteralLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.LiteralLayoutRenderer.Text">
            <summary>
            Gets or sets the literal text.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer">
            <summary>
            XML event description compatible with log4j, Chainsaw and NLogViewer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the XML logging event and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNLogData">
            <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IndentXml">
            <summary>
            Gets or sets a value indicating whether the XML should use spaces for indentation.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.AppInfo">
            <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeCallSite">
            <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeSourceInfo">
            <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeMDC">
            <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.MappedDiagnosticsContext" /> dictionary.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.IncludeNDC">
            <summary>
            Gets or sets a value indicating whether to include contents of the <see cref="T:NLog.NestedDiagnosticsContext" /> stack.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.LoggerNameLayoutRenderer">
            <summary>
            The logger name.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LoggerNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the logger name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.LoggerNameLayoutRenderer.ShortName">
            <summary>
            Gets or sets a value indicating whether to render short logger name (the part after the trailing dot character).
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.LongDateLayoutRenderer">
            <summary>
            The date and time in a long, sortable format yyyy-MM-dd HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.LongDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the date in the long format (yyyy-MM-dd HH:mm:ss.mmm) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MachineNameLayoutRenderer">
            <summary>
            The machine name that the process is running on.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.Initialize">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MachineNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the machine name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.MdcLayoutRenderer">
            <summary>
            Mapped Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified MDC item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.MdcLayoutRenderer.Item">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.MessageLayoutRenderer">
            <summary>
            The formatted log message.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.MessageLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the log message including any positional parameters and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NdcLayoutRenderer">
            <summary>
            Nested Diagnostic Context item. Provided for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.NdcLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NdcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified Nested Diagnostics Context item and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.TopFrames">
            <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.BottomFrames">
            <summary>
            Gets or sets the number of bottom stack frames to be rendered.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.NdcLayoutRenderer.Separator">
            <summary>
            Gets or sets the separator to be used for concatenating nested diagnostics context output.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.NewLineLayoutRenderer">
            <summary>
            A newline literal.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NewLineLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified string literal and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.NLogDirLayoutRenderer">
            <summary>
            The directory where NLog.dll is located.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.#cctor">
            <summary>
            Initializes static members of the NLogDirLayoutRenderer class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.NLogDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category="Advanced Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.NLogDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category="Advanced Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer">
            <summary>
            The performance counter.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Initialize">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Close">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the specified environment variable and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Category">
            <summary>
            Gets or sets the name of the counter category.
            </summary>
            <docgen category="Performance Counter Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Counter">
            <summary>
            Gets or sets the name of the performance counter.
            </summary>
            <docgen category="Performance Counter Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.Instance">
            <summary>
            Gets or sets the name of the performance counter instance (e.g. this.Global_).
            </summary>
            <docgen category="Performance Counter Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.PerformanceCounterLayoutRenderer.MachineName">
            <summary>
            Gets or sets the name of the machine to read the performance counter from.
            </summary>
            <docgen category="Performance Counter Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessIDLayoutRenderer">
            <summary>
            The identifier of the current process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessIDLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process ID.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer">
            <summary>
            The information about the running process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Initialize">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Close">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the selected process information.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.Property">
            <summary>
            Gets or sets the property to retrieve.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty">
            <summary>
            Property of System.Diagnostics.Process to retrieve.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.BasePriority">
            <summary>
            Base Priority.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.ExitCode">
            <summary>
            Exit Code.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.ExitTime">
            <summary>
            Exit Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.Handle">
            <summary>
            Process Handle.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.HandleCount">
            <summary>
            Handle Count.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.HasExited">
            <summary>
            Whether process has exited.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.Id">
            <summary>
            Process ID.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MachineName">
            <summary>
            Machine name.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MainWindowHandle">
            <summary>
            Handle of the main window.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MainWindowTitle">
            <summary>
            Title of the main window.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MaxWorkingSet">
            <summary>
            Maximum Working Set.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.MinWorkingSet">
            <summary>
            Minimum Working Set.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.NonpagedSystemMemorySize">
            <summary>
            Non-paged System Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.NonpagedSystemMemorySize64">
            <summary>
            Non-paged System Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PagedMemorySize">
            <summary>
            Paged Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PagedMemorySize64">
            <summary>
            Paged Memory Size (64-bit)..
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PagedSystemMemorySize">
            <summary>
            Paged System Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PagedSystemMemorySize64">
            <summary>
            Paged System Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakPagedMemorySize">
            <summary>
            Peak Paged Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakPagedMemorySize64">
            <summary>
            Peak Paged Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakVirtualMemorySize">
            <summary>
            Peak Vitual Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakVirtualMemorySize64">
            <summary>
            Peak Virtual Memory Size (64-bit)..
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakWorkingSet">
            <summary>
            Peak Working Set Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PeakWorkingSet64">
            <summary>
            Peak Working Set Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PriorityBoostEnabled">
            <summary>
            Whether priority boost is enabled.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PriorityClass">
            <summary>
            Priority Class.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PrivateMemorySize">
            <summary>
            Private Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PrivateMemorySize64">
            <summary>
            Private Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.PrivilegedProcessorTime">
            <summary>
            Privileged Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.ProcessName">
            <summary>
            Process Name.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.Responding">
            <summary>
            Whether process is responding.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.SessionId">
            <summary>
            Session ID.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.StartTime">
            <summary>
            Process Start Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.TotalProcessorTime">
            <summary>
            Total Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.UserProcessorTime">
            <summary>
            User Processor Time.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.VirtualMemorySize">
            <summary>
            Virtual Memory Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.VirtualMemorySize64">
            <summary>
            Virtual Memory Size (64-bit).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.WorkingSet">
            <summary>
            Working Set Size.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.ProcessInfoLayoutRenderer.ProcessInfoProperty.WorkingSet64">
            <summary>
            Working Set Size (64-bit).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessNameLayoutRenderer">
            <summary>
            The name of the current process.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process name (optionally with a full path).
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.ProcessNameLayoutRenderer.FullName">
            <summary>
            Gets or sets a value indicating whether to write the full path to the process executable.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.ProcessTimeLayoutRenderer">
            <summary>
            The process time in format HH:mm:ss.mmm.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ProcessTimeLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current process running time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.QpcLayoutRenderer">
            <summary>
            High precision timer, based on the value returned from QueryPerformanceCounter() optionally converted to seconds.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.QpcLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.QpcLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.QpcLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.QpcLayoutRenderer.Normalize">
            <summary>
            Gets or sets a value indicating whether to normalize the result by subtracting 
            it from the result of the first call (so that it's effectively zero-based).
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.QpcLayoutRenderer.Difference">
            <summary>
            Gets or sets a value indicating whether to output the difference between the result 
            of QueryPerformanceCounter and the previous one.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.QpcLayoutRenderer.Seconds">
            <summary>
            Gets or sets a value indicating whether to convert the result to seconds by dividing 
            by the result of QueryPerformanceFrequency().
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.QpcLayoutRenderer.Precision">
            <summary>
            Gets or sets the number of decimal digits to be included in output.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.QpcLayoutRenderer.AlignDecimalPoint">
            <summary>
            Gets or sets a value indicating whether to align decimal point (emit non-significant zeros).
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.RegistryLayoutRenderer">
            <summary>
            A value from the Registry.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.RegistryLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Reads the specified registry key and value and appends it to
            the passed <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event. Ignored.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Value">
            <summary>
            Gets or sets the registry value name.
            </summary>
            <docgen category="Registry Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.DefaultValue">
            <summary>
            Gets or sets the value to be output when the specified registry key or value is not found.
            </summary>
            <docgen category="Registry Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.RegistryLayoutRenderer.Key">
            <summary>
            Gets or sets the registry key.
            </summary>
            <remarks>
            Must have one of the forms:
            <ul><li>HKLM\Key\Full\Name</li><li>HKEY_LOCAL_MACHINE\Key\Full\Name</li><li>HKCU\Key\Full\Name</li><li>HKEY_CURRENT_USER\Key\Full\Name</li></ul></remarks>
            <docgen category="Registry Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.ShortDateLayoutRenderer">
            <summary>
            The short date in a sortable format yyyy-MM-dd.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ShortDateLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current short date string (yyyy-MM-dd) and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.SilverlightApplicationInfoOption">
            <summary>
            Specifies application information to display in ${sl-appinfo} renderer.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.SilverlightApplicationInfoOption.XapUri">
            <summary>
            URI of the current application XAP file.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.SilverlightApplicationInfoOption.IsOutOfBrowser">
            <summary>
            Whether application is running out-of-browser.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.SilverlightApplicationInfoOption.InstallState">
            <summary>
            Installed state of an application.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.SilverlightApplicationInfoOption.HasElevatedPermissions">
            <summary>
            Whether application is running with elevated permissions.
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.SpecialFolderLayoutRenderer">
            <summary>
            System special folder path (includes My Documents, My Music, Program Files, Desktop, and more).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Folder">
            <summary>
            Gets or sets the system special folder to use.
            </summary>
            <remarks>
            Full list of options is available at <a href="http://msdn2.microsoft.com/en-us/system.environment.specialfolder.aspx">MSDN</a>.
            The most common ones are:
            <ul><li><b>ApplicationData</b> - roaming application data for current user.</li><li><b>CommonApplicationData</b> - application data for all users.</li><li><b>MyDocuments</b> - My Documents</li><li><b>DesktopDirectory</b> - Desktop directory</li><li><b>LocalApplicationData</b> - non roaming application data</li><li><b>Personal</b> - user profile directory</li><li><b>System</b> - System directory</li></ul></remarks>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category="Advanced Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.SpecialFolderLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category="Advanced Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.StackTraceFormat">
            <summary>
            Format of the ${stacktrace} layout renderer output.
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.Raw">
            <summary>
            Raw format (multiline - as returned by StackFrame.ToString() method).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.Flat">
            <summary>
            Flat format (class and method names displayed in a single line).
            </summary>
        </member>
        <member name="F:NLog.LayoutRenderers.StackTraceFormat.DetailedFlat">
            <summary>
            Detailed flat format (method signatures displayed in a single line).
            </summary>
        </member>
        <member name="T:NLog.LayoutRenderers.StackTraceLayoutRenderer">
            <summary>
            Stack trace renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.StackTraceLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.StackTraceLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the call site and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Format">
            <summary>
            Gets or sets the output format of the stack trace.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.TopFrames">
            <summary>
            Gets or sets the number of top stack frames to be rendered.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.Separator">
            <summary>
            Gets or sets the stack frame separator string.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.StackTraceLayoutRenderer.NLog#Internal#IUsesStackTrace#StackTraceUsage">
            <summary>
            Gets the level of stack trace information required by the implementing class.
            </summary>
            <value />
        </member>
        <member name="T:NLog.LayoutRenderers.TempDirLayoutRenderer">
            <summary>
            A temporary directory.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TempDirLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the directory where NLog is located and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.File">
            <summary>
            Gets or sets the name of the file to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category="Advanced Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.TempDirLayoutRenderer.Dir">
            <summary>
            Gets or sets the name of the directory to be Path.Combine()'d with the directory name.
            </summary>
            <docgen category="Advanced Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadIDLayoutRenderer">
            <summary>
            The identifier of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadIDLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread identifier and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.ThreadNameLayoutRenderer">
            <summary>
            The name of the current thread.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.ThreadNameLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread name and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.TicksLayoutRenderer">
            <summary>
            The Ticks value of current date and time.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.TicksLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the ticks value of current time and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer">
            <summary>
            Thread Windows identity information (username).
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the current thread windows identity information and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.Domain">
            <summary>
            Gets or sets a value indicating whether domain name should be included.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.WindowsIdentityLayoutRenderer.UserName">
            <summary>
            Gets or sets a value indicating whether username should be included.
            </summary>
            <docgen category="Rendering Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper">
            <summary>
            Applies caching to another layout output.
            </summary>
            <remarks>
            The value of the inner layout will be rendered only once and reused subsequently.
            </remarks>
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase">
            <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Append(System.Text.StringBuilder,NLog.LogEventInfo)">
            <summary>
            Renders the inner message, processes it and appends it to the specified <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to append the rendered data to.</param>
            <param name="logEvent">Logging event.</param>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Contents of inner layout.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.WrapperLayoutRendererBase.Inner">
            <summary>
            Gets or sets the wrapped layout.
            </summary>
            <docgen category="Transformation Options" order="10" />
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Initialize">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Close">
            <summary>
            Closes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.RenderInner(NLog.LogEventInfo)">
            <summary>
            Renders the inner layout contents.
            </summary>
            <param name="logEvent">The log event.</param>
            <returns>Contents of inner layout.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper.Cached">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:NLog.LayoutRenderers.Wrappers.CachedLayoutRendererWrapper" /> is enabled.
            </summary>
            <docgen category="Caching Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.LowerCaseLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to lower case.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.LowerCaseLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.LowerCaseLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.LowerCaseLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.LowerCaseLayoutRendererWrapper.LowerCase">
            <summary>
            Gets or sets a value indicating whether lower case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if lower case conversion should be applied; otherwise, <c>false</c>.</value>
            <docgen category="Transformation Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.LowerCaseLayoutRendererWrapper.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category="Transformation Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper">
            <summary>
            Applies padding to another layout output.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.Padding">
            <summary>
            Gets or sets the number of characters to pad the output to. 
            </summary>
            <remarks>
            Positive padding values cause left padding, negative values 
            cause right padding to the desired width.
            </remarks>
            <docgen category="Transformation Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.PadCharacter">
            <summary>
            Gets or sets the padding character.
            </summary>
            <docgen category="Transformation Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.PaddingLayoutRendererWrapper.FixedLength">
            <summary>
            Gets or sets a value indicating whether to trim the 
            rendered text to the absolute value of the padding length.
            </summary>
            <docgen category="Transformation Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper">
            <summary>
            Replaces a string in the output of another layout with another string.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Initialize">
            <summary>
            Initializes the layout renderer.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Post-processed text.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.SearchFor">
            <summary>
            Gets or sets the text to search for.
            </summary>
            <value>The text search for.</value>
            <docgen category="Search/Replace Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.RegEx">
            <summary>
            Gets or sets a value indicating whether regular expressions should be used.
            </summary>
            <value>A value of <c>true</c> if regular expressions should be used otherwise, <c>false</c>.</value>
            <docgen category="Search/Replace Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.ReplaceWith">
            <summary>
            Gets or sets the replacement string.
            </summary>
            <value>The replacement string.</value>
            <docgen category="Search/Replace Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case.
            </summary>
            <value>A value of <c>true</c> if case should be ignored when searching; otherwise, <c>false</c>.</value>
            <docgen category="Search/Replace Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.ReplaceLayoutRendererWrapper.WholeWords">
            <summary>
            Gets or sets a value indicating whether to search for whole words.
            </summary>
            <value>A value of <c>true</c> if whole words should be searched for; otherwise, <c>false</c>.</value>
            <docgen category="Search/Replace Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper">
            <summary>
            Decodes text "encrypted" with ROT-13.
            </summary>
            <remarks>
            See <a href="http://en.wikipedia.org/wiki/ROT13">http://en.wikipedia.org/wiki/ROT13</a>.
            </remarks>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.DecodeRot13(System.String)">
            <summary>
            Encodes/Decodes ROT-13-encoded string.
            </summary>
            <param name="s">The string to be encoded/decoded.</param>
            <returns>Encoded/Decoded text.</returns>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.Rot13LayoutRendererWrapper.Text">
            <summary>
            Gets or sets the layout to be wrapped.
            </summary>
            <value>The layout to be wrapped.</value>
            <remarks>This variable is for backwards compatibility</remarks>
            <docgen category="Transformation Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.UpperCaseLayoutRendererWrapper">
            <summary>
            Converts the result of another layout output to upper case.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UpperCaseLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UpperCaseLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UpperCaseLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Post-processes the rendered message. 
            </summary>
            <param name="text">The text to be post-processed.</param>
            <returns>Padded and trimmed string.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UpperCaseLayoutRendererWrapper.UpperCase">
            <summary>
            Gets or sets a value indicating whether upper case conversion should be applied.
            </summary>
            <value>A value of <c>true</c> if upper case conversion should be applied otherwise, <c>false</c>.</value>
            <docgen category="Transformation Options" order="10" />
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UpperCaseLayoutRendererWrapper.Culture">
            <summary>
            Gets or sets the culture used for rendering. 
            </summary>
            <docgen category="Transformation Options" order="10" />
        </member>
        <member name="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper">
            <summary>
            Encodes the result of another layout output for use with URLs.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.Transform(System.String)">
            <summary>
            Transforms the output of another layout.
            </summary>
            <param name="text">Output to be transform.</param>
            <returns>Transformed text.</returns>
        </member>
        <member name="P:NLog.LayoutRenderers.Wrappers.UrlEncodeLayoutRendererWrapper.SpaceAsPlus">
            <summary>
            Gets or sets a value indicating whether spaces should be translated to '+' or '%20'.
            </summary>
            <value>A value of <c>true</c> if space should be translated to '+'; otherwise, <c>false</c>.</value>
            <docgen category="Transformation Options" order="10" />
        </member>
        <member name="T:NLog.Layouts.CsvColumn">
            <summary>
            A column in the CSV.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn" /> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvColumn.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvColumn" /> class.
            </summary>
            <param name="name">The name of the column.</param>
            <param name="layout">The layout of the column.</param>
        </member>
        <member name="P:NLog.Layouts.CsvColumn.Name">
            <summary>
            Gets or sets the name of the column.
            </summary>
            <docgen category="CSV Column Options" order="10" />
        </member>
        <member name="P:NLog.Layouts.CsvColumn.Layout">
            <summary>
            Gets or sets the layout of the column.
            </summary>
            <docgen category="CSV Column Options" order="10" />
        </member>
        <member name="T:NLog.Layouts.CsvColumnDelimiterMode">
            <summary>
            Specifies allowed column delimiters.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Auto">
            <summary>
            Automatically detect from regional settings.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Comma">
            <summary>
            Comma (ASCII 44).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Semicolon">
            <summary>
            Semicolon (ASCII 59).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Tab">
            <summary>
            Tab character (ASCII 9).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Pipe">
            <summary>
            Pipe character (ASCII 124).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Space">
            <summary>
            Space character (ASCII 32).
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvColumnDelimiterMode.Custom">
            <summary>
            Custom string, specified by the CustomDelimiter.
            </summary>
        </member>
        <member name="T:NLog.Layouts.CsvLayout">
            <summary>
            A specialized layout that renders CSV-formatted events.
            </summary>
        </member>
        <member name="T:NLog.Layouts.LayoutWithHeaderAndFooter">
            <summary>
            A specialized layout that supports header and footer.
            </summary>
        </member>
        <member name="T:NLog.Layouts.Layout">
            <summary>
            Abstract interface that layouts must implement.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.op_Implicit(System.String)~NLog.Layouts.Layout">
            <summary>
            Converts a given text to a <see cref="T:NLog.Layouts.Layout" />.
            </summary>
            <param name="text">Text to be converted.</param>
            <returns>
                <see cref="T:NLog.Layouts.SimpleLayout" /> object represented by the text.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.FromString(System.String)">
            <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout" />.
            </summary>
            <param name="layoutString">The layout string.</param>
            <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout" />.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.FromString(System.String,NLog.Config.NLogFactories)">
            <summary>
            Implicitly converts the specified string to a <see cref="T:NLog.Layouts.SimpleLayout" />.
            </summary>
            <param name="layoutString">The layout string.</param>
            <param name="nlogFactories">The NLog factories to use when resolving layout renderers.</param>
            <returns>Instance of <see cref="T:NLog.Layouts.SimpleLayout" />.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the 
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.Layout.Render(NLog.LogEventInfo)">
            <summary>
            Renders the event info in layout.
            </summary>
            <param name="eventInfo">The event info.</param>
            <returns>String representing log event.</returns>
        </member>
        <member name="M:NLog.Layouts.Layout.NLog#Internal#ISupportsInitialize#Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.NLog#Internal#ISupportsInitialize#Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.Initialize">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.Close">
            <summary>
            Closes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Layout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.Precalculate(NLog.LogEventInfo)">
            <summary>
            Precalculates the layout for the specified log event and stores the result
            in per-log event cache.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            Calling this method enables you to store the log event in a buffer
            and/or potentially evaluate it in another thread even though the
            layout may contain thread-dependent renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.LayoutWithHeaderAndFooter.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Layout">
            <summary>
            Gets or sets the body layout (can be repeated multiple times).
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Header">
            <summary>
            Gets or sets the header layout.
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="P:NLog.Layouts.LayoutWithHeaderAndFooter.Footer">
            <summary>
            Gets or sets the footer layout.
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="M:NLog.Layouts.CsvLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout" /> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.Initialize">
            <summary>
            Initializes the layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event for write.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Columns">
            <summary>
            Gets the array of parameters to be passed.
            </summary>
            <docgen category="CSV Options" order="10" />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.WithHeader">
            <summary>
            Gets or sets a value indicating whether CVS should include header.
            </summary>
            <value>A value of <c>true</c> if CVS should include header; otherwise, <c>false</c>.</value>
            <docgen category="CSV Options" order="10" />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Delimiter">
            <summary>
            Gets or sets the column delimiter.
            </summary>
            <docgen category="CSV Options" order="10" />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.Quoting">
            <summary>
            Gets or sets the quoting mode.
            </summary>
            <docgen category="CSV Options" order="10" />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.QuoteChar">
            <summary>
            Gets or sets the quote Character.
            </summary>
            <docgen category="CSV Options" order="10" />
        </member>
        <member name="P:NLog.Layouts.CsvLayout.CustomColumnDelimiter">
            <summary>
            Gets or sets the custom column delimiter value (valid when ColumnDelimiter is set to 'Custom').
            </summary>
            <docgen category="CSV Options" order="10" />
        </member>
        <member name="T:NLog.Layouts.CsvLayout.CsvHeaderLayout">
            <summary>
            Header for CSV layout.
            </summary>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.#ctor(NLog.Layouts.CsvLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.CsvLayout.CsvHeaderLayout" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:NLog.Layouts.CsvLayout.CsvHeaderLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="T:NLog.Layouts.CsvQuotingMode">
            <summary>
            Specifies allowes CSV quoting modes.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.All">
            <summary>
            Quote all column.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.Nothing">
            <summary>
            Quote nothing.
            </summary>
        </member>
        <member name="F:NLog.Layouts.CsvQuotingMode.Auto">
            <summary>
            Quote only whose values contain the quote symbol or
            the separator.
            </summary>
        </member>
        <member name="T:NLog.Layouts.LayoutAttribute">
            <summary>
            Marks class as a layout renderer and assigns a format string to it.
            </summary>
        </member>
        <member name="M:NLog.Layouts.LayoutAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.LayoutAttribute" /> class.
            </summary>
            <param name="name">Layout name.</param>
        </member>
        <member name="T:NLog.Layouts.LayoutParser">
            <summary>
            Parses layout strings.
            </summary>
        </member>
        <member name="T:NLog.Layouts.LayoutParser.Tokenizer">
            <summary>
            Simple character tokenizer.
            </summary>
        </member>
        <member name="M:NLog.Layouts.LayoutParser.Tokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.LayoutParser.Tokenizer" /> class.
            </summary>
            <param name="text">The text to be tokenized.</param>
        </member>
        <member name="T:NLog.Layouts.Log4JXmlEventLayout">
            <summary>
            A specialized layout that renders Log4j-compatible XML events.
            </summary>
            <remarks>
            This layout is not meant to be used explicitly. Instead you can use ${log4jxmlevent} layout renderer.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.Log4JXmlEventLayout" /> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.Log4JXmlEventLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="P:NLog.Layouts.Log4JXmlEventLayout.Renderer">
            <summary>
            Gets the <see cref="T:NLog.LayoutRenderers.Log4JXmlEventLayoutRenderer" /> instance that renders log events.
            </summary>
        </member>
        <member name="T:NLog.Layouts.SimpleLayout">
            <summary>
            Represents a string with embedded placeholders that can render contextual information.
            </summary>
            <remarks>
            This layout is not meant to be used explicitly. Instead you can just use a string containing layout 
            renderers everywhere the layout is required.
            </remarks>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
            <param name="txt">The layout string to parse.</param>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.#ctor(System.String,NLog.Config.NLogFactories)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Layouts.SimpleLayout" /> class.
            </summary>
            <param name="txt">The layout string to parse.</param>
            <param name="nlogFactories">The NLog factories to use when creating references to layout renderers.</param>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.op_Implicit(System.String)~NLog.Layouts.SimpleLayout">
            <summary>
            Converts a text to a simple layout.
            </summary>
            <param name="text">Text to be converted.</param>
            <returns>A <see cref="T:NLog.Layouts.SimpleLayout" /> object.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Escape(System.String)">
            <summary>
            Escapes the passed text so that it can
            be used literally in all places where
            layout is normally expected without being
            treated as layout.
            </summary>
            <param name="text">The text to be escaped.</param>
            <returns>The escaped text.</returns>
            <remarks>
            Escaping is done by replacing all occurences of
            '${' with '${literal:text=${}'
            </remarks>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String,NLog.LogEventInfo)">
            <summary>
            Evaluates the specified text by expadinging all layout renderers.
            </summary>
            <param name="text">The text to be evaluated.</param>
            <param name="logEvent">Log event to be used for evaluation.</param>
            <returns>The input text with all occurences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.Evaluate(System.String)">
            <summary>
            Evaluates the specified text by expadinging all layout renderers
            in new <see cref="T:NLog.LogEventInfo" /> context.
            </summary>
            <param name="text">The text to be evaluated.</param>
            <returns>The input text with all occurences of ${} replaced with
            values provided by the appropriate layout renderers.</returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current object.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current object.
            </returns>
        </member>
        <member name="M:NLog.Layouts.SimpleLayout.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Renders the layout for the specified logging event by invoking layout renderers
            that make up the event.
            </summary>
            <param name="logEvent">The logging event.</param>
            <returns>The rendered layout.</returns>
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.Text">
            <summary>
            Gets or sets the layout text.
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="P:NLog.Layouts.SimpleLayout.Renderers">
            <summary>
            Gets a collection of <see cref="T:NLog.LayoutRenderers.LayoutRenderer" /> objects that make up this layout.
            </summary>
        </member>
        <member name="T:NLog.LogEventInfo">
            <summary>
            Represents the logging event.
            </summary>
        </member>
        <member name="F:NLog.LogEventInfo.ZeroDate">
            <summary>
            Gets the date of the first log event created.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="message">Log message including parameter placeholders.</param>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">Log message including parameter placeholders.</param>
            <param name="parameters">Parameter array.</param>
        </member>
        <member name="M:NLog.LogEventInfo.#ctor(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[],System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogEventInfo" /> class.
            </summary>
            <param name="level">Log level.</param>
            <param name="loggerName">Logger name.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">Log message including parameter placeholders.</param>
            <param name="parameters">Parameter array.</param>
            <param name="exception">Exception information.</param>
        </member>
        <member name="M:NLog.LogEventInfo.CreateNullEvent">
            <summary>
            Creates the null event.
            </summary>
            <returns>Null log event.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <param name="parameters">The parameters.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.IFormatProvider,System.Object)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="formatProvider">The format provider.</param>
            <param name="message">The message.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.Create(NLog.LogLevel,System.String,System.String,System.Exception)">
            <summary>
            Creates the log event.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="loggerName">Name of the logger.</param>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <returns>Instance of <see cref="T:NLog.LogEventInfo" />.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.WithContinuation(NLog.Common.AsyncContinuation)">
            <summary>
            Creates <see cref="T:NLog.Common.AsyncLogEventInfo" /> from this <see cref="T:NLog.LogEventInfo" /> by attaching the specified asynchronous continuation.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <returns>Instance of <see cref="T:NLog.Common.AsyncLogEventInfo" /> with attached continuation.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.ToString">
            <summary>
            Returns a string representation of this log event.
            </summary>
            <returns>String representation of the log event.</returns>
        </member>
        <member name="M:NLog.LogEventInfo.SetStackTrace(System.Diagnostics.StackTrace,System.Int32)">
            <summary>
            Sets the stack trace for the event info.
            </summary>
            <param name="stackTrace">The stack trace.</param>
            <param name="userStackFrame">Index of the first user stack frame within the stack trace.</param>
        </member>
        <member name="P:NLog.LogEventInfo.SequenceID">
            <summary>
            Gets the unique identifier of log event which is automatically generated
            and monotonously increasing.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.TimeStamp">
            <summary>
            Gets or sets the timestamp of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Level">
            <summary>
            Gets or sets the level of the logging event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.HasStackTrace">
            <summary>
            Gets a value indicating whether stack trace has been set for this event.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrame">
            <summary>
            Gets the stack frame of the method that did the logging.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.UserStackFrameNumber">
            <summary>
            Gets the number index of the stack frame that represents the user
            code (not the NLog code).
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.StackTrace">
            <summary>
            Gets the entire stack trace.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Exception">
            <summary>
            Gets or sets the exception information.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerName">
            <summary>
            Gets or sets the logger name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.LoggerShortName">
            <summary>
            Gets the logger short name.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Message">
            <summary>
            Gets or sets the log message including any parameter placeholders.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Parameters">
            <summary>
            Gets or sets the parameter values or null if no parameters have been specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormatProvider">
            <summary>
            Gets or sets the format provider that was provided while logging or <see langword="null" />
            when no formatProvider was specified.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.FormattedMessage">
            <summary>
            Gets the formatted message.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Properties">
            <summary>
            Gets the dictionary of per-event context properties.
            </summary>
        </member>
        <member name="P:NLog.LogEventInfo.Context">
            <summary>
            Gets the dictionary of per-event context properties.
            </summary>
        </member>
        <member name="T:NLog.LogFactory">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory" /> class.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.#ctor(NLog.Config.LoggingConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory" /> class.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:NLog.LogFactory.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns>Null logger instance.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogFactory.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The type of the logger to create. The type must inherit from NLog.Logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the 
            same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogFactory.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by GetLogger
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.LogFactory.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogFactory.DisableLogging">
            <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging" /> calls.</remarks>
            <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogFactory.EnableLogging">
            <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging" /> calls.</remarks>
        </member>
        <member name="M:NLog.LogFactory.IsLoggingEnabled">
            <summary>
            Returns <see langword="true" /> if logging is currently enabled.
            </summary>
            <returns>A value of <see langword="true" /> if logging is currently enabled, 
            <see langword="false" /> otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogFactory.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogFactory.DisableLogging" /> calls.</remarks>
        </member>
        <member name="E:NLog.LogFactory.ConfigurationChanged">
            <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration" /> changes.
            </summary>
        </member>
        <member name="E:NLog.LogFactory.ConfigurationReloaded">
            <summary>
            Occurs when logging <see cref="P:NLog.LogFactory.Configuration" /> gets reloaded.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.ThrowExceptions">
            <summary>
            Gets or sets a value indicating whether exceptions should be thrown.
            </summary>
            <value>A value of <c>true</c> if exceptiosn should be thrown; otherwise, <c>false</c>.</value>
            <remarks>By default exceptions
            are not thrown under any circumstances.
            </remarks>
        </member>
        <member name="P:NLog.LogFactory.Configuration">
            <summary>
            Gets or sets the current logging configuration.
            </summary>
        </member>
        <member name="P:NLog.LogFactory.GlobalThreshold">
            <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="T:NLog.LogFactory.LoggerCacheKey">
            <summary>
            Logger cache key.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.LoggerCacheKey.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="M:NLog.LogFactory.LoggerCacheKey.Equals(System.Object)">
            <summary>
            Determines if two objects are equal in value.
            </summary>
            <param name="o">Other object to compare to.</param>
            <returns>True if objects are equal, false otherwise.</returns>
        </member>
        <member name="T:NLog.LogFactory.LogEnabler">
            <summary>
            Enables logging in <see cref="M:System.IDisposable.Dispose" /> implementation.
            </summary>
        </member>
        <member name="M:NLog.LogFactory.LogEnabler.#ctor(NLog.LogFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogFactory.LogEnabler" /> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:NLog.LogFactory.LogEnabler.System#IDisposable#Dispose">
            <summary>
            Enables logging.
            </summary>
        </member>
        <member name="T:NLog.LogFactory`1">
            <summary>
            Specialized LogFactory that can return instances of custom logger types.
            </summary>
            <typeparam name="T">The type of the logger to be returned. Must inherit from <see cref="T:NLog.Logger" />.</typeparam>
        </member>
        <member name="M:NLog.LogFactory`1.GetLogger(System.String)">
            <summary>
            Gets the logger.
            </summary>
            <param name="name">The logger name.</param>
            <returns>An instance of <typeparamref name="T" />.</returns>
        </member>
        <member name="M:NLog.LogFactory`1.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="T:NLog.Logger">
            <summary>
            Provides logging interface and utility functions.
            </summary>
            <content>
            Auto-generated Logger members for binary compatibility with NLog 1.0.
            </content>
        </member>
        <member name="M:NLog.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Logger" /> class.
            </summary>
        </member>
        <member name="M:NLog.Logger.IsEnabled(NLog.LogLevel)">
            <summary>
            Gets a value indicating whether logging is enabled for the specified level.
            </summary>
            <param name="level">Log level to be checked.</param>
            <returns>A value of <see langword="true" /> if logging is enabled for the specified level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Logger.Log(System.Type,NLog.LogEventInfo)">
            <summary>
            Writes the specified diagnostic message.
            </summary>
            <param name="wrapperType">The name of the type that wraps Logger.</param>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,``0)">
            <overloads>
            Writes the diagnostic message at the specified level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.LogException(NLog.LogLevel,System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``1(NLog.LogLevel,System.String,``0)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``2(NLog.LogLevel,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log``3(NLog.LogLevel,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Trace</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.TraceException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Trace</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Debug</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.DebugException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Debug</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Info</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.InfoException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Info</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Warn</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.WarnException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Warn</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Error</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.ErrorException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Error</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(``0)">
            <overloads>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified format provider and format parameters.
            </overloads>
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <typeparam name="T">Type of the value.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="value">The value to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(NLog.LogMessageGenerator)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="messageFunc">A function returning message to be written. Function is not evaluated if logging is not enabled.</param>
        </member>
        <member name="M:NLog.Logger.FatalException(System.String,System.Exception)">
            <summary>
            Writes the diagnostic message and exception at the <c>Fatal</c> level.
            </summary>
            <param name="message">A <see langword="string" /> to be written.</param>
            <param name="exception">An exception to be logged.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters and formatting them with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="message">Log message.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object[])">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="args">Arguments to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.IFormatProvider,System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter and formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``1(System.String,``0)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameter.
            </summary>
            <typeparam name="TArgument">The type of the argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``2(System.IFormatProvider,System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``2(System.String,``0,``1)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``3(System.IFormatProvider,System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified arguments formatting it with the supplied format provider.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal``3(System.String,``0,``1,``2)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <typeparam name="TArgument1">The type of the first argument.</typeparam>
            <typeparam name="TArgument2">The type of the second argument.</typeparam>
            <typeparam name="TArgument3">The type of the third argument.</typeparam>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument1">The first argument to format.</param>
            <param name="argument2">The second argument to format.</param>
            <param name="argument3">The third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified parameters.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="level">The log level.</param>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Log(NLog.LogLevel,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the specified level using the specified value as a parameter.
            </summary>
            <param name="level">The log level.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Trace(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Trace</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Debug(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Debug</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Info(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Info</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Warn(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Warn</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Error(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Error</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="obj">A <see langword="object" /> to be written.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified parameters.
            </summary>
            <param name="message">A <see langword="string" /> containing format items.</param>
            <param name="arg1">First argument to format.</param>
            <param name="arg2">Second argument to format.</param>
            <param name="arg3">Third argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Boolean)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Char)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Byte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.String)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Int64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Single)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Double)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Decimal)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.Object)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.SByte)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt32)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.IFormatProvider,System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter and formatting it with the supplied format provider.
            </summary>
            <param name="formatProvider">An IFormatProvider that supplies culture-specific formatting information.</param>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="M:NLog.Logger.Fatal(System.String,System.UInt64)">
            <summary>
            Writes the diagnostic message at the <c>Fatal</c> level using the specified value as a parameter.
            </summary>
            <param name="message">A <see langword="string" /> containing one format item.</param>
            <param name="argument">The argument to format.</param>
        </member>
        <member name="E:NLog.Logger.LoggerReconfigured">
            <summary>
            Occurs when logger configuration changes.
            </summary>
        </member>
        <member name="P:NLog.Logger.Name">
            <summary>
            Gets the name of the logger.
            </summary>
        </member>
        <member name="P:NLog.Logger.Factory">
            <summary>
            Gets the factory that created this logger.
            </summary>
        </member>
        <member name="P:NLog.Logger.IsTraceEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Trace</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Trace</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsDebugEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Debug</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Debug</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsInfoEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Info</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Info</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsWarnEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Warn</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Warn</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsErrorEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Error</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Error</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="P:NLog.Logger.IsFatalEnabled">
            <summary>
            Gets a value indicating whether logging is enabled for the <c>Fatal</c> level.
            </summary>
            <returns>A value of <see langword="true" /> if logging is enabled for the <c>Fatal</c> level, otherwise it returns <see langword="false" />.</returns>
        </member>
        <member name="T:NLog.LoggerImpl">
            <summary>
            Implementation of logging engine.
            </summary>
        </member>
        <member name="M:NLog.LoggerImpl.GetFilterResult(System.Collections.Generic.IEnumerable{NLog.Filters.Filter},NLog.LogEventInfo)">
            <summary>
            Gets the filter result.
            </summary>
            <param name="filterChain">The filter chain.</param>
            <param name="logEvent">The log event.</param>
            <returns>The result of the filter.</returns>
        </member>
        <member name="T:NLog.LogLevel">
            <summary>
            Defines available log levels.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Trace">
            <summary>
            Trace log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Debug">
            <summary>
            Debug log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Info">
            <summary>
            Info log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Warn">
            <summary>
            Warn log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Error">
            <summary>
            Error log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Fatal">
            <summary>
            Fatal log level.
            </summary>
        </member>
        <member name="F:NLog.LogLevel.Off">
            <summary>
            Off log level.
            </summary>
        </member>
        <member name="M:NLog.LogLevel.#cctor">
            <summary>
            Initializes static members of the LogLevel class.
            </summary>
        </member>
        <member name="M:NLog.LogLevel.op_Equality(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal == level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_Inequality(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is not equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal != level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is greater than the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &gt; level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_GreaterThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is greater than or equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &gt;= level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThan(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is less than the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &lt; level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.op_LessThanOrEqual(NLog.LogLevel,NLog.LogLevel)">
            <summary>
            Compares two <see cref="T:NLog.LogLevel" /> objects 
            and returns a value indicating whether 
            the first one is less than or equal to the second one.
            </summary>
            <param name="level1">The first level.</param>
            <param name="level2">The second level.</param>
            <returns>The value of <c>level1.Ordinal &lt;= level2.Ordinal</c>.</returns>
        </member>
        <member name="M:NLog.LogLevel.FromOrdinal(System.Int32)">
            <summary>
            Gets the <see cref="T:NLog.LogLevel" /> that corresponds to the specified ordinal.
            </summary>
            <param name="ordinal">The ordinal.</param>
            <returns>The <see cref="T:NLog.LogLevel" /> instance. For 0 it returns <see cref="F:NLog.LogLevel.Debug" />, 1 gives <see cref="F:NLog.LogLevel.Info" /> and so on.</returns>
        </member>
        <member name="M:NLog.LogLevel.FromString(System.String)">
            <summary>
            Returns the <see cref="T:NLog.LogLevel" /> that corresponds to the supplied <see langword="string" />.
            </summary>
            <param name="levelName">The texual representation of the log level.</param>
            <returns>The enumeration value.</returns>
        </member>
        <member name="M:NLog.LogLevel.ToString">
            <summary>
            Returns a string representation of the log level.
            </summary>
            <returns>Log level name.</returns>
        </member>
        <member name="M:NLog.LogLevel.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:NLog.LogLevel.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            Value of <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
        </member>
        <member name="M:NLog.LogLevel.CompareTo(System.Object)">
            <summary>
            Compares the level to the other <see cref="T:NLog.LogLevel" /> object.
            </summary>
            <param name="obj">
            The object object.
            </param>
            <returns>
            A value less than zero when this logger's <see cref="P:NLog.LogLevel.Ordinal" /> is 
            less than the other logger's ordinal, 0 when they are equal and 
            greater than zero when this ordinal is greater than the
            other ordinal.
            </returns>
        </member>
        <member name="P:NLog.LogLevel.Name">
            <summary>
            Gets the name of the log level.
            </summary>
        </member>
        <member name="T:NLog.LogManager">
            <summary>
            Creates and manages instances of <see cref="T:NLog.Logger" /> objects.
            </summary>
        </member>
        <member name="M:NLog.LogManager.#cctor">
            <summary>
            Initializes static members of the LogManager class.
            </summary>
        </member>
        <member name="M:NLog.LogManager.#ctor">
            <summary>
            Prevents a default instance of the LogManager class from being created.
            </summary>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.GetCurrentClassLogger(System.Type)">
            <summary>
            Gets the logger named after the currently-being-initialized class.
            </summary>
            <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger" />.</param>
            <returns>The logger.</returns>
            <remarks>This is a slow-running method. 
            Make sure you're not doing this in a loop.</remarks>
        </member>
        <member name="M:NLog.LogManager.CreateNullLogger">
            <summary>
            Creates a logger that discards all log messages.
            </summary>
            <returns>Null logger which discards all log messages.</returns>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogManager.GetLogger(System.String,System.Type)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <param name="loggerType">The logger class. The class must inherit from <see cref="T:NLog.Logger" />.</param>
            <returns>The logger reference. Multiple calls to <c>GetLogger</c> with the same argument aren't guaranteed to return the same logger reference.</returns>
        </member>
        <member name="M:NLog.LogManager.ReconfigExistingLoggers">
            <summary>
            Loops through all loggers previously returned by GetLogger.
            and recalculates their target and filter list. Useful after modifying the configuration programmatically
            to ensure that all loggers have been properly configured.
            </summary>
        </member>
        <member name="M:NLog.LogManager.Flush">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
        </member>
        <member name="M:NLog.LogManager.Flush(System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.TimeSpan)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeout">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.Flush(NLog.Common.AsyncContinuation,System.Int32)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <param name="timeoutMilliseconds">Maximum time to allow for the flush. Any messages after that time will be discarded.</param>
        </member>
        <member name="M:NLog.LogManager.DisableLogging">
            <summary>Decreases the log enable counter and if it reaches -1 
            the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging" /> calls.</remarks>
            <returns>An object that iplements IDisposable whose Dispose() method
            reenables logging. To be used with C# <c>using ()</c> statement.</returns>
        </member>
        <member name="M:NLog.LogManager.EnableLogging">
            <summary>Increases the log enable counter and if it reaches 0 the logs are disabled.</summary>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging" /> calls.</remarks>
        </member>
        <member name="M:NLog.LogManager.IsLoggingEnabled">
            <summary>
            Returns <see langword="true" /> if logging is currently enabled.
            </summary>
            <returns>A value of <see langword="true" /> if logging is currently enabled, 
            <see langword="false" /> otherwise.</returns>
            <remarks>Logging is enabled if the number of <see cref="M:NLog.LogManager.EnableLogging" /> calls is greater 
            than or equal to <see cref="M:NLog.LogManager.DisableLogging" /> calls.</remarks>
        </member>
        <member name="E:NLog.LogManager.ConfigurationChanged">
            <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration" /> changes.
            </summary>
        </member>
        <member name="E:NLog.LogManager.ConfigurationReloaded">
            <summary>
            Occurs when logging <see cref="P:NLog.LogManager.Configuration" /> gets reloaded.
            </summary>
        </member>
        <member name="P:NLog.LogManager.ThrowExceptions">
            <summary>
            Gets or sets a value indicating whether NLog should throw exceptions. 
            By default exceptions are not thrown under any circumstances.
            </summary>
        </member>
        <member name="P:NLog.LogManager.Configuration">
            <summary>
            Gets or sets the current logging configuration.
            </summary>
        </member>
        <member name="P:NLog.LogManager.GlobalThreshold">
            <summary>
            Gets or sets the global log threshold. Log events below this threshold are not logged.
            </summary>
        </member>
        <member name="T:NLog.LogMessageGenerator">
            <summary>
            Returns a log message. Used to defer calculation of 
            the log message until it's actually needed.
            </summary>
            <returns>Log message.</returns>
        </member>
        <member name="T:NLog.LogReceiverService.ILogReceiverClient">
            <summary>
            Service contract for Log Receiver client.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverClient.BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)" />.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="T:NLog.LogReceiverService.ILogReceiverClientChannel">
            <summary>
            Log Receiver Client Channel.
            </summary>
        </member>
        <member name="T:NLog.LogReceiverService.ILogReceiverServer">
            <summary>
            Service contract for Log Receiver server.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.ILogReceiverServer.ProcessLogMessages(NLog.LogReceiverService.NLogEvents)">
            <summary>
            Processes the log messages.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="T:NLog.LogReceiverService.ListOfStrings">
            <summary>
            List of strings annotated for more terse serialization.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.ListOfStrings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.ListOfStrings" /> class.
            </summary>
        </member>
        <member name="T:NLog.LogReceiverService.LogReceiverServiceConfig">
            <summary>
            Internal configuration of Log Receiver Service contracts.
            </summary>
        </member>
        <member name="T:NLog.LogReceiverService.NLogEvent">
            <summary>
            Wire format for NLog Event.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvent.ToEventInfo(NLog.LogReceiverService.NLogEvents,System.String)">
            <summary>
            Converts the <see cref="T:NLog.LogReceiverService.NLogEvent" /> to <see cref="T:NLog.LogEventInfo" />.
            </summary>
            <param name="context">The <see cref="T:NLog.LogReceiverService.NLogEvent" /> object this <see cref="T:NLog.LogReceiverService.NLogEvent" /> is part of..</param>
            <param name="loggerNamePrefix">The logger name prefix to prepend in front of the logger name.</param>
            <returns>Converted <see cref="T:NLog.LogEventInfo" />.</returns>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.Id">
            <summary>
            Gets or sets the client-generated identifier of the event.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.LevelOrdinal">
            <summary>
            Gets or sets the ordinal of the log level.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.LoggerOrdinal">
            <summary>
            Gets or sets the logger ordinal (index into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings" />.
            </summary>
            <value>The logger ordinal.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.TimeDelta">
            <summary>
            Gets or sets the time delta (in ticks) between the time of the event and base time.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.MessageOrdinal">
            <summary>
            Gets or sets the message string index.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.Values">
            <summary>
            Gets or sets the collection of layout values.
            </summary>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvent.ValueIndexes">
            <summary>
            Gets or sets the indexes into <see cref="P:NLog.LogReceiverService.NLogEvents.Strings" /> array for each layout value.
            </summary>
        </member>
        <member name="T:NLog.LogReceiverService.NLogEvents">
            <summary>
            Wire format for NLog event package.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo(System.String)">
            <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo" /> objects suitable for routing through NLog.
            </summary>
            <param name="loggerNamePrefix">The logger name prefix to prepend in front of each logger name.</param>
            <returns>
            Sequence of <see cref="T:NLog.LogEventInfo" /> objects.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.NLogEvents.ToEventInfo">
            <summary>
            Converts the events to sequence of <see cref="T:NLog.LogEventInfo" /> objects suitable for routing through NLog.
            </summary>
            <returns>
            Sequence of <see cref="T:NLog.LogEventInfo" /> objects.
            </returns>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.ClientName">
            <summary>
            Gets or sets the name of the client.
            </summary>
            <value>The name of the client.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.BaseTimeUtc">
            <summary>
            Gets or sets the base time (UTC ticks) for all events in the package.
            </summary>
            <value>The base time UTC.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.LayoutNames">
            <summary>
            Gets or sets the collection of layout names which are shared among all events.
            </summary>
            <value>The layout names.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.Strings">
            <summary>
            Gets or sets the collection of logger names.
            </summary>
            <value>The logger names.</value>
        </member>
        <member name="P:NLog.LogReceiverService.NLogEvents.Events">
            <summary>
            Gets or sets the list of events.
            </summary>
            <value>The events.</value>
        </member>
        <member name="T:NLog.LogReceiverService.WcfLogReceiverClient">
            <summary>
            Log Receiver Client using WCF.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
            <param name="remoteAddress">The remote address.</param>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
            <param name="endpointConfigurationName">Name of the endpoint configuration.</param>
            <param name="remoteAddress">The remote address.</param>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.LogReceiverService.WcfLogReceiverClient" /> class.
            </summary>
            <param name="binding">The binding.</param>
            <param name="remoteAddress">The remote address.</param>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.OpenAsync">
            <summary>
            Opens the client asynchronously.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.OpenAsync(System.Object)">
            <summary>
            Opens the client asynchronously.
            </summary>
            <param name="userState">User-specific state.</param>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.CloseAsync">
            <summary>
            Closes the client asynchronously.
            </summary>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.CloseAsync(System.Object)">
            <summary>
            Closes the client asynchronously.
            </summary>
            <param name="userState">User-specific state.</param>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.ProcessLogMessagesAsync(NLog.LogReceiverService.NLogEvents)">
            <summary>
            Processes the log messages asynchronously.
            </summary>
            <param name="events">The events to send.</param>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.ProcessLogMessagesAsync(NLog.LogReceiverService.NLogEvents,System.Object)">
            <summary>
            Processes the log messages asynchronously.
            </summary>
            <param name="events">The events to send.</param>
            <param name="userState">User-specific state.</param>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.NLog#LogReceiverService#ILogReceiverClient#BeginProcessLogMessages(NLog.LogReceiverService.NLogEvents,System.AsyncCallback,System.Object)">
            <summary>
            Begins processing of log messages.
            </summary>
            <param name="events">The events to send.</param>
            <param name="callback">The callback.</param>
            <param name="asyncState">Asynchronous state.</param>
            <returns>
            IAsyncResult value which can be passed to <see cref="M:NLog.LogReceiverService.ILogReceiverClient.EndProcessLogMessages(System.IAsyncResult)" />.
            </returns>
        </member>
        <member name="M:NLog.LogReceiverService.WcfLogReceiverClient.NLog#LogReceiverService#ILogReceiverClient#EndProcessLogMessages(System.IAsyncResult)">
            <summary>
            Ends asynchronous processing of log messages.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="E:NLog.LogReceiverService.WcfLogReceiverClient.ProcessLogMessagesCompleted">
            <summary>
            Occurs when the log message processing has completed.
            </summary>
        </member>
        <member name="E:NLog.LogReceiverService.WcfLogReceiverClient.OpenCompleted">
            <summary>
            Occurs when Open operation has completed.
            </summary>
        </member>
        <member name="E:NLog.LogReceiverService.WcfLogReceiverClient.CloseCompleted">
            <summary>
            Occurs when Close operation has completed.
            </summary>
        </member>
        <member name="T:NLog.MappedDiagnosticsContext">
            <summary>
            Mapped Diagnostics Context - a thread-local structure that keeps a dictionary
            of strings and provides methods to output them in layouts. 
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Set(System.String,System.String)">
            <summary>
            Sets the current thread MDC item to the specified value.
            </summary>
            <param name="item">Item name.</param>
            <param name="value">Item value.</param>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Get(System.String)">
            <summary>
            Gets the current thread MDC named item.
            </summary>
            <param name="item">Item name.</param>
            <returns>The item value of String.Empty if the value is not present.</returns>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Contains(System.String)">
            <summary>
            Checks whether the specified item exists in current thread MDC.
            </summary>
            <param name="item">Item name.</param>
            <returns>A boolean indicating whether the specified item exists in current thread MDC.</returns>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Remove(System.String)">
            <summary>
            Removes the specified item from current thread MDC.
            </summary>
            <param name="item">Item name.</param>
        </member>
        <member name="M:NLog.MappedDiagnosticsContext.Clear">
            <summary>
            Clears the content of current thread MDC.
            </summary>
        </member>
        <member name="T:NLog.MDC">
            <summary>
            Mapped Diagnostics Context - used for log4net compatibility.
            </summary>
        </member>
        <member name="T:NLog.NDC">
            <summary>
            Nested Diagnostics Context - for log4net compatibility.
            </summary>
        </member>
        <member name="T:NLog.NestedDiagnosticsContext">
            <summary>
            Nested Diagnostics Context - a thread-local structure that keeps a stack
            of strings and provides methods to output them in layouts
            Mostly for compatibility with log4net.
            </summary>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Push(System.String)">
            <summary>
            Pushes the specified text on current thread NDC.
            </summary>
            <param name="text">The text to be pushed.</param>
            <returns>An instance of the object that implements IDisposable that returns the stack to the previous level when IDisposable.Dispose() is called. To be used with C# using() statement.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Pop">
            <summary>
            Pops the top message off the NDC stack.
            </summary>
            <returns>The top message which is no longer on the stack.</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.GetTopMessage">
            <summary>
            Gets the top NDC message but doesn't remove it.
            </summary>
            <returns>The top message. .</returns>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.Clear">
            <summary>
            Clears current thread NDC stack.
            </summary>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.GetAllMessages">
            <summary>
            Gets all messages on the stack.
            </summary>
            <returns>Array of strings on the stack.</returns>
        </member>
        <member name="T:NLog.NestedDiagnosticsContext.StackPopper">
            <summary>
            Resets the stack to the original count during <see cref="M:System.IDisposable.Dispose" />.
            </summary>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.StackPopper.#ctor(System.Collections.Generic.Stack{System.String},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NestedDiagnosticsContext.StackPopper" /> class.
            </summary>
            <param name="stack">The stack.</param>
            <param name="previousCount">The previous count.</param>
        </member>
        <member name="M:NLog.NestedDiagnosticsContext.StackPopper.System#IDisposable#Dispose">
            <summary>
            Reverts the stack to original item count.
            </summary>
        </member>
        <member name="T:NLog.NLogConfigurationException">
            <summary>
            Exception thrown during NLog configuration.
            </summary>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.NLogConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogConfigurationException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.NLogRuntimeException">
            <summary>
            Exception thrown during log event processing.
            </summary>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:NLog.NLogRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.NLogRuntimeException" /> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info" /> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
        </member>
        <member name="T:NLog.Targets.ArchiveNumberingMode">
            <summary>
            Specifies the way archive numbering is performed.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.Sequence">
            <summary>
            Sequence style numbering. The most recent archive has the highest number.
            </summary>
        </member>
        <member name="F:NLog.Targets.ArchiveNumberingMode.Rolling">
            <summary>
            Rolling style numbering (the most recent is always #0 then #1, ..., #N.
            </summary>
        </member>
        <member name="T:NLog.Targets.AspResponseTarget">
            <summary>
            Outputs log messages through the ASP Response object.
            </summary>
            <seealso href="http://nlog-project.org/wiki/AspResponse_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="T:NLog.Targets.TargetWithLayout">
            <summary>
            Represents target that supports string formatting using layouts.
            </summary>
        </member>
        <member name="T:NLog.Targets.Target">
            <summary>
            Represents logging target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Initialize">
            <summary>
            Initializes this instance.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Close">
            <summary>
            Closes this instance.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.System#IDisposable#Dispose">
            <summary>
            Closes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)">
            <summary>
            Calls the <see cref="M:NLog.Layouts.Layout.Precalculate(NLog.LogEventInfo)" /> on each volatile layout
            used by this target.
            </summary>
            <param name="logEvent">
            The log event.
            </param>
        </member>
        <member name="M:NLog.Targets.Target.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:NLog.Targets.Target.WriteAsyncLogEvent(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes the log to the target.
            </summary>
            <param name="logEvent">Log event to write.</param>
        </member>
        <member name="M:NLog.Targets.Target.WriteAsyncLogEvents(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes the array of log events.
            </summary>
            <param name="logEvents">The log events.</param>
        </member>
        <member name="M:NLog.Targets.Target.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.Target.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target.
            classes.
            </summary>
            <param name="logEvent">
            Logging event to be written out.
            </param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes log event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Log event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.Target.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="P:NLog.Targets.Target.Name">
            <summary>
            Gets or sets the name of the target.
            </summary>
            <docgen category="General Options" order="10" />
        </member>
        <member name="P:NLog.Targets.Target.SyncRoot">
            <summary>
            Gets the object which can be used to synchronize asynchronous operations that must rely on the .
            </summary>
        </member>
        <member name="P:NLog.Targets.Target.IsInitialized">
            <summary>
            Gets a value indicating whether the target has been initialized.
            </summary>
        </member>
        <member name="M:NLog.Targets.TargetWithLayout.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayout" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="P:NLog.Targets.TargetWithLayout.Layout">
            <summary>
            Gets or sets the layout used to format log messages.
            </summary>
            <docgen category="Layout Options" order="1" />
        </member>
        <member name="M:NLog.Targets.AspResponseTarget.Write(NLog.LogEventInfo)">
            <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.AspResponseTarget.AddComments">
            <summary>
            Gets or sets a value indicating whether to add &lt;!-- --&gt; comments around all written texts.
            </summary>
            <docgen category="Layout Options" order="100" />
        </member>
        <member name="T:NLog.Targets.ChainsawTarget">
            <summary>
            Sends log messages to the remote instance of Chainsaw application from log4j. 
            </summary>
            <seealso href="http://nlog-project.org/wiki/Chainsaw_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/Chainsaw/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/Chainsaw/Simple/Example.cs" />
                <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            </example>
        </member>
        <member name="T:NLog.Targets.NLogViewerTarget">
            <summary>
            Sends log messages to the remote instance of NLog Viewer. 
            </summary>
            <seealso href="http://nlog-project.org/wiki/NLogViewer_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/NLogViewer/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/NLogViewer/Simple/Example.cs" />
                <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
            </example>
        </member>
        <member name="T:NLog.Targets.NetworkTarget">
            <summary>
            Sends log messages over the network.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Network_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/Network/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/Network/Simple/Example.cs" />
                <p>
            To print the results, use any application that's able to receive messages over
            TCP or UDP. <a href="http://m.nu/program/util/netcat/netcat.html">NetCat</a> is
            a simple but very powerful command-line tool that can be used for that. This image
            demonstrates the NetCat tool receiving log messages from Network target.
            </p>
                <img src="examples/targets/Screenshots/Network/Output.gif" />
                <p>
            NOTE: If your receiver application is ever likely to be off-line, don't use TCP protocol
            or you'll get TCP timeouts and your application will crawl. 
            Either switch to UDP transport or use <a href="target.AsyncWrapper.html">AsyncWrapper</a> target
            so that your application threads will not be blocked by the timing-out connection attempts.
            </p>
                <p>
            There are two specialized versions of the Network target: <a href="target.Chainsaw.html">Chainsaw</a>
            and <a href="target.NLogViewer.html">NLogViewer</a> which write to instances of Chainsaw log4j viewer
            or NLogViewer application respectively.
            </p>
            </example>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NetworkTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages asynchronously (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.CloseTarget">
            <summary>
            Closes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Sends the 
            rendered logging event over the network optionally concatenating it with a newline character.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.NetworkTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>
            Gets the bytes to be written.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Address">
            <summary>
            Gets or sets the network address.
            </summary>
            <remarks>
            The network address can be:
            <ul><li>tcp://host:port - TCP (auto select IPv4/IPv6)</li><li>tcp4://host:port - force TCP/IPv4</li><li>tcp6://host:port - force TCP/IPv6</li><li>udp://host:port - UDP (auto select IPv4/IPv6, not supported on Silverlight)</li><li>udp4://host:port - force UDP/IPv4 (not supported on Silverlight)</li><li>udp6://host:port - force UDP/IPv6  (not supported on Silverlight)</li></ul>
            For HTTP Support use WebService target.
            </remarks>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.KeepConnection">
            <summary>
            Gets or sets a value indicating whether to keep connection open whenever possible.
            </summary>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.NewLine">
            <summary>
            Gets or sets a value indicating whether to append newline at the end of log message.
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.MaxMessageSize">
            <summary>
            Gets or sets the maximum message size in bytes.
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.ConnectionCacheSize">
            <summary>
            Gets or sets the size of the connection cache (number of connections which are kept alive).
            </summary>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.OnOverflow">
            <summary>
            Gets or sets the action that should be taken if the message is larger than
            maxMessageSize.
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NetworkTarget.Encoding">
            <summary>
            Gets or sets the encoding to be used.
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="M:NLog.Targets.NLogViewerTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeNLogData">
            <summary>
            Gets or sets a value indicating whether to include NLog-specific extensions to log4j schema.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.AppInfo">
            <summary>
            Gets or sets the AppInfo field. By default it's the friendly name of the current AppDomain.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeCallSite">
            <summary>
            Gets or sets a value indicating whether to include call site (class and method name) in the information sent over the network.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeSourceInfo">
            <summary>
            Gets or sets a value indicating whether to include source info (file name and line number) in the information sent over the network.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeMdc">
            <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.MappedDiagnosticsContext" /> dictionary contents.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.IncludeNdc">
            <summary>
            Gets or sets a value indicating whether to include <see cref="T:NLog.NestedDiagnosticsContext" /> stack contents.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a named parameter.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Renderer">
            <summary>
            Gets the layout renderer which produces Log4j-compatible XML events.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerTarget.Layout">
            <summary>
            Gets or sets the instance of <see cref="T:NLog.Layouts.Log4JXmlEventLayout" /> that is used to format log messages.
            </summary>
        </member>
        <member name="M:NLog.Targets.ChainsawTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ChainsawTarget" /> class.
            </summary>
        </member>
        <member name="T:NLog.Targets.ColoredConsoleTarget">
            <summary>
            Writes log messages to the console with customizable coloring.
            </summary>
            <seealso href="http://nlog-project.org/wiki/ColoredConsole_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/ColoredConsole/Simple/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/ColoredConsole/Simple/Example.cs" />
                <p>
            The result is a colorful console, where each color represents a single log level.
            </p>
                <img src="examples/targets/Screenshots/ColoredConsole/Simple.gif" />
                <p>
            In addition you can configure your own word highlighting rules so that 
            particular words or regular expressions will be marked with 
            a distinguished color:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/ColoredConsole/Word Highlighting/NLog.config" />
                <p>Programmatic equivalent of the above configuration:</p>
                <code lang="C#" source="examples/targets/Configuration API/ColoredConsole/Word Highlighting/Example.cs" />
                <p>
            Here's the result:
            </p>
                <img src="examples/targets/Screenshots/ColoredConsole/Word Highlighting.gif" />
                <p>
            Custom row highlighting lets you colorize the output by any <a href="conditions.html">condition</a>.
            This example shows how to mark all entries containing the word "serious" with white color on red background
            and mark all entries coming from a particular logger with yellow on blue.
            </p>
                <code lang="XML" source="examples/targets/Configuration File/ColoredConsole/Row Highlighting/NLog.config" />
                <p>Programmatic equivalent of the above configuration:</p>
                <code lang="C#" source="examples/targets/Configuration API/ColoredConsole/Row Highlighting/Example.cs" />
                <p>
            Here's the result:
            </p>
                <img src="examples/targets/Screenshots/ColoredConsole/Row Highlighting.gif" />
            </example>
        </member>
        <member name="T:NLog.Targets.TargetWithLayoutHeaderAndFooter">
            <summary>
            Represents target that supports string formatting using layouts.
            </summary>
        </member>
        <member name="M:NLog.Targets.TargetWithLayoutHeaderAndFooter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetWithLayoutHeaderAndFooter" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Layout">
            <summary>
            Gets or sets the text to be rendered.
            </summary>
            <docgen category="Layout Options" order="1" />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Footer">
            <summary>
            Gets or sets the footer.
            </summary>
            <docgen category="Layout Options" order="3" />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <docgen category="Layout Options" order="2" />
        </member>
        <member name="P:NLog.Targets.TargetWithLayoutHeaderAndFooter.LHF">
            <summary>
            Gets or sets the layout with header and footer.
            </summary>
            <value>The layout with header and footer.</value>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ColoredConsoleTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.ColoredConsoleTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified log event to the console highlighting entries
            and words based on a set of defined rules.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.ErrorStream">
            <summary>
            Gets or sets a value indicating whether the error stream (stderr) should be used instead of the output stream (stdout).
            </summary>
            <docgen category="Output Options" order="10" />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.UseDefaultRowHighlightingRules">
            <summary>
            Gets or sets a value indicating whether to use default row highlighting rules.
            </summary>
            <remarks>
            The default rules are:
            <table><tr><th>Condition</th><th>Foreground Color</th><th>Background Color</th></tr><tr><td>level == LogLevel.Fatal</td><td>Red</td><td>NoChange</td></tr><tr><td>level == LogLevel.Error</td><td>Yellow</td><td>NoChange</td></tr><tr><td>level == LogLevel.Warn</td><td>Magenta</td><td>NoChange</td></tr><tr><td>level == LogLevel.Info</td><td>White</td><td>NoChange</td></tr><tr><td>level == LogLevel.Debug</td><td>Gray</td><td>NoChange</td></tr><tr><td>level == LogLevel.Trace</td><td>DarkGray</td><td>NoChange</td></tr></table></remarks>
            <docgen category="Highlighting Rules" order="9" />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.RowHighlightingRules">
            <summary>
            Gets the row highlighting rules.
            </summary>
            <docgen category="Highlighting Rules" order="10" />
        </member>
        <member name="P:NLog.Targets.ColoredConsoleTarget.WordHighlightingRules">
            <summary>
            Gets the word highlighting rules.
            </summary>
            <docgen category="Highlighting Rules" order="11" />
        </member>
        <member name="T:NLog.Targets.ConsoleOutputColor">
            <summary>
            Colored console output color.
            </summary>
            <remarks>
            Note that this enumeration is defined to be binary compatible with 
            .NET 2.0 System.ConsoleColor + some additions
            </remarks>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Black">
            <summary>
            Black Color (#000000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkBlue">
            <summary>
            Dark blue Color (#000080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkGreen">
            <summary>
            Dark green Color (#008000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkCyan">
            <summary>
            Dark Cyan Color (#008080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkRed">
            <summary>
            Dark Red Color (#800000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkMagenta">
            <summary>
            Dark Magenta Color (#800080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkYellow">
            <summary>
            Dark Yellow Color (#808000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Gray">
            <summary>
            Gray Color (#C0C0C0).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.DarkGray">
            <summary>
            Dark Gray Color (#808080).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Blue">
            <summary>
            Blue Color (#0000FF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Green">
            <summary>
            Green Color (#00FF00).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Cyan">
            <summary>
            Cyan Color (#00FFFF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Red">
            <summary>
            Red Color (#FF0000).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Magenta">
            <summary>
            Magenta Color (#FF00FF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.Yellow">
            <summary>
            Yellow Color (#FFFF00).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.White">
            <summary>
            White Color (#FFFFFF).
            </summary>
        </member>
        <member name="F:NLog.Targets.ConsoleOutputColor.NoChange">
            <summary>
            Don't change the color.
            </summary>
        </member>
        <member name="T:NLog.Targets.ConsoleRowHighlightingRule">
            <summary>
            The row-highlighting condition.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#cctor">
            <summary>
            Initializes static members of the ConsoleRowHighlightingRule class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleRowHighlightingRule" /> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="foregroundColor">Color of the foreground.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="M:NLog.Targets.ConsoleRowHighlightingRule.CheckCondition(NLog.LogEventInfo)">
            <summary>
            Checks whether the specified log event matches the condition (if any).
            </summary>
            <param name="logEvent">
            Log event.
            </param>
            <returns>
            A value of <see langword="true" /> if the condition is not defined or 
            if it matches, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Default">
            <summary>
            Gets the default highlighting rule. Doesn't change the color.
            </summary>
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.Condition">
            <summary>
            Gets or sets the condition that must be met in order to set the specified foreground and background color.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <docgen category="Formatting Options" order="10" />
        </member>
        <member name="P:NLog.Targets.ConsoleRowHighlightingRule.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <docgen category="Formatting Options" order="10" />
        </member>
        <member name="T:NLog.Targets.ConsoleTarget">
            <summary>
            Writes log messages to the console.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Console_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/Console/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/Console/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the Console.Out or
            Console.Error depending on the value of the Error flag.
            </summary>
            <param name="logEvent">The logging event.</param>
            <remarks>
            Note that the Error option is not supported on .NET Compact Framework.
            </remarks>
        </member>
        <member name="P:NLog.Targets.ConsoleTarget.Error">
            <summary>
            Gets or sets a value indicating whether to send the log messages to the standard error instead of the standard output.
            </summary>
            <docgen category="Console Options" order="10" />
        </member>
        <member name="T:NLog.Targets.ConsoleWordHighlightingRule">
            <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.ConsoleWordHighlightingRule.#ctor(System.String,NLog.Targets.ConsoleOutputColor,NLog.Targets.ConsoleOutputColor)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.ConsoleWordHighlightingRule" /> class.
            </summary>
            <param name="text">The text to be matched..</param>
            <param name="foregroundColor">Color of the foreground.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Regex">
            <summary>
            Gets or sets the regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.Text">
            <summary>
            Gets or sets the text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.WholeWords">
            <summary>
            Gets or sets a value indicating whether to match whole words only.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing texts.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.CompiledRegex">
            <summary>
            Gets the compiled regular expression that matches either Text or Regex property.
            </summary>
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <docgen category="Formatting Options" order="10" />
        </member>
        <member name="P:NLog.Targets.ConsoleWordHighlightingRule.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <docgen category="Formatting Options" order="10" />
        </member>
        <member name="T:NLog.Targets.DatabaseCommandInfo">
            <summary>
            Information about database command + parameters.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseCommandInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseCommandInfo" /> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.CommandType">
            <summary>
            Gets or sets the type of the command.
            </summary>
            <value>The type of the command.</value>
            <docgen category="Command Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.ConnectionString">
            <summary>
            Gets or sets the connection string to run the command against. If not provided, connection string from the target is used.
            </summary>
            <docgen category="Command Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.Text">
            <summary>
            Gets or sets the command text.
            </summary>
            <docgen category="Command Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.IgnoreFailures">
            <summary>
            Gets or sets a value indicating whether to ignore failures.
            </summary>
            <docgen category="Command Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseCommandInfo.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
            <docgen category="Command Options" order="10" />
        </member>
        <member name="T:NLog.Targets.DatabaseParameterInfo">
            <summary>
            Represents a parameter to a Database target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseParameterInfo.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseParameterInfo" /> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterLayout">The parameter layout.</param>
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Name">
            <summary>
            Gets or sets the database parameter name.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Layout">
            <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Size">
            <summary>
            Gets or sets the database parameter size.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Precision">
            <summary>
            Gets or sets the database parameter precision.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseParameterInfo.Scale">
            <summary>
            Gets or sets the database parameter scale.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="T:NLog.Targets.DatabaseTarget">
            <summary>
            Writes log messages to the database using an ADO.NET provider.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Database_target">Documentation on NLog Wiki</seealso>
            <example>
                <para>
            The configuration is dependent on the database type, because
            there are differnet methods of specifying connection string, SQL
            command and command parameters.
            </para>
                <para>MS SQL Server using System.Data.SqlClient:</para>
                <code lang="XML" source="examples/targets/Configuration File/Database/MSSQL/NLog.config" height="450" />
                <para>Oracle using System.Data.OracleClient:</para>
                <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.Native/NLog.config" height="350" />
                <para>Oracle using System.Data.OleDbClient:</para>
                <code lang="XML" source="examples/targets/Configuration File/Database/Oracle.OleDb/NLog.config" height="350" />
                <para>To set up the log target programmatically use code like this (an equivalent of MSSQL configuration):</para>
                <code lang="C#" source="examples/targets/Configuration API/Database/MSSQL/Example.cs" height="630" />
            </example>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DatabaseTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the database. It creates
            a new database command, prepares parameters for it by calculating
            layouts and executes the command.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.DatabaseTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Write" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DbProvider">
            <summary>
            Gets or sets the name of the database provider.
            </summary>
            <remarks>
                <para>
            The parameter name should be a provider invariant name as registered in machine.config or app.config. Common values are:
            </para>
                <ul>
                    <li>
                        <c>System.Data.SqlClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.sqlclient.aspx">SQL Sever Client</see></li>
                    <li>
                        <c>System.Data.SqlServerCe.3.5</c> - <see href="http://www.microsoft.com/sqlserver/2005/en/us/compact.aspx">SQL Sever Compact 3.5</see></li>
                    <li>
                        <c>System.Data.OracleClient</c> - <see href="http://msdn.microsoft.com/en-us/library/system.data.oracleclient.aspx">Oracle Client from Microsoft</see> (deprecated in .NET Framework 4)</li>
                    <li>
                        <c>Oracle.DataAccess.Client</c> - <see href="http://www.oracle.com/technology/tech/windows/odpnet/index.html">ODP.NET provider from Oracle</see></li>
                    <li>
                        <c>System.Data.SQLite</c> - <see href="http://sqlite.phxsoftware.com/">System.Data.SQLite driver for SQLite</see></li>
                    <li>
                        <c>Npgsql</c> - <see href="http://npgsql.projects.postgresql.org/">Npgsql driver for PostgreSQL</see></li>
                    <li>
                        <c>MySql.Data.MySqlClient</c> - <see href="http://www.mysql.com/downloads/connector/net/">MySQL Connector/Net</see></li>
                </ul>
                <para>(Note that provider invariant names are not supported on .NET Compact Framework).</para>
                <para>
            Alternatively the parameter value can be be a fully qualified name of the provider 
            connection type (class implementing <see cref="T:System.Data.IDbConnection" />) or one of the following tokens:
            </para>
                <ul>
                    <li>
                        <c>sqlserver</c>, <c>mssql</c>, <c>microsoft</c> or <c>msde</c> - SQL Server Data Provider</li>
                    <li>
                        <c>oledb</c> - OLEDB Data Provider</li>
                    <li>
                        <c>odbc</c> - ODBC Data Provider</li>
                </ul>
            </remarks>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.ConnectionStringName">
            <summary>
            Gets or sets the name of the connection string (as specified in <see href="http://msdn.microsoft.com/en-us/library/bf7sd233.aspx">&lt;connectionStrings&gt; configuration section</see>.
            </summary>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.ConnectionString">
            <summary>
            Gets or sets the connection string. When provided, it overrides the values
            specified in DbHost, DbUserName, DbPassword, DbDatabase.
            </summary>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.InstallConnectionString">
            <summary>
            Gets or sets the connection string using for installation and uninstallation. If not provided, regular ConnectionString is being used.
            </summary>
            <docgen category="Installation Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.InstallDdlCommands">
            <summary>
            Gets the installation DDL commands.
            </summary>
            <docgen category="Installation Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.UninstallDdlCommands">
            <summary>
            Gets the uninstallation DDL commands.
            </summary>
            <docgen category="Installation Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.KeepConnection">
            <summary>
            Gets or sets a value indicating whether to keep the 
            database connection open between the log events.
            </summary>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.UseTransactions">
            <summary>
            Gets or sets a value indicating whether to use database transactions. 
            Some data providers require this.
            </summary>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DbHost">
            <summary>
            Gets or sets the database host name. If the ConnectionString is not provided
            this value will be used to construct the "Server=" part of the
            connection string.
            </summary>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DbUserName">
            <summary>
            Gets or sets the database user name. If the ConnectionString is not provided
            this value will be used to construct the "User ID=" part of the
            connection string.
            </summary>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DbPassword">
            <summary>
            Gets or sets the database password. If the ConnectionString is not provided
            this value will be used to construct the "Password=" part of the
            connection string.
            </summary>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.DbDatabase">
            <summary>
            Gets or sets the database name. If the ConnectionString is not provided
            this value will be used to construct the "Database=" part of the
            connection string.
            </summary>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.CommandText">
            <summary>
            Gets or sets the text of the SQL command to be run on each log level.
            </summary>
            <remarks>
            Typically this is a SQL INSERT statement or a stored procedure call. 
            It should use the database-specific parameters (marked as <c>@parameter</c>
            for SQL server or <c>:parameter</c> for Oracle, other data providers
            have their own notation) and not the layout renderers, 
            because the latter is prone to SQL injection attacks.
            The layout renderers should be specified as &lt;parameter /&gt; elements instead.
            </remarks>
            <docgen category="SQL Statement" order="10" />
        </member>
        <member name="P:NLog.Targets.DatabaseTarget.Parameters">
            <summary>
            Gets the collection of parameters. Each parameter contains a mapping
            between NLog layout and a database named or positional parameter.
            </summary>
            <docgen category="SQL Statement" order="11" />
        </member>
        <member name="T:NLog.Targets.DebuggerTarget">
            <summary>
            Writes log messages to the attached managed debugger.
            </summary>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/Debugger/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/Debugger/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.DebuggerTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the attached debugger.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.DebugTarget">
            <summary>
            Mock target - useful for testing.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Debug_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/Debug/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/Debug/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.DebugTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.DebugTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.DebugTarget.Write(NLog.LogEventInfo)">
            <summary>
            Increases the number of messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.DebugTarget.Counter">
            <summary>
            Gets the number of times this target has been called.
            </summary>
            <docgen category="Debugging Options" order="10" />
        </member>
        <member name="P:NLog.Targets.DebugTarget.LastMessage">
            <summary>
            Gets the last message rendered by this target.
            </summary>
            <docgen category="Debugging Options" order="10" />
        </member>
        <member name="T:NLog.Targets.EventLogTarget">
            <summary>
            Writes log message to the Event Log.
            </summary>
            <seealso href="http://nlog-project.org/wiki/EventLog_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/EventLog/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/EventLog/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.EventLogTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.EventLogTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the event log. 
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.EventLogTarget.MachineName">
            <summary>
            Gets or sets the name of the machine on which Event Log service is running.
            </summary>
            <docgen category="Event Log Options" order="10" />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.EventId">
            <summary>
            Gets or sets the layout that renders event ID.
            </summary>
            <docgen category="Event Log Options" order="10" />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Category">
            <summary>
            Gets or sets the layout that renders event Category.
            </summary>
            <docgen category="Event Log Options" order="10" />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Source">
            <summary>
            Gets or sets the value to be used as the event Source.
            </summary>
            <remarks>
            By default this is the friendly name of the current AppDomain.
            </remarks>
            <docgen category="Event Log Options" order="10" />
        </member>
        <member name="P:NLog.Targets.EventLogTarget.Log">
            <summary>
            Gets or sets the name of the Event Log to write to. This can be System, Application or 
            any user-defined name.
            </summary>
            <docgen category="Event Log Options" order="10" />
        </member>
        <member name="T:NLog.Targets.FileArchivePeriod">
            <summary>
            Modes of archiving files based on time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.None">
            <summary>
            Don't archive based on time.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Year">
            <summary>
            Archive every year.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Month">
            <summary>
            Archive every month.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Day">
            <summary>
            Archive daily.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Hour">
            <summary>
            Archive every hour.
            </summary>
        </member>
        <member name="F:NLog.Targets.FileArchivePeriod.Minute">
            <summary>
            Archive every minute.
            </summary>
        </member>
        <member name="T:NLog.Targets.FileTarget">
            <summary>
            Writes log messages to one or more files.
            </summary>
            <seealso href="http://nlog-project.org/wiki/File_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.FileTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FileTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles">
            <summary>
            Removes records of initialized files that have not been 
            accessed in the last two days.
            </summary>
            <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.CleanupInitializedFiles(System.DateTime)">
            <summary>
            Removes records of initialized files that have not been
            accessed after the specified date.
            </summary>
            <param name="cleanupThreshold">The cleanup threshold.</param>
            <remarks>
            Files are marked 'initialized' for the purpose of writing footers when the logging finishes.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes all pending file operations.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
            <remarks>
            The timeout parameter is ignored, because file APIs don't provide
            the needed functionality.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.InitializeTarget">
            <summary>
            Initializes file logging by creating data structures that
            enable efficient multi-file logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.CloseTarget">
            <summary>
            Closes the file(s) opened for writing.
            </summary>
        </member>
        <member name="M:NLog.Targets.FileTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to a file specified in the FileName 
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.FileTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes the specified array of logging events to a file specified in the FileName
            parameter.
            </summary>
            <param name="logEvents">An array of <see cref="T:NLog.LogEventInfo" /> objects.</param>
            <remarks>
            This function makes use of the fact that the events are batched by sorting
            the requests by filename. This optimizes the number of open/close calls
            and can help improve performance.
            </remarks>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetFormattedMessage(NLog.LogEventInfo)">
            <summary>
            Formats the log event for write.
            </summary>
            <param name="logEvent">The log event to be formatted.</param>
            <returns>A string representation of the log event.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.GetBytesToWrite(NLog.LogEventInfo)">
            <summary>
            Gets the bytes to be written to the file.
            </summary>
            <param name="logEvent">Log event.</param>
            <returns>Array of bytes that are ready to be written.</returns>
        </member>
        <member name="M:NLog.Targets.FileTarget.TransformBytes(System.Byte[])">
            <summary>
            Modifies the specified byte array before it gets sent to a file.
            </summary>
            <param name="bytes">The byte array.</param>
            <returns>The modified byte array. The function can do the modification in-place.</returns>
        </member>
        <member name="P:NLog.Targets.FileTarget.FileName">
            <summary>
            Gets or sets the name of the file to write to.
            </summary>
            <remarks>
            This FileName string is a layout which may include instances of layout renderers.
            This lets you use a single target to write to multiple files.
            </remarks>
            <example>
            The following value makes NLog write logging events to files based on the log level in the directory where
            the application runs.
            <code>${basedir}/${level}.log</code>
            All <c>Debug</c> messages will go to <c>Debug.log</c>, all <c>Info</c> messages will go to <c>Info.log</c> and so on.
            You can combine as many of the layout renderers as you want to produce an arbitrary log file name.
            </example>
            <docgen category="Output Options" order="1" />
        </member>
        <member name="P:NLog.Targets.FileTarget.CreateDirs">
            <summary>
            Gets or sets a value indicating whether to create directories if they don't exist.
            </summary>
            <remarks>
            Setting this to false may improve performance a bit, but you'll receive an error
            when attempting to write to a directory that's not present.
            </remarks>
            <docgen category="Output Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.DeleteOldFileOnStartup">
            <summary>
            Gets or sets a value indicating whether to delete old log file on startup.
            </summary>
            <remarks>
            This option works only when the "FileName" parameter denotes a single file.
            </remarks>
            <docgen category="Output Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.ReplaceFileContentsOnEachWrite">
            <summary>
            Gets or sets a value indicating whether to replace file contents on each write instead of appending log message at the end.
            </summary>
            <docgen category="Output Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.KeepFileOpen">
            <summary>
            Gets or sets a value indicating whether to keep log file open instead of opening and closing it on each logging event.
            </summary>
            <remarks>
            Setting this property to <c>True</c> helps improve performance.
            </remarks>
            <docgen category="Performance Tuning Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.EnableFileDelete">
            <summary>
            Gets or sets a value indicating whether to enable log file(s) to be deleted.
            </summary>
            <docgen category="Output Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.FileAttributes">
            <summary>
            Gets or sets the file attributes (Windows only).
            </summary>
            <docgen category="Output Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.LineEnding">
            <summary>
            Gets or sets the line ending mode.
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.AutoFlush">
            <summary>
            Gets or sets a value indicating whether to automatically flush the file buffers after each log message.
            </summary>
            <docgen category="Performance Tuning Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.OpenFileCacheSize">
            <summary>
            Gets or sets the number of files to be kept open. Setting this to a higher value may improve performance
            in a situation where a single File target is writing to many files
            (such as splitting by level or by logger).
            </summary>
            <remarks>
            The files are managed on a LRU (least recently used) basis, which flushes
            the files that have not been used for the longest period of time should the
            cache become full. As a rule of thumb, you shouldn't set this parameter to 
            a very high value. A number like 10-15 shouldn't be exceeded, because you'd
            be keeping a large number of files open which consumes system resources.
            </remarks>
            <docgen category="Performance Tuning Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.OpenFileCacheTimeout">
            <summary>
            Gets or sets the maximum number of seconds that files are kept open. If this number is negative the files are 
            not automatically closed after a period of inactivity.
            </summary>
            <docgen category="Performance Tuning Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.BufferSize">
            <summary>
            Gets or sets the log file buffer size in bytes.
            </summary>
            <docgen category="Performance Tuning Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.Encoding">
            <summary>
            Gets or sets the file encoding.
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWrites">
            <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on the same host.
            </summary>
            <remarks>
            This makes multi-process logging possible. NLog uses a special technique
            that lets it keep the files open for writing.
            </remarks>
            <docgen category="Performance Tuning Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.NetworkWrites">
            <summary>
            Gets or sets a value indicating whether concurrent writes to the log file by multiple processes on different network hosts.
            </summary>
            <remarks>
            This effectively prevents files from being kept open.
            </remarks>
            <docgen category="Performance Tuning Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts">
            <summary>
            Gets or sets the number of times the write is appended on the file before NLog
            discards the log message.
            </summary>
            <docgen category="Performance Tuning Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.ConcurrentWriteAttemptDelay">
            <summary>
            Gets or sets the delay in milliseconds to wait before attempting to write to the file again.
            </summary>
            <remarks>
            The actual delay is a random value between 0 and the value specified
            in this parameter. On each failed attempt the delay base is doubled
            up to <see cref="P:NLog.Targets.FileTarget.ConcurrentWriteAttempts" /> times.
            </remarks>
            <example>
            Assuming that ConcurrentWriteAttemptDelay is 10 the time to wait will be:<p />
            a random value between 0 and 10 milliseconds - 1st attempt<br />
            a random value between 0 and 20 milliseconds - 2nd attempt<br />
            a random value between 0 and 40 milliseconds - 3rd attempt<br />
            a random value between 0 and 80 milliseconds - 4th attempt<br />
            ...<p />
            and so on.
            </example>
            <docgen category="Performance Tuning Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveAboveSize">
            <summary>
            Gets or sets the size in bytes above which log files will be automatically archived.
            </summary>
            <remarks>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </remarks>
            <docgen category="Archival Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveEvery">
            <summary>
            Gets or sets a value indicating whether to automatically archive log files every time the specified time passes.
            </summary>
            <remarks>
            Files are moved to the archive as part of the write operation if the current period of time changes. For example
            if the current <c>hour</c> changes from 10 to 11, the first write that will occur
            on or after 11:00 will trigger the archiving.
            <p>
            Caution: Enabling this option can considerably slow down your file 
            logging in multi-process scenarios. If only one process is going to
            be writing to the file, consider setting <c>ConcurrentWrites</c>
            to <c>false</c> for maximum performance.
            </p></remarks>
            <docgen category="Archival Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveFileName">
            <summary>
            Gets or sets the name of the file to be used for an archive.
            </summary>
            <remarks>
            It may contain a special placeholder {#####}
            that will be replaced with a sequence of numbers depending on 
            the archiving strategy. The number of hash characters used determines
            the number of numerical digits to be used for numbering files.
            </remarks>
            <docgen category="Archival Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.MaxArchiveFiles">
            <summary>
            Gets or sets the maximum number of archive files that should be kept.
            </summary>
            <docgen category="Archival Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.ArchiveNumbering">
            <summary>
            Gets or sets the way file archives are numbered. 
            </summary>
            <docgen category="Archival Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FileTarget.NewLineChars">
            <summary>
            Gets the characters that are appended after each line.
            </summary>
        </member>
        <member name="T:NLog.Targets.FormControlTarget">
            <summary>
            Logs text to Windows.Forms.Control.Text property control of specified Name.
            </summary>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/FormControl/NLog.config" />
                <p>
            The result is:
            </p>
                <img src="examples/targets/Screenshots/FormControl/FormControl.gif" />
                <p>
            To set up the log target programmatically similar to above use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/FormControl/Form1.cs" />,
            </example>
        </member>
        <member name="M:NLog.Targets.FormControlTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.FormControlTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.FormControlTarget.Write(NLog.LogEventInfo)">
            <summary>
            Log message to control.
            </summary>
            <param name="logEvent">
            The logging event.
            </param>
        </member>
        <member name="P:NLog.Targets.FormControlTarget.ControlName">
            <summary>
            Gets or sets the name of control to which NLog will log write log text.
            </summary>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FormControlTarget.Append">
            <summary>
            Gets or sets a value indicating whether log text should be appended to the text of the control instead of overwriting it. </summary>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="P:NLog.Targets.FormControlTarget.FormName">
            <summary>
            Gets or sets the name of the Form on which the control is located.
            </summary>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="T:NLog.Targets.LineEndingMode">
            <summary>
            Line ending mode.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.Default">
            <summary>
            Insert platform-dependent end-of-line sequence after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.CRLF">
            <summary>
            Insert CR LF sequence (ASCII 13, ASCII 10) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.CR">
            <summary>
            Insert CR character (ASCII 13) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.LF">
            <summary>
            Insert LF character (ASCII 10) after each line.
            </summary>
        </member>
        <member name="F:NLog.Targets.LineEndingMode.None">
            <summary>
            Don't insert any line ending.
            </summary>
        </member>
        <member name="T:NLog.Targets.LogReceiverWebServiceTarget">
            <summary>
            Sends log messages to a NLog Receiver Service (using WCF or Web Services).
            </summary>
            <seealso href="http://nlog-project.org/wiki/LogReceiverService_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.LogReceiverWebServiceTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.LogReceiverWebServiceTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Writes an array of logging events to the log target. By default it iterates on all
            events and passes them to "Append" method. Inheriting classes can use this method to
            optimize batch writes.
            </summary>
            <param name="logEvents">Logging events to be written out.</param>
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.EndpointAddress">
            <summary>
            Gets or sets the endpoint address.
            </summary>
            <value>The endpoint address.</value>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.EndpointConfigurationName">
            <summary>
            Gets or sets the name of the endpoint configuration in WCF configuration file.
            </summary>
            <value>The name of the endpoint configuration.</value>
            <docgen category="Connection Options" order="10" />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.UseBinaryEncoding">
            <summary>
            Gets or sets a value indicating whether to use binary message encoding.
            </summary>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.ClientID">
            <summary>
            Gets or sets the client ID.
            </summary>
            <value>The client ID.</value>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="P:NLog.Targets.LogReceiverWebServiceTarget.Parameters">
            <summary>
            Gets the list of parameters.
            </summary>
            <value>The parameters.</value>
            <docgen category="Payload Options" order="10" />
        </member>
        <member name="T:NLog.Targets.MailTarget">
            <summary>
            Sends log messages by email using SMTP protocol.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Mail_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/Mail/Simple/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/Mail/Simple/Example.cs" />
                <p>
            Mail target works best when used with BufferingWrapper target
            which lets you send multiple log messages in single mail
            </p>
                <p>
            To set up the buffered mail target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/Mail/Buffered/NLog.config" />
                <p>
            To set up the buffered mail target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/Mail/Buffered/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MailTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MailTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MailTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Renders an array logging events.
            </summary>
            <param name="events">Array of logging events.</param>
        </member>
        <member name="P:NLog.Targets.MailTarget.From">
            <summary>
            Gets or sets sender's email address (e.g. joe@domain.com).
            </summary>
            <docgen category="Message Options" order="10" />
        </member>
        <member name="P:NLog.Targets.MailTarget.To">
            <summary>
            Gets or sets recipients' email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category="Message Options" order="11" />
        </member>
        <member name="P:NLog.Targets.MailTarget.CC">
            <summary>
            Gets or sets CC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category="Message Options" order="12" />
        </member>
        <member name="P:NLog.Targets.MailTarget.Bcc">
            <summary>
            Gets or sets BCC email addresses separated by semicolons (e.g. john@domain.com;jane@domain.com).
            </summary>
            <docgen category="Message Options" order="13" />
        </member>
        <member name="P:NLog.Targets.MailTarget.AddNewLines">
            <summary>
            Gets or sets a value indicating whether to add new lines between log entries.
            </summary>
            <value>A value of <c>true</c> if new lines should be added; otherwise, <c>false</c>.</value>
            <docgen category="Layout Options" order="99" />
        </member>
        <member name="P:NLog.Targets.MailTarget.Subject">
            <summary>
            Gets or sets the mail subject.
            </summary>
            <docgen category="Message Options" order="5" />
        </member>
        <member name="P:NLog.Targets.MailTarget.Body">
            <summary>
            Gets or sets mail message body (repeated for each log message send in one mail).
            </summary>
            <remarks>Alias for the <c>Layout</c> property.</remarks>
            <docgen category="Message Options" order="6" />
        </member>
        <member name="P:NLog.Targets.MailTarget.Encoding">
            <summary>
            Gets or sets encoding to be used for sending e-mail.
            </summary>
            <docgen category="Layout Options" order="20" />
        </member>
        <member name="P:NLog.Targets.MailTarget.Html">
            <summary>
            Gets or sets a value indicating whether to send message as HTML instead of plain text.
            </summary>
            <docgen category="Layout Options" order="11" />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpServer">
            <summary>
            Gets or sets SMTP Server to be used for sending.
            </summary>
            <docgen category="SMTP Options" order="10" />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpAuthentication">
            <summary>
            Gets or sets SMTP Authentication mode.
            </summary>
            <docgen category="SMTP Options" order="11" />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpUsername">
            <summary>
            Gets or sets the username used to connect to SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
            <docgen category="SMTP Options" order="12" />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpPassword">
            <summary>
            Gets or sets the password used to authenticate against SMTP server (used when SmtpAuthentication is set to "basic").
            </summary>
            <docgen category="SMTP Options" order="13" />
        </member>
        <member name="P:NLog.Targets.MailTarget.EnableSsl">
            <summary>
            Gets or sets a value indicating whether SSL (secure sockets layer) should be used when communicating with SMTP server.
            </summary>
            <docgen category="SMTP Options" order="14" />
        </member>
        <member name="P:NLog.Targets.MailTarget.SmtpPort">
            <summary>
            Gets or sets the port number that SMTP Server is listening on.
            </summary>
            <docgen category="SMTP Options" order="15" />
        </member>
        <member name="T:NLog.Targets.MemoryTarget">
            <summary>
            Writes log messages to an ArrayList in memory for programmatic retrieval.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Memory_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/Memory/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/Memory/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MemoryTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.MemoryTarget.Write(NLog.LogEventInfo)">
            <summary>
            Renders the logging event message and adds it to the internal ArrayList of log messages.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.MemoryTarget.Logs">
            <summary>
            Gets the list of logs gathered in the <see cref="T:NLog.Targets.MemoryTarget" />.
            </summary>
        </member>
        <member name="T:NLog.Targets.MessageBoxTarget">
            <summary>
            Pops up log messages as message boxes.
            </summary>
            <seealso href="http://nlog-project.org/wiki/MessageBox_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/MessageBox/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            The result is a message box:
            </p>
                <img src="examples/targets/Screenshots/MessageBox/MessageBoxTarget.gif" />
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/MessageBox/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MessageBoxTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.Write(NLog.LogEventInfo)">
            <summary>
            Displays the message box with the log message and caption specified in the Caption
            parameter.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="M:NLog.Targets.MessageBoxTarget.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Displays the message box with the array of rendered logs messages and caption specified in the Caption
            parameter.
            </summary>
            <param name="logEvents">The array of logging events.</param>
        </member>
        <member name="P:NLog.Targets.MessageBoxTarget.Caption">
            <summary>
            Gets or sets the message box title.
            </summary>
            <docgen category="UI Options" order="10" />
        </member>
        <member name="T:NLog.Targets.MethodCallParameter">
            <summary>
            A parameter to MethodCall.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
            <param name="layout">The layout to use for parameter value.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="layout">The layout.</param>
        </member>
        <member name="M:NLog.Targets.MethodCallParameter.#ctor(System.String,NLog.Layouts.Layout,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallParameter" /> class.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="layout">The layout.</param>
            <param name="type">The type of the parameter.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Type">
            <summary>
            Gets or sets the type of the parameter.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.MethodCallParameter.Layout">
            <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="T:NLog.Targets.MethodCallTarget">
            <summary>
            Calls the specified static method on each log message and passes contextual parameters to it.
            </summary>
            <seealso href="http://nlog-project.org/wiki/MethodCall_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/MethodCall/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/MethodCall/Simple/Example.cs" />
            </example>
        </member>
        <member name="T:NLog.Targets.MethodCallTargetBase">
            <summary>
            The base class for all targets which call methods (local or remote). 
            Manages parameters and type coercion.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.MethodCallTargetBase" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.Write(NLog.LogEventInfo)">
            <summary>
            Prepares an array of parameters to be passed based on the logging event and calls DoInvoke().
            </summary>
            <param name="logEvent">
            The logging event.
            </param>
        </member>
        <member name="M:NLog.Targets.MethodCallTargetBase.DoInvoke(System.Object[])">
            <summary>
            Calls the target method. Must be implemented in concrete classes.
            </summary>
            <param name="parameters">Method call parameters.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallTargetBase.Parameters">
            <summary>
            Gets the array of parameters to be passed.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.MethodCallTarget.DoInvoke(System.Object[])">
            <summary>
            Calls the specified Method.
            </summary>
            <param name="parameters">Method parameters.</param>
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.ClassName">
            <summary>
            Gets or sets the class name.
            </summary>
            <docgen category="Invocation Options" order="10" />
        </member>
        <member name="P:NLog.Targets.MethodCallTarget.MethodName">
            <summary>
            Gets or sets the method name. The method must be public and static.
            </summary>
            <docgen category="Invocation Options" order="10" />
        </member>
        <member name="T:NLog.Targets.NetworkTargetOverflowAction">
            <summary>
            Action that should be taken if the message overflows.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Error">
            <summary>
            Report an error.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Split">
            <summary>
            Split the message into smaller pieces.
            </summary>
        </member>
        <member name="F:NLog.Targets.NetworkTargetOverflowAction.Discard">
            <summary>
            Discard the entire message.
            </summary>
        </member>
        <member name="T:NLog.Targets.NLogViewerParameterInfo">
            <summary>
            Represents a parameter to a NLogViewer target.
            </summary>
        </member>
        <member name="M:NLog.Targets.NLogViewerParameterInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.NLogViewerParameterInfo" /> class.
            </summary>
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.Name">
            <summary>
            Gets or sets viewer parameter name.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.NLogViewerParameterInfo.Layout">
            <summary>
            Gets or sets the layout that should be use to calcuate the value for the parameter.
            </summary>
            <docgen category="Parameter Options" order="10" />
        </member>
        <member name="T:NLog.Targets.NullTarget">
            <summary>
            Discards log messages. Used mainly for debugging and benchmarking.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Null_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/Null/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/Null/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.NullTarget.Write(NLog.LogEventInfo)">
            <summary>
            Does nothing. Optionally it calculates the layout text but
            discards the results.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.NullTarget.FormatMessage">
            <summary>
            Gets or sets a value indicating whether to perform layout calculation.
            </summary>
            <docgen category="Layout Options" order="10" />
        </member>
        <member name="T:NLog.Targets.OutputDebugStringTarget">
            <summary>
            Outputs log messages through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <seealso href="http://nlog-project.org/wiki/OutputDebugString_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/OutputDebugString/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/OutputDebugString/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.OutputDebugStringTarget.Write(NLog.LogEventInfo)">
            <summary>
            Outputs the rendered logging event through the <c>OutputDebugString()</c> Win32 API.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.PerformanceCounterTarget">
            <summary>
            Increments specified performance counter on each write.
            </summary>
            <seealso href="http://nlog-project.org/wiki/PerformanceCounter_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/PerfCounter/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/PerfCounter/Simple/Example.cs" />
            </example>
            <remarks>
            TODO:
            1. Unable to create a category allowing multiple counter instances (.Net 2.0 API only, probably)
            2. Is there any way of adding new counters without deleting the whole category?
            3. There should be some mechanism of resetting the counter (e.g every day starts from 0), or auto-switching to 
               another counter instance (with dynamic creation of new instance). This could be done with layouts. 
            </remarks>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.PerformanceCounterTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Install(NLog.Config.InstallationContext)">
            <summary>
            Performs installation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Uninstall(NLog.Config.InstallationContext)">
            <summary>
            Performs uninstallation which requires administrative permissions.
            </summary>
            <param name="installationContext">The installation context.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.IsInstalled(NLog.Config.InstallationContext)">
            <summary>
            Determines whether the item is installed.
            </summary>
            <param name="installationContext">The installation context.</param>
            <returns>
            Value indicating whether the item is installed or null if it is not possible to determine.
            </returns>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.Write(NLog.LogEventInfo)">
            <summary>
            Increments the configured performance counter.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.PerformanceCounterTarget.EnsureInitialized">
            <summary>
            Ensures that the performance counter has been initialized.
            </summary>
            <returns>True if the performance counter is operational, false otherwise.</returns>
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.AutoCreate">
            <summary>
            Gets or sets a value indicating whether performance counter should be automatically created.
            </summary>
            <docgen category="Performance Counter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CategoryName">
            <summary>
            Gets or sets the name of the performance counter category.
            </summary>
            <docgen category="Performance Counter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterName">
            <summary>
            Gets or sets the name of the performance counter.
            </summary>
            <docgen category="Performance Counter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.InstanceName">
            <summary>
            Gets or sets the performance counter instance name.
            </summary>
            <docgen category="Performance Counter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterHelp">
            <summary>
            Gets or sets the counter help text.
            </summary>
            <docgen category="Performance Counter Options" order="10" />
        </member>
        <member name="P:NLog.Targets.PerformanceCounterTarget.CounterType">
            <summary>
            Gets or sets the performance counter type.
            </summary>
            <docgen category="Performance Counter Options" order="10" />
        </member>
        <member name="T:NLog.Targets.RichTextBoxRowColoringRule">
            <summary>
            The row-coloring condition.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#cctor">
            <summary>
            Initializes static members of the RichTextBoxRowColoringRule class.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxRowColoringRule" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor(System.String,System.String,System.String,System.Drawing.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxRowColoringRule" /> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="fontColor">Color of the foregroung text.</param>
            <param name="backColor">Color of the background text.</param>
            <param name="fontStyle">The font style.</param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxRowColoringRule" /> class.
            </summary>
            <param name="condition">The condition.</param>
            <param name="fontColor">Color of the text.</param>
            <param name="backColor">Color of the background.</param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxRowColoringRule.CheckCondition(NLog.LogEventInfo)">
            <summary>
            Checks whether the specified log event matches the condition (if any).
            </summary>
            <param name="logEvent">
            Log event.
            </param>
            <returns>
            A value of <see langword="true" /> if the condition is not defined or 
            if it matches, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Default">
            <summary>
            Gets the default highlighting rule. Doesn't change the color.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Condition">
            <summary>
            Gets or sets the condition that must be met in order to set the specified font color.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.FontColor">
            <summary>
            Gets or sets the font color.
            </summary>
            <remarks>
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed.
            </remarks>
            <docgen category="Formatting Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <remarks>
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed.
            </remarks>
            <docgen category="Formatting Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxRowColoringRule.Style">
            <summary>
            Gets or sets the font style of matched text. 
            </summary>
            <remarks>
            Possible values are the same as in <c>FontStyle</c> enum in <c>System.Drawing</c></remarks>
            <docgen category="Formatting Options" order="10" />
        </member>
        <member name="T:NLog.Targets.RichTextBoxTarget">
            <summary>
            Log text a Rich Text Box control in an existing or new form.
            </summary>
            <seealso href="http://nlog-project.org/wiki/RichTextBox_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/RichTextBox/Simple/NLog.config" />
                <p>
            The result is:
            </p>
                <img src="examples/targets/Screenshots/RichTextBox/Simple.gif" />
                <p>
            To set up the target with coloring rules in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/RichTextBox/RowColoring/NLog.config" />
                <code lang="XML" source="examples/targets/Configuration File/RichTextBox/WordColoring/NLog.config" />
                <p>
            The result is:
            </p>
                <img src="examples/targets/Screenshots/RichTextBox/RowColoring.gif" />
                <img src="examples/targets/Screenshots/RichTextBox/WordColoring.gif" />
                <p>
            To set up the log target programmatically similar to above use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/RichTextBox/Simple/Form1.cs" />
            ,
            <code lang="C#" source="examples/targets/Configuration API/RichTextBox/RowColoring/Form1.cs" />
            for RowColoring,
            <code lang="C#" source="examples/targets/Configuration API/RichTextBox/WordColoring/Form1.cs" />
            for WordColoring
            </example>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.#cctor">
            <summary>
            Initializes static members of the RichTextBoxTarget class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxTarget" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.InitializeTarget">
            <summary>
            Initializes the target. Can be used by inheriting classes
            to initialize logging.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.CloseTarget">
            <summary>
            Closes the target and releases any unmanaged resources.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxTarget.Write(NLog.LogEventInfo)">
            <summary>
            Log message to RichTextBox.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.DefaultRowColoringRules">
            <summary>
            Gets the default set of row coloring rules which applies when <see cref="P:NLog.Targets.RichTextBoxTarget.UseDefaultRowColoringRules" /> is set to true.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.ControlName">
            <summary>
            Gets or sets the Name of RichTextBox to which Nlog will write.
            </summary>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.FormName">
            <summary>
            Gets or sets the name of the Form on which the control is located. 
            If there is no open form of a specified name than NLog will create a new one.
            </summary>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.UseDefaultRowColoringRules">
            <summary>
            Gets or sets a value indicating whether to use default coloring rules.
            </summary>
            <docgen category="Highlighting Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.RowColoringRules">
            <summary>
            Gets the row coloring rules.
            </summary>
            <docgen category="Highlighting Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.WordColoringRules">
            <summary>
            Gets the word highlighting rules.
            </summary>
            <docgen category="Highlighting Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.ToolWindow">
            <summary>
            Gets or sets a value indicating whether the created window will be a tool window.
            </summary>
            <remarks>
            This parameter is ignored when logging to existing form control.
            Tool windows have thin border, and do not show up in the task bar.
            </remarks>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.ShowMinimized">
            <summary>
            Gets or sets a value indicating whether the created form will be initially minimized.
            </summary>
            <remarks>
            This parameter is ignored when logging to existing form control.
            </remarks>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.Width">
            <summary>
            Gets or sets the initial width of the form with rich text box.
            </summary>
            <remarks>
            This parameter is ignored when logging to existing form control.
            </remarks>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.Height">
            <summary>
            Gets or sets the initial height of the form with rich text box.
            </summary>
            <remarks>
            This parameter is ignored when logging to existing form control.
            </remarks>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.AutoScroll">
            <summary>
            Gets or sets a value indicating whether scroll bar will be moved automatically to show most recent log entries.
            </summary>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.MaxLines">
            <summary>
            Gets or sets the maximum number of lines the rich text box will store (or 0 to disable this feature).
            </summary>
            <remarks>
            After exceeding the maximum number, first line will be deleted. 
            </remarks>
            <docgen category="Form Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.TargetForm">
            <summary>
            Gets or sets the form to log to.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxTarget.TargetRichTextBox">
            <summary>
            Gets or sets the rich text box to log to.
            </summary>
        </member>
        <member name="T:NLog.Targets.RichTextBoxWordColoringRule">
            <summary>
            Highlighting rule for Win32 colorful console.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxWordColoringRule" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxWordColoringRule" /> class.
            </summary>
            <param name="text">The text to be matched..</param>
            <param name="fontColor">Color of the text.</param>
            <param name="backgroundColor">Color of the background.</param>
        </member>
        <member name="M:NLog.Targets.RichTextBoxWordColoringRule.#ctor(System.String,System.String,System.String,System.Drawing.FontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.RichTextBoxWordColoringRule" /> class.
            </summary>
            <param name="text">The text to be matched..</param>
            <param name="textColor">Color of the text.</param>
            <param name="backgroundColor">Color of the background.</param>
            <param name="fontStyle">The font style.</param>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Regex">
            <summary>
            Gets or sets the regular expression to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Text">
            <summary>
            Gets or sets the text to be matched. You must specify either <c>text</c> or <c>regex</c>.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.WholeWords">
            <summary>
            Gets or sets a value indicating whether to match whole words only.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.IgnoreCase">
            <summary>
            Gets or sets a value indicating whether to ignore case when comparing texts.
            </summary>
            <docgen category="Rule Matching Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.Style">
            <summary>
            Gets or sets the font style of matched text. 
            Possible values are the same as in <c>FontStyle</c> enum in <c>System.Drawing</c>.
            </summary>
            <docgen category="Formatting Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.CompiledRegex">
            <summary>
            Gets the compiled regular expression that matches either Text or Regex property.
            </summary>
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.FontColor">
            <summary>
            Gets or sets the font color.
            Names are identical with KnownColor enum extended with Empty value which means that font color won't be changed.
            </summary>
            <docgen category="Formatting Options" order="10" />
        </member>
        <member name="P:NLog.Targets.RichTextBoxWordColoringRule.BackgroundColor">
            <summary>
            Gets or sets the background color. 
            Names are identical with KnownColor enum extended with Empty value which means that background color won't be changed.
            </summary>
            <docgen category="Formatting Options" order="10" />
        </member>
        <member name="T:NLog.Targets.SmtpAuthenticationMode">
            <summary>
            SMTP authentication modes.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.None">
            <summary>
            No authentication.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.Basic">
            <summary>
            Basic - username and password.
            </summary>
        </member>
        <member name="F:NLog.Targets.SmtpAuthenticationMode.Ntlm">
            <summary>
            NTLM Authentication.
            </summary>
        </member>
        <member name="T:NLog.Targets.TargetAttribute">
            <summary>
            Marks class as a logging target and assigns a name to it.
            </summary>
        </member>
        <member name="M:NLog.Targets.TargetAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.TargetAttribute" /> class.
            </summary>
            <param name="targetName">Name of the target.</param>
        </member>
        <member name="P:NLog.Targets.TargetAttribute.IsWrapper">
            <summary>
            Gets or sets a value indicating whether to the target is a wrapper target (used to generate the target summary documentation page).
            </summary>
        </member>
        <member name="P:NLog.Targets.TargetAttribute.IsCompound">
            <summary>
            Gets or sets a value indicating whether to the target is a compound target (used to generate the target summary documentation page).
            </summary>
        </member>
        <member name="T:NLog.Targets.TraceTarget">
            <summary>
            Sends log messages through System.Diagnostics.Trace.
            </summary>
            <seealso href="http://nlog-project.org/wiki/Trace_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/Trace/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/Trace/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.TraceTarget.Write(NLog.LogEventInfo)">
            <summary>
            Writes the specified logging event to the <see cref="T:System.Diagnostics.Trace" /> facility.
            If the log level is greater than or equal to <see cref="F:NLog.LogLevel.Error" /> it uses the
            <see cref="M:System.Diagnostics.Trace.Fail(System.String)" /> method, otherwise it uses
            <see cref="M:System.Diagnostics.Trace.Write(System.String)" /> method.
            </summary>
            <param name="logEvent">The logging event.</param>
        </member>
        <member name="T:NLog.Targets.WebServiceProtocol">
            <summary>
            Web service protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.Soap11">
            <summary>
            Use SOAP 1.1 Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.Soap12">
            <summary>
            Use SOAP 1.2 Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.HttpPost">
            <summary>
            Use HTTP POST Protocol.
            </summary>
        </member>
        <member name="F:NLog.Targets.WebServiceProtocol.HttpGet">
            <summary>
            Use HTTP GET Protocol.
            </summary>
        </member>
        <member name="T:NLog.Targets.WebServiceTarget">
            <summary>
            Calls the specified web service on each log message.
            </summary>
            <seealso href="http://nlog-project.org/wiki/WebService_target">Documentation on NLog Wiki</seealso>
            <remarks>
            The web service must implement a method that accepts a number of string parameters.
            </remarks>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/WebService/NLog.config" />
                <p>
            This assumes just one target and a single rule. More configuration
            options are described <a href="config.html">here</a>.
            </p>
                <p>
            To set up the log target programmatically use code like this:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/Example.cs" />
                <p>The example web service that works with this example is shown below</p>
                <code lang="C#" source="examples/targets/Configuration API/WebService/Simple/WebService1/Service1.asmx.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.WebServiceTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.WebServiceTarget.DoInvoke(System.Object[])">
            <summary>
            Invokes the web service method.
            </summary>
            <param name="parameters">Parameters to be passed.</param>
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Url">
            <summary>
            Gets or sets the web service URL.
            </summary>
            <docgen category="Web Service Options" order="10" />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.MethodName">
            <summary>
            Gets or sets the Web service method name.
            </summary>
            <docgen category="Web Service Options" order="10" />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Namespace">
            <summary>
            Gets or sets the Web service namespace.
            </summary>
            <docgen category="Web Service Options" order="10" />
        </member>
        <member name="P:NLog.Targets.WebServiceTarget.Protocol">
            <summary>
            Gets or sets the protocol to be used when calling web service.
            </summary>
            <docgen category="Web Service Options" order="10" />
        </member>
        <member name="T:NLog.Targets.Win32FileAttributes">
            <summary>
            Win32 file attributes.
            </summary>
            <remarks>
            For more information see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/createfile.asp</a>.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Readonly">
            <summary>
            Read-only file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Hidden">
            <summary>
            Hidden file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.System">
            <summary>
            System file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Archive">
            <summary>
            File should be archived.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Device">
            <summary>
            Device file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Normal">
            <summary>
            Normal file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Temporary">
            <summary>
            File is temporary (should be kept in cache and not 
            written to disk if possible).
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.SparseFile">
            <summary>
            Sparse file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.ReparsePoint">
            <summary>
            Reparse point.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Compressed">
            <summary>
            Compress file contents.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.NotContentIndexed">
            <summary>
            File should not be indexed by the content indexing service. 
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.Encrypted">
            <summary>
            Encrypted file.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.WriteThrough">
            <summary>
            The system writes through any intermediate cache and goes directly to disk. 
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.NoBuffering">
            <summary>
            The system opens a file with no system caching.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.DeleteOnClose">
            <summary>
            Delete file after it is closed.
            </summary>
        </member>
        <member name="F:NLog.Targets.Win32FileAttributes.PosixSemantics">
            <summary>
            A file is accessed according to POSIX rules.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncRequestQueue">
            <summary>
            Asynchronous request queue.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.#ctor(System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>
            Initializes a new instance of the AsyncRequestQueue class.
            </summary>
            <param name="requestLimit">Request limit.</param>
            <param name="overflowAction">The overflow action.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Enqueue(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Enqueues another item. If the queue is overflown the appropriate
            action is taken as specified by <see cref="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow" />.
            </summary>
            <param name="logEventInfo">The log event info.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.DequeueBatch(System.Int32,NLog.Common.AsyncLogEventInfo[]@)">
            <summary>
            Dequeues a maximum of <c>count</c> items from the queue
            and adds returns the list containing them.
            </summary>
            <param name="count">Maximum number of items to be dequeued.</param>
            <param name="logEventInfos">The array of log events.</param>
            <returns>Number of dequeued items.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncRequestQueue.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestLimit">
            <summary>
            Gets or sets the request limit.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.OnOverflow">
            <summary>
            Gets or sets the action to be taken when there's no more room in
            the queue and another request is enqueued.
            </summary>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncRequestQueue.RequestCount">
            <summary>
            Gets the number of requests currently in the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapper">
            <summary>
            Provides asynchronous, buffered execution of target writes.
            </summary>
            <seealso href="http://nlog-project.org/wiki/AsyncWrapper_target">Documentation on NLog Wiki</seealso>
            <remarks>
                <p>
            Asynchronous target wrapper allows the logger code to execute more quickly, by queueing
            messages and processing them in a separate thread. You should wrap targets
            that spend a non-trivial amount of time in their Write() method with asynchronous
            target to speed up logging.
            </p>
                <p>
            Because asynchronous logging is quite a common scenario, NLog supports a
            shorthand notation for wrapping all targets with AsyncWrapper. Just add async="true" to
            the &lt;targets/&gt; element in the configuration file.
            </p>
                <code lang="XML"><![CDATA[
            <targets async="true">
               ... your targets go here ...
            </targets>
            ]]></code>
            </remarks>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/AsyncWrapper/NLog.config" />
                <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/AsyncWrapper/Wrapping File/Example.cs" />
            </example>
        </member>
        <member name="T:NLog.Targets.Wrappers.WrapperTargetBase">
            <summary>
            Base class for targets wrap other (single) targets.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.ToString">
            <summary>
            Returns the text representation of the object. Used for diagnostics.
            </summary>
            <returns>A string that describes the target.</returns>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.WrapperTargetBase.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target. Must be overridden in inheriting
            classes.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget">
            <summary>
            Gets or sets the target that is wrapped by this target.
            </summary>
            <docgen category="General Options" order="11" />
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AsyncTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="queueLimit">Maximum number of requests in the queue.</param>
            <param name="overflowAction">The action to be taken when the queue overflows.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Waits for the lazy writer thread to finish writing messages.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.InitializeTarget">
            <summary>
            Initializes the target by starting the lazy writer timer.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.CloseTarget">
            <summary>
            Shuts down the lazy writer timer.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StartLazyWriterTimer">
            <summary>
            Starts the lazy writer thread which periodically writes
            queued log messages.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.StopLazyWriterThread">
            <summary>
            Starts the lazy writer thread.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.AsyncTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the log event to asynchronous queue to be processed by
            the lazy writer thread.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The <see cref="M:NLog.Targets.Target.PrecalculateVolatileLayouts(NLog.LogEventInfo)" /> is called
            to ensure that the log event can be processed in another thread.
            </remarks>
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.BatchSize">
            <summary>
            Gets or sets the number of log events that should be processed in a batch
            by the lazy writer thread.
            </summary>
            <docgen category="Buffering Options" order="100" />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.TimeToSleepBetweenBatches">
            <summary>
            Gets or sets the time in milliseconds to sleep between batches.
            </summary>
            <docgen category="Buffering Options" order="100" />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.OverflowAction">
            <summary>
            Gets or sets the action to be taken when the lazy writer thread request queue count
            exceeds the set limit.
            </summary>
            <docgen category="Buffering Options" order="100" />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.QueueLimit">
            <summary>
            Gets or sets the limit on the number of requests in the lazy writer thread request queue.
            </summary>
            <docgen category="Buffering Options" order="100" />
        </member>
        <member name="P:NLog.Targets.Wrappers.AsyncTargetWrapper.RequestQueue">
            <summary>
            Gets the queue of lazy writer thread requests.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction">
            <summary>
            The action to be taken when the queue overflows.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Grow">
            <summary>
            Grow the queue.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Discard">
            <summary>
            Discard the overflowing item.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.AsyncTargetWrapperOverflowAction.Block">
            <summary>
            Block until there's more room in the queue.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper">
            <summary>
            Causes a flush after each write on a wrapped target.
            </summary>
            <seealso href="http://nlog-project.org/wiki/AutoFlushWrapper_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/AutoFlushWrapper/NLog.config" />
                <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/AutoFlushWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
            <remarks>
            The default value of the layout is: <code>${longdate}|${level:uppercase=true}|${logger}|${message}</code></remarks>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.AutoFlushTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.AutoFlushTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" />.Write()
            and calls <see cref="M:NLog.Targets.Target.Flush(NLog.Common.AsyncContinuation)" /> on it.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.BufferingTargetWrapper">
            <summary>
            A target that buffers log events and sends them in batches to the wrapped target.
            </summary>
            <seealso href="http://nlog-project.org/wiki/BufferingWrapper_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.BufferingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="bufferSize">Size of the buffer.</param>
            <param name="flushTimeout">The flush timeout.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flushes pending events in the buffer (if any).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.InitializeTarget">
            <summary>
            Initializes the target.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.CloseTarget">
            <summary>
            Closes the target by flushing pending events in the buffer (if any).
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.BufferingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Adds the specified log event to the buffer and flushes
            the buffer in case the buffer gets full.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.BufferSize">
            <summary>
            Gets or sets the number of log events to be buffered.
            </summary>
            <docgen category="Buffering Options" order="100" />
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.FlushTimeout">
            <summary>
            Gets or sets the timeout (in milliseconds) after which the contents of buffer will be flushed 
            if there's no write in the specified period of time. Use -1 to disable timed flushes.
            </summary>
            <docgen category="Buffering Options" order="100" />
        </member>
        <member name="P:NLog.Targets.Wrappers.BufferingTargetWrapper.SlidingTimeout">
            <summary>
            Gets or sets a value indicating whether to use sliding timeout.
            </summary>
            <remarks>
            This value determines how the inactivity period is determined. If sliding timeout is enabled,
            the inactivity timer is reset after each write, if it is disabled - inactivity timer will 
            count from the first event written to the buffer. 
            </remarks>
            <docgen category="Buffering Options" order="100" />
        </member>
        <member name="T:NLog.Targets.Wrappers.CompoundTargetBase">
            <summary>
            A base class for targets which wrap other (multiple) targets
            and provide various forms of target routing.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.CompoundTargetBase" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.Write(NLog.LogEventInfo)">
            <summary>
            Writes logging event to the log target.
            </summary>
            <param name="logEvent">Logging event to be written out.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.CompoundTargetBase.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages for all wrapped targets.
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.CompoundTargetBase.Targets">
            <summary>
            Gets the collection of targets managed by this compound target.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.FallbackGroupTarget">
            <summary>
            Provides fallback-on-error.
            </summary>
            <seealso href="http://nlog-project.org/wiki/FallbackGroup_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>This example causes the messages to be written to server1, 
            and if it fails, messages go to server2.</p>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/FallbackGroup/NLog.config" />
                <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/FallbackGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FallbackGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FallbackGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log event to the sub-targets until one of them succeeds.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The method remembers the last-known-successful target
            and starts the iteration from it.
            If <see cref="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess" /> is set, the method
            resets the target to the first target
            stored in <see cref="N:NLog.Targets" />.
            </remarks>
        </member>
        <member name="P:NLog.Targets.Wrappers.FallbackGroupTarget.ReturnToFirstOnSuccess">
            <summary>
            Gets or sets a value indicating whether to return to the first target after any successful write.
            </summary>
            <docgen category="Fallback Options" order="10" />
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringRule">
            <summary>
            Filtering rule for <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" />.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor">
            <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringRule.#ctor(NLog.Conditions.ConditionExpression,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the FilteringRule class.
            </summary>
            <param name="whenExistsExpression">Condition to be tested against all events.</param>
            <param name="filterToApply">Filter to apply to all log events when the first condition matches any of them.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.Exists">
            <summary>
            Gets or sets the condition to be tested.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringRule.Filter">
            <summary>
            Gets or sets the resulting filter to be applied when the condition matches.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="T:NLog.Targets.Wrappers.FilteringTargetWrapper">
            <summary>
            Filters log entries based on a condition.
            </summary>
            <seealso href="http://nlog-project.org/wiki/FilteringWrapper_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>This example causes the messages not contains the string '1' to be ignored.</p>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/FilteringWrapper/NLog.config" />
                <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/FilteringWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.#ctor(NLog.Targets.Target,NLog.Conditions.ConditionExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.FilteringTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="condition">The condition.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.FilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Checks the condition against the passed log event.
            If the condition is met, the log event is forwarded to
            the wrapped target.
            </summary>
            <param name="logEvent">Log event.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.FilteringTargetWrapper.Condition">
            <summary>
            Gets or sets the condition expression. Log events who meet this condition will be forwarded 
            to the wrapped target.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper">
            <summary>
            Impersonates another user for the duration of the write.
            </summary>
            <seealso href="http://nlog-project.org/wiki/ImpersonatingWrapper_target">Documentation on NLog Wiki</seealso>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.#ctor(NLog.Targets.Target)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.InitializeTarget">
            <summary>
            Initializes the impersonation context.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.CloseTarget">
            <summary>
            Closes the impersonation context.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" />.Write()
            and switches the context back to original.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Changes the security context, forwards the call to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" />.Write()
            and switches the context back to original.
            </summary>
            <param name="logEvents">Log events.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.FlushAsync(NLog.Common.AsyncContinuation)">
            <summary>
            Flush any pending log messages (in case of asynchronous targets).
            </summary>
            <param name="asyncContinuation">The asynchronous continuation.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.UserName">
            <summary>
            Gets or sets username to change context to.
            </summary>
            <docgen category="Impersonation Options" order="10" />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Password">
            <summary>
            Gets or sets the user account password.
            </summary>
            <docgen category="Impersonation Options" order="10" />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.Domain">
            <summary>
            Gets or sets Windows domain name to change context to.
            </summary>
            <docgen category="Impersonation Options" order="10" />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogonType">
            <summary>
            Gets or sets the Logon Type.
            </summary>
            <docgen category="Impersonation Options" order="10" />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.LogonProvider">
            <summary>
            Gets or sets the type of the logon provider.
            </summary>
            <docgen category="Impersonation Options" order="10" />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ImpersonationLevel">
            <summary>
            Gets or sets the required impersonation level.
            </summary>
            <docgen category="Impersonation Options" order="10" />
        </member>
        <member name="P:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.RevertToSelf">
            <summary>
            Gets or sets a value indicating whether to revert to the credentials of the process instead of impersonating another user.
            </summary>
            <docgen category="Impersonation Options" order="10" />
        </member>
        <member name="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter">
            <summary>
            Helper class which reverts the given <see cref="T:System.Security.Principal.WindowsImpersonationContext" /> 
            to its original value as part of <see cref="M:System.IDisposable.Dispose" />.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.#ctor(System.Security.Principal.WindowsImpersonationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter" /> class.
            </summary>
            <param name="windowsImpersonationContext">The windows impersonation context.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.ImpersonatingTargetWrapper.ContextReverter.Dispose">
            <summary>
            Reverts the impersonation context.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.LogonProviderType">
            <summary>
            Logon provider.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.LogonProviderType.Default">
            <summary>
            Use the standard logon provider for the system.
            </summary>
            <remarks>
            The default security provider is negotiate, unless you pass NULL for the domain name and the user name
            is not in UPN format. In this case, the default provider is NTLM.
            NOTE: Windows 2000/NT:   The default security provider is NTLM.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper">
            <summary>
            Filters buffered log entries based on a set of conditions that are evaluated on a group of events.
            </summary>
            <seealso href="http://nlog-project.org/wiki/PostFilteringWrapper_target">Documentation on NLog Wiki</seealso>
            <remarks>
            PostFilteringWrapper must be used with some type of buffering target or wrapper, such as
            AsyncTargetWrapper, BufferingWrapper or ASPNetBufferingWrapper.
            </remarks>
            <example>
                <p>
            This example works like this. If there are no Warn,Error or Fatal messages in the buffer
            only Info messages are written to the file, but if there are any warnings or errors, 
            the output includes detailed trace (levels &gt;= Debug). You can plug in a different type
            of buffering wrapper (such as ASPNetBufferingWrapper) to achieve different
            functionality.
            </p>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/PostFilteringWrapper/NLog.config" />
                <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/PostFilteringWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.PostFilteringTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Write(NLog.Common.AsyncLogEventInfo[])">
            <summary>
            Evaluates all filtering rules to find the first one that matches.
            The matching rule determines the filtering condition to be applied
            to all items in a buffer. If no condition matches, default filter
            is applied to the array of log events.
            </summary>
            <param name="logEvents">Array of log events to be post-filtered.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.DefaultFilter">
            <summary>
            Gets or sets the default filter to be applied when no specific rule matches.
            </summary>
            <docgen category="Filtering Options" order="10" />
        </member>
        <member name="P:NLog.Targets.Wrappers.PostFilteringTargetWrapper.Rules">
            <summary>
            Gets the collection of filtering rules. The rules are processed top-down
            and the first rule that matches determines the filtering condition to
            be applied to log events.
            </summary>
            <docgen category="Filtering Rules" order="10" />
        </member>
        <member name="T:NLog.Targets.Wrappers.RandomizeGroupTarget">
            <summary>
            Sends log messages to a randomly selected target.
            </summary>
            <seealso href="http://nlog-project.org/wiki/RandomizeGroup_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>This example causes the messages to be written to either file1.txt or file2.txt 
            chosen randomly on a per-message basis.
            </p>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/RandomizeGroup/NLog.config" />
                <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/RandomizeGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RandomizeGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RandomizeGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log event to one of the sub-targets.
            The sub-target is randomly chosen.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="T:NLog.Targets.Wrappers.RepeatingTargetWrapper">
            <summary>
            Repeats each log event the specified number of times.
            </summary>
            <seealso href="http://nlog-project.org/wiki/RepeatingWrapper_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>This example causes each log message to be repeated 3 times.</p>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/RepeatingWrapper/NLog.config" />
                <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/RepeatingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RepeatingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="repeatCount">The repeat count.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RepeatingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the log message to the <see cref="P:NLog.Targets.Wrappers.WrapperTargetBase.WrappedTarget" /> by calling the <see cref="M:NLog.Targets.Target.Write(NLog.LogEventInfo)" /> method <see cref="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount" /> times.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.RepeatingTargetWrapper.RepeatCount">
            <summary>
            Gets or sets the number of times to repeat each log message.
            </summary>
            <docgen category="Repeating Options" order="10" />
        </member>
        <member name="T:NLog.Targets.Wrappers.RetryingTargetWrapper">
            <summary>
            Retries in case of write error.
            </summary>
            <seealso href="http://nlog-project.org/wiki/RetryingWrapper_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>This example causes each write attempt to be repeated 3 times, 
            sleeping 1 second between attempts if first one fails.</p>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/RetryingWrapper/NLog.config" />
                <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/RetryingWrapper/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.#ctor(NLog.Targets.Target,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RetryingTargetWrapper" /> class.
            </summary>
            <param name="wrappedTarget">The wrapped target.</param>
            <param name="retryCount">The retry count.</param>
            <param name="retryDelayMilliseconds">The retry delay milliseconds.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RetryingTargetWrapper.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Writes the specified log event to the wrapped target, retrying and pausing in case of an error.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
        <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryCount">
            <summary>
            Gets or sets the number of retries that should be attempted on the wrapped target in case of a failure.
            </summary>
            <docgen category="Retrying Options" order="10" />
        </member>
        <member name="P:NLog.Targets.Wrappers.RetryingTargetWrapper.RetryDelayMilliseconds">
            <summary>
            Gets or sets the time to wait between retries in milliseconds.
            </summary>
            <docgen category="Retrying Options" order="10" />
        </member>
        <member name="T:NLog.Targets.Wrappers.RoundRobinGroupTarget">
            <summary>
            Distributes log events to targets in a round-robin fashion.
            </summary>
            <seealso href="http://nlog-project.org/wiki/RoundRobinGroup_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>This example causes the messages to be written to either file1.txt or file2.txt.
            Each odd message is written to file2.txt, each even message goes to file1.txt.
            </p>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/RoundRobinGroup/NLog.config" />
                <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/RoundRobinGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.RoundRobinGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.RoundRobinGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the write to one of the targets from
            the <see cref="N:NLog.Targets" /> collection.
            </summary>
            <param name="logEvent">The log event.</param>
            <remarks>
            The writes are routed in a round-robin fashion.
            The first log event goes to the first target, the second
            one goes to the second target and so on looping to the
            first target when there are no more targets available.
            In general request N goes to Targets[N % Targets.Count].
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.SecurityImpersonationLevel">
            <summary>
            Impersonation level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Anonymous">
            <summary>
            Anonymous Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Identification">
            <summary>
            Identification Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Impersonation">
            <summary>
            Impersonation Level.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityImpersonationLevel.Delegation">
            <summary>
            Delegation Level.
            </summary>
        </member>
        <member name="T:NLog.Targets.Wrappers.SecurityLogonType">
            <summary>
            Logon type.
            </summary>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogonType.Interactive">
            <summary>
            Interactive Logon.
            </summary>
            <remarks>
            This logon type is intended for users who will be interactively using the computer, such as a user being logged on  
            by a terminal server, remote shell, or similar process.
            This logon type has the additional expense of caching logon information for disconnected operations;
            therefore, it is inappropriate for some client/server applications,
            such as a mail server.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogonType.Network">
            <summary>
            Network Logon.
            </summary>
            <remarks>
            This logon type is intended for high performance servers to authenticate plaintext passwords.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogonType.Batch">
            <summary>
            Batch Logon.
            </summary>
            <remarks>
            This logon type is intended for batch servers, where processes may be executing on behalf of a user without
            their direct intervention. This type is also for higher performance servers that process many plaintext
            authentication attempts at a time, such as mail or Web servers.
            The LogonUser function does not cache credentials for this logon type.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogonType.Service">
            <summary>
            Logon as a Service.
            </summary>
            <remarks>
            Indicates a service-type logon. The account provided must have the service privilege enabled.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogonType.NetworkClearText">
            <summary>
            Network Clear Text Logon.
            </summary>
            <remarks>
            This logon type preserves the name and password in the authentication package, which allows the server to make
            connections to other network servers while impersonating the client. A server can accept plaintext credentials
            from a client, call LogonUser, verify that the user can access the system across the network, and still
            communicate with other servers.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
        </member>
        <member name="F:NLog.Targets.Wrappers.SecurityLogonType.NewCredentials">
            <summary>
            New Network Credentials.
            </summary>
            <remarks>
            This logon type allows the caller to clone its current token and specify new credentials for outbound connections.
            The new logon session has the same local identifier but uses different credentials for other network connections.
            NOTE: This logon type is supported only by the LOGON32_PROVIDER_WINNT50 logon provider.
            NOTE: Windows NT:  This value is not supported.
            </remarks>
        </member>
        <member name="T:NLog.Targets.Wrappers.SplitGroupTarget">
            <summary>
            Writes log events to all targets.
            </summary>
            <seealso href="http://nlog-project.org/wiki/SplitGroup_target">Documentation on NLog Wiki</seealso>
            <example>
                <p>This example causes the messages to be written to both file1.txt or file2.txt 
            </p>
                <p>
            To set up the target in the <a href="config.html">configuration file</a>, 
            use the following syntax:
            </p>
                <code lang="XML" source="examples/targets/Configuration File/SplitGroup/NLog.config" />
                <p>
            The above examples assume just one target and a single rule. See below for
            a programmatic configuration that's equivalent to the above config file:
            </p>
                <code lang="C#" source="examples/targets/Configuration API/SplitGroup/Simple/Example.cs" />
            </example>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.#ctor(NLog.Targets.Target[])">
            <summary>
            Initializes a new instance of the <see cref="T:NLog.Targets.Wrappers.SplitGroupTarget" /> class.
            </summary>
            <param name="targets">The targets.</param>
        </member>
        <member name="M:NLog.Targets.Wrappers.SplitGroupTarget.Write(NLog.Common.AsyncLogEventInfo)">
            <summary>
            Forwards the specified log event to all sub-targets.
            </summary>
            <param name="logEvent">The log event.</param>
        </member>
    </members>
</doc>